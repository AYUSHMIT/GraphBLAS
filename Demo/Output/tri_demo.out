--------------------------------------------------------------
Wathen: nx 4 ny 4 n 65 nz 752 method 0, time: 0.010 sec

GraphBLAS matrix: from get_matrix: 
nrows: 65 ncols: 65 max # entries: 817
format: standard CSR vlen: 65 nvec_nonempty: 65 nvec: 65 plen: 65 vdim: 65
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 752 
row: 0 : 7 entries [0:6]
    column 1: double -3.43365642660378
    column 2: double 1.14455214220126
    column 9: double -3.43365642660378
    column 10: double -4.57820856880504
    column 14: double 1.14455214220126
    column 15: double -4.57820856880504
    column 16: double 1.71682821330189
row: 1 : 7 entries [7:13]
    column 0: double -3.43365642660378
    column 2: double -3.43365642660378
    column 9: double 11.4455214220126
    column 10: double 11.4455214220126
    column 14: double -4.57820856880504
    column 15: double 9.15641713761008
    column 16: double -4.57820856880504
row: 2 : 12 entries [14:25]
    column 0: double 1.14455214220126
    column 1: double -3.43365642660378
    column 3: double -9.1794115743147
    column 4: double 3.0598038581049
    column 9: double -4.57820856880504
    column 10: double -12.6130680009185
    column 11: double -12.2392154324196
    column 14: double 1.71682821330189
    column 15: double -4.57820856880504
    column 16: double 4.20435600030616
    column 17: double -12.2392154324196
    column 18: double 4.58970578715735
row: 3 : 7 entries [26:32]
    column 2: double -9.1794115743147
    column 4: double -9.1794115743147
    column 10: double 30.598038581049
    column 11: double 30.598038581049
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 7 entries [71:77]
    ...
row: 9 : 7 entries [78:84]
    ...
...

total time to read A matrix:       0.010455 sec

n 65 # edges 376
U=triu(A) time:        0.000018 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000008 sec
# triangles 872

L'*U time (dot):         0.000054 sec
tricount time:         0.000066 sec (dot product method)
tri+prep time:         0.000092 sec (incl time to compute L and U)
compute C time:        0.000054 sec
reduce (C) time:       0.000012 sec
rate       4.09 million edges/sec (incl time for U=triu(A))
rate       5.69 million edges/sec (just tricount itself)

# triangles 872

L'*U time (dot):         0.000079 sec (nthreads: 2 speedup 0.685801)
tricount time:         0.000082 sec (dot product method)
tri+prep time:         0.000108 sec (incl time to compute L and U)
compute C time:        0.000079 sec
reduce (C) time:       0.000003 sec
rate       3.48 million edges/sec (incl time for U=triu(A))
rate       4.58 million edges/sec (just tricount itself)

# triangles 872

L'*U time (dot):         0.000061 sec (nthreads: 3 speedup 0.886719)
tricount time:         0.000064 sec (dot product method)
tri+prep time:         0.000090 sec (incl time to compute L and U)
compute C time:        0.000061 sec
reduce (C) time:       0.000003 sec
rate       4.17 million edges/sec (incl time for U=triu(A))
rate       5.86 million edges/sec (just tricount itself)

# triangles 872

L'*U time (dot):         0.000032 sec (nthreads: 4 speedup 1.69403)
tricount time:         0.000035 sec (dot product method)
tri+prep time:         0.000061 sec (incl time to compute L and U)
compute C time:        0.000032 sec
reduce (C) time:       0.000003 sec
rate       6.16 million edges/sec (incl time for U=triu(A))
rate      10.73 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000049 sec
tricount time:         0.000051 sec (saxpy method)
tri+prep time:         0.000059 sec (incl time to compute L)
compute C time:        0.000049 sec
reduce (C) time:       0.000002 sec
rate       6.38 million edges/sec (incl time for L=tril(A))
rate       7.37 million edges/sec (just tricount itself)

flop count 1883

C<L>=L*L time (saxpy):         0.000045 sec (nthreads: 2 speedup 1.08995)
tricount time:         0.000048 sec (saxpy method)
tri+prep time:         0.000056 sec (incl time to compute L)
compute C time:        0.000045 sec
reduce (C) time:       0.000003 sec
rate       6.74 million edges/sec (incl time for L=tril(A))
rate       7.85 million edges/sec (just tricount itself)

flop count 1883

C<L>=L*L time (saxpy):         0.000032 sec (nthreads: 3 speedup 1.53731)
tricount time:         0.000035 sec (saxpy method)
tri+prep time:         0.000043 sec (incl time to compute L)
compute C time:        0.000032 sec
reduce (C) time:       0.000003 sec
rate       8.76 million edges/sec (incl time for L=tril(A))
rate      10.73 million edges/sec (just tricount itself)

flop count 1883

C<L>=L*L time (saxpy):         0.000027 sec (nthreads: 4 speedup 1.82301)
tricount time:         0.000030 sec (saxpy method)
tri+prep time:         0.000038 sec (incl time to compute L)
compute C time:        0.000027 sec
reduce (C) time:       0.000003 sec
rate       9.92 million edges/sec (incl time for L=tril(A))
rate      12.52 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 5 by 5, nz: 18, method 1 time 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 5 ncols: 5 max # entries: 18
format: standard CSR vlen: 5 nvec_nonempty: 5 nvec: 5 plen: 5 vdim: 5
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 18 
row: 0 : 3 entries [0:2]
    column 1: double 0.717388479790099
    column 2: double 0.159899455348467
    column 3: double 0.937600838142916
row: 1 : 4 entries [3:6]
    column 0: double 0.717388479790099
    column 2: double 0.951473352740709
    column 3: double 0.82691712979873
    column 4: double 0.620002095185994
row: 2 : 4 entries [7:10]
    column 0: double 0.159899455348467
    column 1: double 0.951473352740709
    column 3: double 0.855698335145892
    column 4: double 0.867500482629324
row: 3 : 4 entries [11:14]
    column 0: double 0.937600838142916
    column 1: double 0.82691712979873
    column 2: double 0.855698335145892
    column 4: double 0.992311681061557
row: 4 : 3 entries [15:17]
    column 1: double 0.620002095185994
    column 2: double 0.867500482629324
    column 3: double 0.992311681061557

total time to read A matrix:       0.000544 sec

n 5 # edges 9
U=triu(A) time:        0.000013 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000003 sec
# triangles 7

L'*U time (dot):         0.000042 sec
tricount time:         0.000057 sec (dot product method)
tri+prep time:         0.000073 sec (incl time to compute L and U)
compute C time:        0.000042 sec
reduce (C) time:       0.000015 sec
rate       0.12 million edges/sec (incl time for U=triu(A))
rate       0.16 million edges/sec (just tricount itself)

# triangles 7

L'*U time (dot):         0.000134 sec (nthreads: 2 speedup 0.313167)
tricount time:         0.000135 sec (dot product method)
tri+prep time:         0.000151 sec (incl time to compute L and U)
compute C time:        0.000134 sec
reduce (C) time:       0.000001 sec
rate       0.06 million edges/sec (incl time for U=triu(A))
rate       0.07 million edges/sec (just tricount itself)

# triangles 7

L'*U time (dot):         0.000137 sec (nthreads: 3 speedup 0.30662)
tricount time:         0.000139 sec (dot product method)
tri+prep time:         0.000155 sec (incl time to compute L and U)
compute C time:        0.000137 sec
reduce (C) time:       0.000002 sec
rate       0.06 million edges/sec (incl time for U=triu(A))
rate       0.06 million edges/sec (just tricount itself)

# triangles 7

L'*U time (dot):         0.000125 sec (nthreads: 4 speedup 0.335238)
tricount time:         0.000127 sec (dot product method)
tri+prep time:         0.000143 sec (incl time to compute L and U)
compute C time:        0.000125 sec
reduce (C) time:       0.000002 sec
rate       0.06 million edges/sec (incl time for U=triu(A))
rate       0.07 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000053 sec
tricount time:         0.000055 sec (saxpy method)
tri+prep time:         0.000058 sec (incl time to compute L)
compute C time:        0.000053 sec
reduce (C) time:       0.000002 sec
rate       0.16 million edges/sec (incl time for L=tril(A))
rate       0.16 million edges/sec (just tricount itself)

flop count 9

C<L>=L*L time (saxpy):         0.000051 sec (nthreads: 2 speedup 1.03738)
tricount time:         0.000052 sec (saxpy method)
tri+prep time:         0.000055 sec (incl time to compute L)
compute C time:        0.000051 sec
reduce (C) time:       0.000001 sec
rate       0.16 million edges/sec (incl time for L=tril(A))
rate       0.17 million edges/sec (just tricount itself)

flop count 9

C<L>=L*L time (saxpy):         0.000025 sec (nthreads: 3 speedup 2.13462)
tricount time:         0.000026 sec (saxpy method)
tri+prep time:         0.000029 sec (incl time to compute L)
compute C time:        0.000025 sec
reduce (C) time:       0.000001 sec
rate       0.31 million edges/sec (incl time for L=tril(A))
rate       0.35 million edges/sec (just tricount itself)

flop count 9

C<L>=L*L time (saxpy):         0.000079 sec (nthreads: 4 speedup 0.670695)
tricount time:         0.000081 sec (saxpy method)
tri+prep time:         0.000084 sec (incl time to compute L)
compute C time:        0.000079 sec
reduce (C) time:       0.000002 sec
rate       0.11 million edges/sec (incl time for L=tril(A))
rate       0.11 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4 by 4, 4 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 4
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 1 entries [1:1]
    column 0: bool 1
row: 2 : 1 entries [2:2]
    column 3: bool 1
row: 3 : 1 entries [3:3]
    column 2: bool 1

total time to read A matrix:       0.000598 sec

n 4 # edges 2
U=triu(A) time:        0.000012 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000003 sec
# triangles 0

L'*U time (dot):         0.000041 sec
tricount time:         0.000052 sec (dot product method)
tri+prep time:         0.000067 sec (incl time to compute L and U)
compute C time:        0.000041 sec
reduce (C) time:       0.000011 sec
rate       0.03 million edges/sec (incl time for U=triu(A))
rate       0.04 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000153 sec (nthreads: 2 speedup 0.267913)
tricount time:         0.000154 sec (dot product method)
tri+prep time:         0.000169 sec (incl time to compute L and U)
compute C time:        0.000153 sec
reduce (C) time:       0.000001 sec
rate       0.01 million edges/sec (incl time for U=triu(A))
rate       0.01 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000147 sec (nthreads: 3 speedup 0.279221)
tricount time:         0.000148 sec (dot product method)
tri+prep time:         0.000163 sec (incl time to compute L and U)
compute C time:        0.000147 sec
reduce (C) time:       0.000001 sec
rate       0.01 million edges/sec (incl time for U=triu(A))
rate       0.01 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000134 sec (nthreads: 4 speedup 0.305506)
tricount time:         0.000136 sec (dot product method)
tri+prep time:         0.000151 sec (incl time to compute L and U)
compute C time:        0.000134 sec
reduce (C) time:       0.000002 sec
rate       0.01 million edges/sec (incl time for U=triu(A))
rate       0.01 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000075 sec
tricount time:         0.000076 sec (saxpy method)
tri+prep time:         0.000079 sec (incl time to compute L)
compute C time:        0.000075 sec
reduce (C) time:       0.000001 sec
rate       0.03 million edges/sec (incl time for L=tril(A))
rate       0.03 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000057 sec (nthreads: 2 speedup 1.31381)
tricount time:         0.000058 sec (saxpy method)
tri+prep time:         0.000061 sec (incl time to compute L)
compute C time:        0.000057 sec
reduce (C) time:       0.000001 sec
rate       0.03 million edges/sec (incl time for L=tril(A))
rate       0.03 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000028 sec (nthreads: 3 speedup 2.66102)
tricount time:         0.000029 sec (saxpy method)
tri+prep time:         0.000032 sec (incl time to compute L)
compute C time:        0.000028 sec
reduce (C) time:       0.000001 sec
rate       0.06 million edges/sec (incl time for L=tril(A))
rate       0.07 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000027 sec (nthreads: 4 speedup 2.77876)
tricount time:         0.000028 sec (saxpy method)
tri+prep time:         0.000031 sec (incl time to compute L)
compute C time:        0.000027 sec
reduce (C) time:       0.000001 sec
rate       0.06 million edges/sec (incl time for L=tril(A))
rate       0.07 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4 by 4, 10 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 10
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 10 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 2 entries [6:7]
    column 0: bool 1
    column 1: bool 1
row: 3 : 2 entries [8:9]
    column 0: bool 1
    column 1: bool 1

total time to read A matrix:       0.012873 sec

n 4 # edges 5
U=triu(A) time:        0.000012 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000003 sec
# triangles 2

L'*U time (dot):         0.000040 sec
tricount time:         0.000051 sec (dot product method)
tri+prep time:         0.000066 sec (incl time to compute L and U)
compute C time:        0.000040 sec
reduce (C) time:       0.000011 sec
rate       0.08 million edges/sec (incl time for U=triu(A))
rate       0.10 million edges/sec (just tricount itself)

# triangles 2

L'*U time (dot):         0.000491 sec (nthreads: 2 speedup 0.081593)
tricount time:         0.000493 sec (dot product method)
tri+prep time:         0.000508 sec (incl time to compute L and U)
compute C time:        0.000491 sec
reduce (C) time:       0.000002 sec
rate       0.01 million edges/sec (incl time for U=triu(A))
rate       0.01 million edges/sec (just tricount itself)

# triangles 2

L'*U time (dot):         0.000021 sec (nthreads: 3 speedup 1.90909)
tricount time:         0.000022 sec (dot product method)
tri+prep time:         0.000037 sec (incl time to compute L and U)
compute C time:        0.000021 sec
reduce (C) time:       0.000001 sec
rate       0.14 million edges/sec (incl time for U=triu(A))
rate       0.23 million edges/sec (just tricount itself)

# triangles 2

L'*U time (dot):         0.000021 sec (nthreads: 4 speedup 1.90909)
tricount time:         0.000022 sec (dot product method)
tri+prep time:         0.000037 sec (incl time to compute L and U)
compute C time:        0.000021 sec
reduce (C) time:       0.000001 sec
rate       0.14 million edges/sec (incl time for U=triu(A))
rate       0.23 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000043 sec
tricount time:         0.000045 sec (saxpy method)
tri+prep time:         0.000048 sec (incl time to compute L)
compute C time:        0.000043 sec
reduce (C) time:       0.000002 sec
rate       0.10 million edges/sec (incl time for L=tril(A))
rate       0.11 million edges/sec (just tricount itself)

flop count 2

C<L>=L*L time (saxpy):         0.000037 sec (nthreads: 2 speedup 1.16774)
tricount time:         0.000038 sec (saxpy method)
tri+prep time:         0.000041 sec (incl time to compute L)
compute C time:        0.000037 sec
reduce (C) time:       0.000001 sec
rate       0.12 million edges/sec (incl time for L=tril(A))
rate       0.13 million edges/sec (just tricount itself)

flop count 2

C<L>=L*L time (saxpy):         0.000026 sec (nthreads: 3 speedup 1.66055)
tricount time:         0.000028 sec (saxpy method)
tri+prep time:         0.000031 sec (incl time to compute L)
compute C time:        0.000026 sec
reduce (C) time:       0.000002 sec
rate       0.16 million edges/sec (incl time for L=tril(A))
rate       0.18 million edges/sec (just tricount itself)

flop count 2

C<L>=L*L time (saxpy):         0.000026 sec (nthreads: 4 speedup 1.66055)
tricount time:         0.000028 sec (saxpy method)
tri+prep time:         0.000031 sec (incl time to compute L)
compute C time:        0.000026 sec
reduce (C) time:       0.000002 sec
rate       0.16 million edges/sec (incl time for L=tril(A))
rate       0.18 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 7 by 7, 16 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1

total time to read A matrix:       0.000660 sec

n 7 # edges 8
U=triu(A) time:        0.000013 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000003 sec
# triangles 0

L'*U time (dot):         0.000040 sec
tricount time:         0.000051 sec (dot product method)
tri+prep time:         0.000067 sec (incl time to compute L and U)
compute C time:        0.000040 sec
reduce (C) time:       0.000011 sec
rate       0.12 million edges/sec (incl time for U=triu(A))
rate       0.16 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000051 sec (nthreads: 2 speedup 0.780374)
tricount time:         0.000053 sec (dot product method)
tri+prep time:         0.000069 sec (incl time to compute L and U)
compute C time:        0.000051 sec
reduce (C) time:       0.000002 sec
rate       0.12 million edges/sec (incl time for U=triu(A))
rate       0.15 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000035 sec (nthreads: 3 speedup 1.13605)
tricount time:         0.000036 sec (dot product method)
tri+prep time:         0.000052 sec (incl time to compute L and U)
compute C time:        0.000035 sec
reduce (C) time:       0.000001 sec
rate       0.15 million edges/sec (incl time for U=triu(A))
rate       0.22 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000021 sec (nthreads: 4 speedup 1.89773)
tricount time:         0.000022 sec (dot product method)
tri+prep time:         0.000038 sec (incl time to compute L and U)
compute C time:        0.000021 sec
reduce (C) time:       0.000001 sec
rate       0.21 million edges/sec (incl time for U=triu(A))
rate       0.36 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000056 sec
tricount time:         0.000057 sec (saxpy method)
tri+prep time:         0.000060 sec (incl time to compute L)
compute C time:        0.000056 sec
reduce (C) time:       0.000001 sec
rate       0.13 million edges/sec (incl time for L=tril(A))
rate       0.14 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000036 sec (nthreads: 2 speedup 1.55629)
tricount time:         0.000037 sec (saxpy method)
tri+prep time:         0.000040 sec (incl time to compute L)
compute C time:        0.000036 sec
reduce (C) time:       0.000001 sec
rate       0.20 million edges/sec (incl time for L=tril(A))
rate       0.22 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000026 sec (nthreads: 3 speedup 2.15596)
tricount time:         0.000027 sec (saxpy method)
tri+prep time:         0.000030 sec (incl time to compute L)
compute C time:        0.000026 sec
reduce (C) time:       0.000001 sec
rate       0.27 million edges/sec (incl time for L=tril(A))
rate       0.30 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000026 sec (nthreads: 4 speedup 2.15596)
tricount time:         0.000027 sec (saxpy method)
tri+prep time:         0.000030 sec (incl time to compute L)
compute C time:        0.000026 sec
reduce (C) time:       0.000001 sec
rate       0.27 million edges/sec (incl time for L=tril(A))
rate       0.30 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 304 by 304, 876 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...

total time to read A matrix:       0.001053 sec

n 304 # edges 438
U=triu(A) time:        0.000022 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000017 sec
# triangles 0

L'*U time (dot):         0.000049 sec
tricount time:         0.000060 sec (dot product method)
tri+prep time:         0.000099 sec (incl time to compute L and U)
compute C time:        0.000049 sec
reduce (C) time:       0.000011 sec
rate       4.43 million edges/sec (incl time for U=triu(A))
rate       7.29 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000133 sec (nthreads: 2 speedup 0.369176)
tricount time:         0.000134 sec (dot product method)
tri+prep time:         0.000173 sec (incl time to compute L and U)
compute C time:        0.000133 sec
reduce (C) time:       0.000001 sec
rate       2.53 million edges/sec (incl time for U=triu(A))
rate       3.27 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000149 sec (nthreads: 3 speedup 0.330128)
tricount time:         0.000150 sec (dot product method)
tri+prep time:         0.000189 sec (incl time to compute L and U)
compute C time:        0.000149 sec
reduce (C) time:       0.000001 sec
rate       2.32 million edges/sec (incl time for U=triu(A))
rate       2.92 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000137 sec (nthreads: 4 speedup 0.358885)
tricount time:         0.000138 sec (dot product method)
tri+prep time:         0.000177 sec (incl time to compute L and U)
compute C time:        0.000137 sec
reduce (C) time:       0.000001 sec
rate       2.48 million edges/sec (incl time for U=triu(A))
rate       3.18 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000075 sec
tricount time:         0.000076 sec (saxpy method)
tri+prep time:         0.000093 sec (incl time to compute L)
compute C time:        0.000075 sec
reduce (C) time:       0.000001 sec
rate       4.71 million edges/sec (incl time for L=tril(A))
rate       5.76 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000060 sec (nthreads: 2 speedup 1.25498)
tricount time:         0.000061 sec (saxpy method)
tri+prep time:         0.000078 sec (incl time to compute L)
compute C time:        0.000060 sec
reduce (C) time:       0.000001 sec
rate       5.64 million edges/sec (incl time for L=tril(A))
rate       7.20 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000050 sec (nthreads: 3 speedup 1.5)
tricount time:         0.000051 sec (saxpy method)
tri+prep time:         0.000068 sec (incl time to compute L)
compute C time:        0.000050 sec
reduce (C) time:       0.000001 sec
rate       6.45 million edges/sec (incl time for L=tril(A))
rate       8.58 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000050 sec (nthreads: 4 speedup 1.5)
tricount time:         0.000051 sec (saxpy method)
tri+prep time:         0.000068 sec (incl time to compute L)
compute C time:        0.000050 sec
reduce (C) time:       0.000001 sec
rate       6.45 million edges/sec (incl time for L=tril(A))
rate       8.58 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 48 by 48, 352 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 48 ncols: 48 max # entries: 352
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 352 
row: 0 : 7 entries [0:6]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 7 entries [7:13]
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 7 entries [14:20]
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 7 entries [21:27]
    column 1: bool 1
    column 2: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    column 26: bool 1
    column 27: bool 1
row: 4 : 7 entries [28:34]
    column 0: bool 1
    column 2: bool 1
    ...
row: 5 : 7 entries [35:41]
    ...
row: 6 : 7 entries [42:48]
    ...
row: 7 : 7 entries [49:55]
    ...
row: 8 : 7 entries [56:62]
    ...
row: 9 : 7 entries [63:69]
    ...
...

total time to read A matrix:       0.000903 sec

n 48 # edges 176
U=triu(A) time:        0.000019 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000008 sec
# triangles 160

L'*U time (dot):         0.000051 sec
tricount time:         0.000063 sec (dot product method)
tri+prep time:         0.000090 sec (incl time to compute L and U)
compute C time:        0.000051 sec
reduce (C) time:       0.000012 sec
rate       1.95 million edges/sec (incl time for U=triu(A))
rate       2.79 million edges/sec (just tricount itself)

# triangles 160

L'*U time (dot):         0.000159 sec (nthreads: 2 speedup 0.32084)
tricount time:         0.000161 sec (dot product method)
tri+prep time:         0.000188 sec (incl time to compute L and U)
compute C time:        0.000159 sec
reduce (C) time:       0.000002 sec
rate       0.94 million edges/sec (incl time for U=triu(A))
rate       1.09 million edges/sec (just tricount itself)

# triangles 160

L'*U time (dot):         0.000139 sec (nthreads: 3 speedup 0.367067)
tricount time:         0.000141 sec (dot product method)
tri+prep time:         0.000168 sec (incl time to compute L and U)
compute C time:        0.000139 sec
reduce (C) time:       0.000002 sec
rate       1.05 million edges/sec (incl time for U=triu(A))
rate       1.25 million edges/sec (just tricount itself)

# triangles 160

L'*U time (dot):         0.000175 sec (nthreads: 4 speedup 0.291553)
tricount time:         0.000177 sec (dot product method)
tri+prep time:         0.000204 sec (incl time to compute L and U)
compute C time:        0.000175 sec
reduce (C) time:       0.000002 sec
rate       0.86 million edges/sec (incl time for U=triu(A))
rate       0.99 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000041 sec
tricount time:         0.000043 sec (saxpy method)
tri+prep time:         0.000051 sec (incl time to compute L)
compute C time:        0.000041 sec
reduce (C) time:       0.000002 sec
rate       3.45 million edges/sec (incl time for L=tril(A))
rate       4.08 million edges/sec (just tricount itself)

flop count 410

C<L>=L*L time (saxpy):         0.000040 sec (nthreads: 2 speedup 1.02994)
tricount time:         0.000042 sec (saxpy method)
tri+prep time:         0.000050 sec (incl time to compute L)
compute C time:        0.000040 sec
reduce (C) time:       0.000002 sec
rate       3.53 million edges/sec (incl time for L=tril(A))
rate       4.19 million edges/sec (just tricount itself)

flop count 410

C<L>=L*L time (saxpy):         0.000029 sec (nthreads: 3 speedup 1.42149)
tricount time:         0.000031 sec (saxpy method)
tri+prep time:         0.000039 sec (incl time to compute L)
compute C time:        0.000029 sec
reduce (C) time:       0.000002 sec
rate       4.53 million edges/sec (incl time for L=tril(A))
rate       5.68 million edges/sec (just tricount itself)

flop count 410

C<L>=L*L time (saxpy):         0.000029 sec (nthreads: 4 speedup 1.42149)
tricount time:         0.000031 sec (saxpy method)
tri+prep time:         0.000039 sec (incl time to compute L)
compute C time:        0.000029 sec
reduce (C) time:       0.000002 sec
rate       4.53 million edges/sec (incl time for L=tril(A))
rate       5.68 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4884 by 4884, 285494 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4884 ncols: 4884 max # entries: 285494
format: standard CSR vlen: 4884 nvec_nonempty: 4810 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 285494 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 14 entries [14:27]
    column 0: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 3 : 24 entries [28:51]
    column 0: bool 1
    column 1: bool 1
    ...
row: 4 : 24 entries [52:75]
    ...
row: 6 : 29 entries [76:104]
    ...
row: 7 : 29 entries [105:133]
    ...
row: 9 : 29 entries [134:162]
    ...
row: 10 : 29 entries [163:191]
    ...
row: 12 : 39 entries [192:230]
    ...
row: 13 : 39 entries [231:269]
    ...
...

total time to read A matrix:       0.092670 sec

n 4884 # edges 142747
U=triu(A) time:        0.001709 sec

------------------------------------- dot product method:
L=tril(A) time:        0.002199 sec
# triangles 1512964

L'*U time (dot):         0.018455 sec
tricount time:         0.019129 sec (dot product method)
tri+prep time:         0.023037 sec (incl time to compute L and U)
compute C time:        0.018455 sec
reduce (C) time:       0.000674 sec
rate       6.20 million edges/sec (incl time for U=triu(A))
rate       7.46 million edges/sec (just tricount itself)

# triangles 1512964

L'*U time (dot):         0.021860 sec (nthreads: 2 speedup 0.844242)
tricount time:         0.022797 sec (dot product method)
tri+prep time:         0.026705 sec (incl time to compute L and U)
compute C time:        0.021860 sec
reduce (C) time:       0.000937 sec
rate       5.35 million edges/sec (incl time for U=triu(A))
rate       6.26 million edges/sec (just tricount itself)

# triangles 1512964

L'*U time (dot):         0.008374 sec (nthreads: 3 speedup 2.20386)
tricount time:         0.009061 sec (dot product method)
tri+prep time:         0.012969 sec (incl time to compute L and U)
compute C time:        0.008374 sec
reduce (C) time:       0.000687 sec
rate      11.01 million edges/sec (incl time for U=triu(A))
rate      15.75 million edges/sec (just tricount itself)

# triangles 1512964

L'*U time (dot):         0.006411 sec (nthreads: 4 speedup 2.87862)
tricount time:         0.007254 sec (dot product method)
tri+prep time:         0.011162 sec (incl time to compute L and U)
compute C time:        0.006411 sec
reduce (C) time:       0.000843 sec
rate      12.79 million edges/sec (incl time for U=triu(A))
rate      19.68 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.013350 sec
tricount time:         0.014075 sec (saxpy method)
tri+prep time:         0.016274 sec (incl time to compute L)
compute C time:        0.013350 sec
reduce (C) time:       0.000725 sec
rate       8.77 million edges/sec (incl time for L=tril(A))
rate      10.14 million edges/sec (just tricount itself)

flop count 4.36254e+06

C<L>=L*L time (saxpy):         0.011005 sec (nthreads: 2 speedup 1.21309)
tricount time:         0.011787 sec (saxpy method)
tri+prep time:         0.013986 sec (incl time to compute L)
compute C time:        0.011005 sec
reduce (C) time:       0.000782 sec
rate      10.21 million edges/sec (incl time for L=tril(A))
rate      12.11 million edges/sec (just tricount itself)

flop count 4.36254e+06

C<L>=L*L time (saxpy):         0.011015 sec (nthreads: 3 speedup 1.21199)
tricount time:         0.012917 sec (saxpy method)
tri+prep time:         0.015116 sec (incl time to compute L)
compute C time:        0.011015 sec
reduce (C) time:       0.001902 sec
rate       9.44 million edges/sec (incl time for L=tril(A))
rate      11.05 million edges/sec (just tricount itself)

flop count 4.36254e+06

C<L>=L*L time (saxpy):         0.004844 sec (nthreads: 4 speedup 2.75602)
tricount time:         0.005598 sec (saxpy method)
tri+prep time:         0.007797 sec (incl time to compute L)
compute C time:        0.004844 sec
reduce (C) time:       0.000754 sec
rate      18.31 million edges/sec (incl time for L=tril(A))
rate      25.50 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 183 by 183, 1402 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 183 ncols: 183 max # entries: 1402
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1402 
row: 0 : 104 entries [0:103]
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    column 74: bool 1
    ...
row: 1 : 76 entries [104:179]
    ...
row: 2 : 6 entries [180:185]
    ...
row: 3 : 15 entries [186:200]
    ...
row: 4 : 2 entries [201:202]
    ...
row: 5 : 3 entries [203:205]
    ...
row: 6 : 5 entries [206:210]
    ...
row: 7 : 5 entries [211:215]
    ...
row: 8 : 4 entries [216:219]
    ...
row: 9 : 4 entries [220:223]
    ...
...

total time to read A matrix:       0.001449 sec

n 183 # edges 701
U=triu(A) time:        0.000032 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000023 sec
# triangles 863

L'*U time (dot):         0.000092 sec
tricount time:         0.000108 sec (dot product method)
tri+prep time:         0.000163 sec (incl time to compute L and U)
compute C time:        0.000092 sec
reduce (C) time:       0.000016 sec
rate       4.30 million edges/sec (incl time for U=triu(A))
rate       6.49 million edges/sec (just tricount itself)

# triangles 863

L'*U time (dot):         0.000179 sec (nthreads: 2 speedup 0.513981)
tricount time:         0.000182 sec (dot product method)
tri+prep time:         0.000237 sec (incl time to compute L and U)
compute C time:        0.000179 sec
reduce (C) time:       0.000003 sec
rate       2.96 million edges/sec (incl time for U=triu(A))
rate       3.85 million edges/sec (just tricount itself)

# triangles 863

L'*U time (dot):         0.000165 sec (nthreads: 3 speedup 0.557803)
tricount time:         0.000168 sec (dot product method)
tri+prep time:         0.000223 sec (incl time to compute L and U)
compute C time:        0.000165 sec
reduce (C) time:       0.000003 sec
rate       3.14 million edges/sec (incl time for U=triu(A))
rate       4.17 million edges/sec (just tricount itself)

# triangles 863

L'*U time (dot):         0.000159 sec (nthreads: 4 speedup 0.57958)
tricount time:         0.000162 sec (dot product method)
tri+prep time:         0.000217 sec (incl time to compute L and U)
compute C time:        0.000159 sec
reduce (C) time:       0.000003 sec
rate       3.23 million edges/sec (incl time for U=triu(A))
rate       4.33 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000078 sec
tricount time:         0.000081 sec (saxpy method)
tri+prep time:         0.000104 sec (incl time to compute L)
compute C time:        0.000078 sec
reduce (C) time:       0.000003 sec
rate       6.74 million edges/sec (incl time for L=tril(A))
rate       8.65 million edges/sec (just tricount itself)

flop count 2865

C<L>=L*L time (saxpy):         0.000063 sec (nthreads: 2 speedup 1.23864)
tricount time:         0.000066 sec (saxpy method)
tri+prep time:         0.000089 sec (incl time to compute L)
compute C time:        0.000063 sec
reduce (C) time:       0.000003 sec
rate       7.88 million edges/sec (incl time for L=tril(A))
rate      10.61 million edges/sec (just tricount itself)

flop count 2865

C<L>=L*L time (saxpy):         0.000038 sec (nthreads: 3 speedup 2.0566)
tricount time:         0.000041 sec (saxpy method)
tri+prep time:         0.000064 sec (incl time to compute L)
compute C time:        0.000038 sec
reduce (C) time:       0.000003 sec
rate      10.97 million edges/sec (incl time for L=tril(A))
rate      17.09 million edges/sec (just tricount itself)

flop count 2865

C<L>=L*L time (saxpy):         0.000036 sec (nthreads: 4 speedup 2.16556)
tricount time:         0.000039 sec (saxpy method)
tri+prep time:         0.000062 sec (incl time to compute L)
compute C time:        0.000036 sec
reduce (C) time:       0.000003 sec
rate      11.31 million edges/sec (incl time for L=tril(A))
rate      17.93 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...

total time to read A matrix:       0.000759 sec

n 63 # edges 123
U=triu(A) time:        0.000018 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000005 sec
# triangles 0

L'*U time (dot):         0.000042 sec
tricount time:         0.000053 sec (dot product method)
tri+prep time:         0.000076 sec (incl time to compute L and U)
compute C time:        0.000042 sec
reduce (C) time:       0.000011 sec
rate       1.62 million edges/sec (incl time for U=triu(A))
rate       2.32 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000153 sec (nthreads: 2 speedup 0.274571)
tricount time:         0.000155 sec (dot product method)
tri+prep time:         0.000178 sec (incl time to compute L and U)
compute C time:        0.000153 sec
reduce (C) time:       0.000002 sec
rate       0.69 million edges/sec (incl time for U=triu(A))
rate       0.79 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000131 sec (nthreads: 3 speedup 0.320583)
tricount time:         0.000132 sec (dot product method)
tri+prep time:         0.000155 sec (incl time to compute L and U)
compute C time:        0.000131 sec
reduce (C) time:       0.000001 sec
rate       0.79 million edges/sec (incl time for U=triu(A))
rate       0.93 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000140 sec (nthreads: 4 speedup 0.29983)
tricount time:         0.000142 sec (dot product method)
tri+prep time:         0.000165 sec (incl time to compute L and U)
compute C time:        0.000140 sec
reduce (C) time:       0.000002 sec
rate       0.75 million edges/sec (incl time for U=triu(A))
rate       0.87 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000071 sec
tricount time:         0.000073 sec (saxpy method)
tri+prep time:         0.000078 sec (incl time to compute L)
compute C time:        0.000071 sec
reduce (C) time:       0.000002 sec
rate       1.58 million edges/sec (incl time for L=tril(A))
rate       1.69 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000074 sec (nthreads: 2 speedup 0.958199)
tricount time:         0.000075 sec (saxpy method)
tri+prep time:         0.000080 sec (incl time to compute L)
compute C time:        0.000074 sec
reduce (C) time:       0.000001 sec
rate       1.54 million edges/sec (incl time for L=tril(A))
rate       1.64 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000047 sec (nthreads: 3 speedup 1.51269)
tricount time:         0.000048 sec (saxpy method)
tri+prep time:         0.000053 sec (incl time to compute L)
compute C time:        0.000047 sec
reduce (C) time:       0.000001 sec
rate       2.32 million edges/sec (incl time for L=tril(A))
rate       2.57 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000045 sec (nthreads: 4 speedup 1.58511)
tricount time:         0.000047 sec (saxpy method)
tri+prep time:         0.000052 sec (incl time to compute L)
compute C time:        0.000045 sec
reduce (C) time:       0.000002 sec
rate       2.37 million edges/sec (incl time for L=tril(A))
rate       2.62 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...

total time to read A matrix:       0.013598 sec

n 63 # edges 123
U=triu(A) time:        0.000016 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000011 sec
# triangles 0

L'*U time (dot):         0.000042 sec
tricount time:         0.000053 sec (dot product method)
tri+prep time:         0.000080 sec (incl time to compute L and U)
compute C time:        0.000042 sec
reduce (C) time:       0.000011 sec
rate       1.54 million edges/sec (incl time for U=triu(A))
rate       2.31 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000060 sec (nthreads: 2 speedup 0.702381)
tricount time:         0.000062 sec (dot product method)
tri+prep time:         0.000089 sec (incl time to compute L and U)
compute C time:        0.000060 sec
reduce (C) time:       0.000002 sec
rate       1.38 million edges/sec (incl time for U=triu(A))
rate       1.98 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000022 sec (nthreads: 3 speedup 1.92391)
tricount time:         0.000023 sec (dot product method)
tri+prep time:         0.000050 sec (incl time to compute L and U)
compute C time:        0.000022 sec
reduce (C) time:       0.000001 sec
rate       2.47 million edges/sec (incl time for U=triu(A))
rate       5.37 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000026 sec (nthreads: 4 speedup 1.62385)
tricount time:         0.000027 sec (dot product method)
tri+prep time:         0.000054 sec (incl time to compute L and U)
compute C time:        0.000026 sec
reduce (C) time:       0.000001 sec
rate       2.28 million edges/sec (incl time for U=triu(A))
rate       4.57 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000064 sec
tricount time:         0.000065 sec (saxpy method)
tri+prep time:         0.000076 sec (incl time to compute L)
compute C time:        0.000064 sec
reduce (C) time:       0.000001 sec
rate       1.62 million edges/sec (incl time for L=tril(A))
rate       1.89 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000057 sec (nthreads: 2 speedup 1.12552)
tricount time:         0.000058 sec (saxpy method)
tri+prep time:         0.000069 sec (incl time to compute L)
compute C time:        0.000057 sec
reduce (C) time:       0.000001 sec
rate       1.79 million edges/sec (incl time for L=tril(A))
rate       2.12 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000032 sec (nthreads: 3 speedup 2.00746)
tricount time:         0.000033 sec (saxpy method)
tri+prep time:         0.000044 sec (incl time to compute L)
compute C time:        0.000032 sec
reduce (C) time:       0.000001 sec
rate       2.80 million edges/sec (incl time for L=tril(A))
rate       3.74 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000042 sec (nthreads: 4 speedup 1.52841)
tricount time:         0.000043 sec (saxpy method)
tri+prep time:         0.000054 sec (incl time to compute L)
compute C time:        0.000042 sec
reduce (C) time:       0.000001 sec
rate       2.28 million edges/sec (incl time for L=tril(A))
rate       2.87 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 78 by 78, 204 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...

total time to read A matrix:       0.000749 sec

n 78 # edges 102
U=triu(A) time:        0.000015 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000006 sec
# triangles 0

L'*U time (dot):         0.000042 sec
tricount time:         0.000052 sec (dot product method)
tri+prep time:         0.000073 sec (incl time to compute L and U)
compute C time:        0.000042 sec
reduce (C) time:       0.000010 sec
rate       1.39 million edges/sec (incl time for U=triu(A))
rate       1.96 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000146 sec (nthreads: 2 speedup 0.287582)
tricount time:         0.000147 sec (dot product method)
tri+prep time:         0.000168 sec (incl time to compute L and U)
compute C time:        0.000146 sec
reduce (C) time:       0.000001 sec
rate       0.61 million edges/sec (incl time for U=triu(A))
rate       0.69 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000142 sec (nthreads: 3 speedup 0.295798)
tricount time:         0.000144 sec (dot product method)
tri+prep time:         0.000165 sec (incl time to compute L and U)
compute C time:        0.000142 sec
reduce (C) time:       0.000002 sec
rate       0.62 million edges/sec (incl time for U=triu(A))
rate       0.71 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000130 sec (nthreads: 4 speedup 0.322936)
tricount time:         0.000131 sec (dot product method)
tri+prep time:         0.000152 sec (incl time to compute L and U)
compute C time:        0.000130 sec
reduce (C) time:       0.000001 sec
rate       0.67 million edges/sec (incl time for U=triu(A))
rate       0.78 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000069 sec
tricount time:         0.000070 sec (saxpy method)
tri+prep time:         0.000076 sec (incl time to compute L)
compute C time:        0.000069 sec
reduce (C) time:       0.000001 sec
rate       1.34 million edges/sec (incl time for L=tril(A))
rate       1.46 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000074 sec (nthreads: 2 speedup 0.932476)
tricount time:         0.000075 sec (saxpy method)
tri+prep time:         0.000081 sec (incl time to compute L)
compute C time:        0.000074 sec
reduce (C) time:       0.000001 sec
rate       1.25 million edges/sec (incl time for L=tril(A))
rate       1.36 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000048 sec (nthreads: 3 speedup 1.44279)
tricount time:         0.000049 sec (saxpy method)
tri+prep time:         0.000055 sec (incl time to compute L)
compute C time:        0.000048 sec
reduce (C) time:       0.000001 sec
rate       1.85 million edges/sec (incl time for L=tril(A))
rate       2.09 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000047 sec (nthreads: 4 speedup 1.47208)
tricount time:         0.000049 sec (saxpy method)
tri+prep time:         0.000055 sec (incl time to compute L)
compute C time:        0.000047 sec
reduce (C) time:       0.000002 sec
rate       1.84 million edges/sec (incl time for L=tril(A))
rate       2.08 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 982 by 982, 99840 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...

total time to read A matrix:       0.048328 sec

n 982 # edges 49920
U=triu(A) time:        0.000550 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000495 sec
# triangles 0

L'*U time (dot):         0.000597 sec
tricount time:         0.000609 sec (dot product method)
tri+prep time:         0.001654 sec (incl time to compute L and U)
compute C time:        0.000597 sec
reduce (C) time:       0.000012 sec
rate      30.18 million edges/sec (incl time for U=triu(A))
rate      81.98 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000356 sec (nthreads: 2 speedup 1.67604)
tricount time:         0.000357 sec (dot product method)
tri+prep time:         0.001402 sec (incl time to compute L and U)
compute C time:        0.000356 sec
reduce (C) time:       0.000001 sec
rate      35.60 million edges/sec (incl time for U=triu(A))
rate     139.77 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000354 sec (nthreads: 3 speedup 1.6862)
tricount time:         0.000356 sec (dot product method)
tri+prep time:         0.001401 sec (incl time to compute L and U)
compute C time:        0.000354 sec
reduce (C) time:       0.000002 sec
rate      35.63 million edges/sec (incl time for U=triu(A))
rate     140.24 million edges/sec (just tricount itself)

# triangles 0

L'*U time (dot):         0.000592 sec (nthreads: 4 speedup 1.00846)
tricount time:         0.000594 sec (dot product method)
tri+prep time:         0.001639 sec (incl time to compute L and U)
compute C time:        0.000592 sec
reduce (C) time:       0.000002 sec
rate      30.46 million edges/sec (incl time for U=triu(A))
rate      84.05 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000299 sec
tricount time:         0.000301 sec (saxpy method)
tri+prep time:         0.000796 sec (incl time to compute L)
compute C time:        0.000299 sec
reduce (C) time:       0.000002 sec
rate      62.73 million edges/sec (incl time for L=tril(A))
rate     165.91 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000474 sec (nthreads: 2 speedup 0.630785)
tricount time:         0.001466 sec (saxpy method)
tri+prep time:         0.001961 sec (incl time to compute L)
compute C time:        0.000474 sec
reduce (C) time:       0.000992 sec
rate      25.46 million edges/sec (incl time for L=tril(A))
rate      34.05 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000451 sec (nthreads: 3 speedup 0.662791)
tricount time:         0.000453 sec (saxpy method)
tri+prep time:         0.000948 sec (incl time to compute L)
compute C time:        0.000451 sec
reduce (C) time:       0.000002 sec
rate      52.66 million edges/sec (incl time for L=tril(A))
rate     110.20 million edges/sec (just tricount itself)

flop count 0

C<L>=L*L time (saxpy):         0.000510 sec (nthreads: 4 speedup 0.585981)
tricount time:         0.000511 sec (saxpy method)
tri+prep time:         0.001006 sec (incl time to compute L)
compute C time:        0.000510 sec
reduce (C) time:       0.000001 sec
rate      49.62 million edges/sec (incl time for L=tril(A))
rate      97.66 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 67 by 67, 574 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 67 ncols: 67 max # entries: 574
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 574 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 6 entries [56:61]
    ...
row: 8 : 7 entries [62:68]
    ...
row: 9 : 9 entries [69:77]
    ...
...

total time to read A matrix:       0.000946 sec

n 67 # edges 287
U=triu(A) time:        0.000022 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000010 sec
# triangles 120

L'*U time (dot):         0.000053 sec
tricount time:         0.000065 sec (dot product method)
tri+prep time:         0.000097 sec (incl time to compute L and U)
compute C time:        0.000053 sec
reduce (C) time:       0.000012 sec
rate       2.95 million edges/sec (incl time for U=triu(A))
rate       4.41 million edges/sec (just tricount itself)

# triangles 120

L'*U time (dot):         0.000161 sec (nthreads: 2 speedup 0.329882)
tricount time:         0.000163 sec (dot product method)
tri+prep time:         0.000195 sec (incl time to compute L and U)
compute C time:        0.000161 sec
reduce (C) time:       0.000002 sec
rate       1.47 million edges/sec (incl time for U=triu(A))
rate       1.76 million edges/sec (just tricount itself)

# triangles 120

L'*U time (dot):         0.000140 sec (nthreads: 3 speedup 0.379898)
tricount time:         0.000142 sec (dot product method)
tri+prep time:         0.000174 sec (incl time to compute L and U)
compute C time:        0.000140 sec
reduce (C) time:       0.000002 sec
rate       1.65 million edges/sec (incl time for U=triu(A))
rate       2.02 million edges/sec (just tricount itself)

# triangles 120

L'*U time (dot):         0.000141 sec (nthreads: 4 speedup 0.377327)
tricount time:         0.000142 sec (dot product method)
tri+prep time:         0.000174 sec (incl time to compute L and U)
compute C time:        0.000141 sec
reduce (C) time:       0.000001 sec
rate       1.65 million edges/sec (incl time for U=triu(A))
rate       2.02 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.000060 sec
tricount time:         0.000062 sec (saxpy method)
tri+prep time:         0.000072 sec (incl time to compute L)
compute C time:        0.000060 sec
reduce (C) time:       0.000002 sec
rate       3.99 million edges/sec (incl time for L=tril(A))
rate       4.63 million edges/sec (just tricount itself)

flop count 537

C<L>=L*L time (saxpy):         0.000048 sec (nthreads: 2 speedup 1.25373)
tricount time:         0.000050 sec (saxpy method)
tri+prep time:         0.000060 sec (incl time to compute L)
compute C time:        0.000048 sec
reduce (C) time:       0.000002 sec
rate       4.78 million edges/sec (incl time for L=tril(A))
rate       5.73 million edges/sec (just tricount itself)

flop count 537

C<L>=L*L time (saxpy):         0.000026 sec (nthreads: 3 speedup 2.31193)
tricount time:         0.000027 sec (saxpy method)
tri+prep time:         0.000037 sec (incl time to compute L)
compute C time:        0.000026 sec
reduce (C) time:       0.000001 sec
rate       7.77 million edges/sec (incl time for L=tril(A))
rate      10.65 million edges/sec (just tricount itself)

flop count 537

C<L>=L*L time (saxpy):         0.000031 sec (nthreads: 4 speedup 1.93846)
tricount time:         0.000033 sec (saxpy method)
tri+prep time:         0.000043 sec (incl time to compute L)
compute C time:        0.000031 sec
reduce (C) time:       0.000002 sec
rate       6.69 million edges/sec (incl time for L=tril(A))
rate       8.72 million edges/sec (just tricount itself)


--------------------------------------------------------------
Wathen: nx 200 ny 200 n 120801 nz 1762400 method 0, time: 0.336 sec

GraphBLAS matrix: from get_matrix: 
nrows: 120801 ncols: 120801 max # entries: 1883201
format: standard CSR vlen: 120801 nvec_nonempty: 120801 nvec: 120801 plen: 120801 vdim: 120801
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 1762400 
row: 0 : 7 entries [0:6]
    column 1: double -3.43365642660378
    column 2: double 1.14455214220126
    column 401: double -3.43365642660378
    column 402: double -4.57820856880504
    column 602: double 1.14455214220126
    column 603: double -4.57820856880504
    column 604: double 1.71682821330189
row: 1 : 7 entries [7:13]
    column 0: double -3.43365642660378
    column 2: double -3.43365642660378
    column 401: double 11.4455214220126
    column 402: double 11.4455214220126
    column 602: double -4.57820856880504
    column 603: double 9.15641713761008
    column 604: double -4.57820856880504
row: 2 : 12 entries [14:25]
    column 0: double 1.14455214220126
    column 1: double -3.43365642660378
    column 3: double -9.1794115743147
    column 4: double 3.0598038581049
    column 401: double -4.57820856880504
    column 402: double -12.6130680009185
    column 403: double -12.2392154324196
    column 602: double 1.71682821330189
    column 603: double -4.57820856880504
    column 604: double 4.20435600030616
    column 605: double -12.2392154324196
    column 606: double 4.58970578715735
row: 3 : 7 entries [26:32]
    column 2: double -9.1794115743147
    column 4: double -9.1794115743147
    column 402: double 30.598038581049
    column 403: double 30.598038581049
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 12 entries [71:82]
    ...
row: 9 : 7 entries [83:89]
    ...
...

total time to read A matrix:       0.366598 sec

n 120801 # edges 881200
U=triu(A) time:        0.025530 sec

------------------------------------- dot product method:
L=tril(A) time:        0.013113 sec
# triangles 2160400

L'*U time (dot):         0.024302 sec
tricount time:         0.026980 sec (dot product method)
tri+prep time:         0.065623 sec (incl time to compute L and U)
compute C time:        0.024302 sec
reduce (C) time:       0.002678 sec
rate      13.43 million edges/sec (incl time for U=triu(A))
rate      32.66 million edges/sec (just tricount itself)

# triangles 2160400

L'*U time (dot):         0.027242 sec (nthreads: 2 speedup 0.89208)
tricount time:         0.035533 sec (dot product method)
tri+prep time:         0.074176 sec (incl time to compute L and U)
compute C time:        0.027242 sec
reduce (C) time:       0.008291 sec
rate      11.88 million edges/sec (incl time for U=triu(A))
rate      24.80 million edges/sec (just tricount itself)

# triangles 2160400

L'*U time (dot):         0.026077 sec (nthreads: 3 speedup 0.931931)
tricount time:         0.034101 sec (dot product method)
tri+prep time:         0.072744 sec (incl time to compute L and U)
compute C time:        0.026077 sec
reduce (C) time:       0.008024 sec
rate      12.11 million edges/sec (incl time for U=triu(A))
rate      25.84 million edges/sec (just tricount itself)

# triangles 2160400

L'*U time (dot):         0.034024 sec (nthreads: 4 speedup 0.714261)
tricount time:         0.038152 sec (dot product method)
tri+prep time:         0.076795 sec (incl time to compute L and U)
compute C time:        0.034024 sec
reduce (C) time:       0.004128 sec
rate      11.47 million edges/sec (incl time for U=triu(A))
rate      23.10 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.026997 sec
tricount time:         0.032471 sec (saxpy method)
tri+prep time:         0.045584 sec (incl time to compute L)
compute C time:        0.026997 sec
reduce (C) time:       0.005474 sec
rate      19.33 million edges/sec (incl time for L=tril(A))
rate      27.14 million edges/sec (just tricount itself)

flop count 5.65982e+06

C<L>=L*L time (saxpy):         0.023458 sec (nthreads: 2 speedup 1.15087)
tricount time:         0.028384 sec (saxpy method)
tri+prep time:         0.041497 sec (incl time to compute L)
compute C time:        0.023458 sec
reduce (C) time:       0.004926 sec
rate      21.24 million edges/sec (incl time for L=tril(A))
rate      31.05 million edges/sec (just tricount itself)

flop count 5.65982e+06

C<L>=L*L time (saxpy):         0.017770 sec (nthreads: 3 speedup 1.51925)
tricount time:         0.022513 sec (saxpy method)
tri+prep time:         0.035626 sec (incl time to compute L)
compute C time:        0.017770 sec
reduce (C) time:       0.004743 sec
rate      24.73 million edges/sec (incl time for L=tril(A))
rate      39.14 million edges/sec (just tricount itself)

flop count 5.65982e+06

C<L>=L*L time (saxpy):         0.025819 sec (nthreads: 4 speedup 1.04564)
tricount time:         0.029841 sec (saxpy method)
tri+prep time:         0.042954 sec (incl time to compute L)
compute C time:        0.025819 sec
reduce (C) time:       0.004022 sec
rate      20.51 million edges/sec (incl time for L=tril(A))
rate      29.53 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 10000 by 10000, nz: 199768, method 0 time 0.043 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199768
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199768 
row: 0 : 27 entries [0:26]
    column 214: double 0.611428854126681
    column 599: double 0.759817736907767
    column 687: double 0.490404969132481
    column 1945: double 0.220198646141235
    column 2206: double 0.469879566865097
    column 3108: double 0.861235641490359
    column 3938: double 0.161881899547966
    column 4048: double 0.974307955822525
    column 4050: double 0.0806984691326516
    column 4327: double 0.845122101573719
    column 4526: double 0.917189450706256
    column 4651: double 0.953684565813323
    column 5080: double 0.524531191328185
    column 5289: double 0.373677450804412
    column 5397: double 0.147001725909933
    column 5574: double 0.741414052708653
    column 5603: double 0.0243003910252495
    column 6319: double 0.386650481372716
    column 6693: double 0.985725408162066
    column 7242: double 0.387267836971157
    column 7597: double 0.148198968114398
    column 7855: double 0.161521142087958
    column 8149: double 0.80591885984148
    column 8307: double 0.583442051968559
    column 8807: double 0.201124811360069
    column 9224: double 0.246570360972623
    column 9320: double 0.810676243146442
row: 1 : 18 entries [27:44]
    column 222: double 0.199748643507498
    column 1002: double 0.723475211370372
    column 1776: double 0.424430120199892
    ...
row: 2 : 18 entries [45:62]
    ...
row: 3 : 20 entries [63:82]
    ...
row: 4 : 27 entries [83:109]
    ...
row: 5 : 23 entries [110:132]
    ...
row: 6 : 23 entries [133:155]
    ...
row: 7 : 18 entries [156:173]
    ...
row: 8 : 22 entries [174:195]
    ...
row: 9 : 17 entries [196:212]
    ...
...

total time to read A matrix:       0.046452 sec

n 10000 # edges 99884
U=triu(A) time:        0.001806 sec

------------------------------------- dot product method:
L=tril(A) time:        0.001826 sec
# triangles 1357

L'*U time (dot):         0.018346 sec
tricount time:         0.018379 sec (dot product method)
tri+prep time:         0.022011 sec (incl time to compute L and U)
compute C time:        0.018346 sec
reduce (C) time:       0.000033 sec
rate       4.54 million edges/sec (incl time for U=triu(A))
rate       5.43 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.006956 sec (nthreads: 2 speedup 2.63741)
tricount time:         0.006966 sec (dot product method)
tri+prep time:         0.010598 sec (incl time to compute L and U)
compute C time:        0.006956 sec
reduce (C) time:       0.000010 sec
rate       9.42 million edges/sec (incl time for U=triu(A))
rate      14.34 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.004725 sec (nthreads: 3 speedup 3.88278)
tricount time:         0.004734 sec (dot product method)
tri+prep time:         0.008366 sec (incl time to compute L and U)
compute C time:        0.004725 sec
reduce (C) time:       0.000009 sec
rate      11.94 million edges/sec (incl time for U=triu(A))
rate      21.10 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.003637 sec (nthreads: 4 speedup 5.04418)
tricount time:         0.003646 sec (dot product method)
tri+prep time:         0.007278 sec (incl time to compute L and U)
compute C time:        0.003637 sec
reduce (C) time:       0.000009 sec
rate      13.72 million edges/sec (incl time for U=triu(A))
rate      27.40 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.003812 sec
tricount time:         0.003824 sec (saxpy method)
tri+prep time:         0.005650 sec (incl time to compute L)
compute C time:        0.003812 sec
reduce (C) time:       0.000012 sec
rate      17.68 million edges/sec (incl time for L=tril(A))
rate      26.12 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.003070 sec (nthreads: 2 speedup 1.24177)
tricount time:         0.003078 sec (saxpy method)
tri+prep time:         0.004904 sec (incl time to compute L)
compute C time:        0.003070 sec
reduce (C) time:       0.000008 sec
rate      20.37 million edges/sec (incl time for L=tril(A))
rate      32.45 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.002338 sec (nthreads: 3 speedup 1.63037)
tricount time:         0.002346 sec (saxpy method)
tri+prep time:         0.004172 sec (incl time to compute L)
compute C time:        0.002338 sec
reduce (C) time:       0.000008 sec
rate      23.94 million edges/sec (incl time for L=tril(A))
rate      42.58 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.003483 sec (nthreads: 4 speedup 1.09454)
tricount time:         0.003492 sec (saxpy method)
tri+prep time:         0.005318 sec (incl time to compute L)
compute C time:        0.003483 sec
reduce (C) time:       0.000009 sec
rate      18.78 million edges/sec (incl time for L=tril(A))
rate      28.60 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 10000 by 10000, nz: 199768, method 1 time 0.034 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199768
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199768 
row: 0 : 27 entries [0:26]
    column 214: double 0.611428854126681
    column 599: double 0.759817736907767
    column 687: double 0.490404969132481
    column 1945: double 0.220198646141235
    column 2206: double 0.469879566865097
    column 3108: double 0.861235641490359
    column 3938: double 0.161881899547966
    column 4048: double 0.974307955822525
    column 4050: double 0.0806984691326516
    column 4327: double 0.845122101573719
    column 4526: double 0.917189450706256
    column 4651: double 0.953684565813323
    column 5080: double 0.524531191328185
    column 5289: double 0.373677450804412
    column 5397: double 0.147001725909933
    column 5574: double 0.741414052708653
    column 5603: double 0.0243003910252495
    column 6319: double 0.386650481372716
    column 6693: double 0.985725408162066
    column 7242: double 0.387267836971157
    column 7597: double 0.148198968114398
    column 7855: double 0.161521142087958
    column 8149: double 0.80591885984148
    column 8307: double 0.583442051968559
    column 8807: double 0.201124811360069
    column 9224: double 0.246570360972623
    column 9320: double 0.810676243146442
row: 1 : 18 entries [27:44]
    column 222: double 0.199748643507498
    column 1002: double 0.723475211370372
    column 1776: double 0.424430120199892
    ...
row: 2 : 18 entries [45:62]
    ...
row: 3 : 20 entries [63:82]
    ...
row: 4 : 27 entries [83:109]
    ...
row: 5 : 23 entries [110:132]
    ...
row: 6 : 23 entries [133:155]
    ...
row: 7 : 18 entries [156:173]
    ...
row: 8 : 22 entries [174:195]
    ...
row: 9 : 17 entries [196:212]
    ...
...

total time to read A matrix:       0.037626 sec

n 10000 # edges 99884
U=triu(A) time:        0.001491 sec

------------------------------------- dot product method:
L=tril(A) time:        0.001247 sec
# triangles 1357

L'*U time (dot):         0.015785 sec
tricount time:         0.015822 sec (dot product method)
tri+prep time:         0.018560 sec (incl time to compute L and U)
compute C time:        0.015785 sec
reduce (C) time:       0.000037 sec
rate       5.38 million edges/sec (incl time for U=triu(A))
rate       6.31 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.009020 sec (nthreads: 2 speedup 1.75003)
tricount time:         0.009030 sec (dot product method)
tri+prep time:         0.011768 sec (incl time to compute L and U)
compute C time:        0.009020 sec
reduce (C) time:       0.000010 sec
rate       8.49 million edges/sec (incl time for U=triu(A))
rate      11.06 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.004936 sec (nthreads: 3 speedup 3.19794)
tricount time:         0.004946 sec (dot product method)
tri+prep time:         0.007684 sec (incl time to compute L and U)
compute C time:        0.004936 sec
reduce (C) time:       0.000010 sec
rate      13.00 million edges/sec (incl time for U=triu(A))
rate      20.19 million edges/sec (just tricount itself)

# triangles 1357

L'*U time (dot):         0.003792 sec (nthreads: 4 speedup 4.16265)
tricount time:         0.003801 sec (dot product method)
tri+prep time:         0.006539 sec (incl time to compute L and U)
compute C time:        0.003792 sec
reduce (C) time:       0.000009 sec
rate      15.27 million edges/sec (incl time for U=triu(A))
rate      26.28 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         0.003903 sec
tricount time:         0.003915 sec (saxpy method)
tri+prep time:         0.005162 sec (incl time to compute L)
compute C time:        0.003903 sec
reduce (C) time:       0.000012 sec
rate      19.35 million edges/sec (incl time for L=tril(A))
rate      25.51 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.002942 sec (nthreads: 2 speedup 1.32677)
tricount time:         0.002950 sec (saxpy method)
tri+prep time:         0.004197 sec (incl time to compute L)
compute C time:        0.002942 sec
reduce (C) time:       0.000008 sec
rate      23.80 million edges/sec (incl time for L=tril(A))
rate      33.86 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.002408 sec (nthreads: 3 speedup 1.62105)
tricount time:         0.002416 sec (saxpy method)
tri+prep time:         0.003663 sec (incl time to compute L)
compute C time:        0.002408 sec
reduce (C) time:       0.000008 sec
rate      27.27 million edges/sec (incl time for L=tril(A))
rate      41.34 million edges/sec (just tricount itself)

flop count 646608

C<L>=L*L time (saxpy):         0.001953 sec (nthreads: 4 speedup 1.99841)
tricount time:         0.001961 sec (saxpy method)
tri+prep time:         0.003208 sec (incl time to compute L)
compute C time:        0.001953 sec
reduce (C) time:       0.000008 sec
rate      31.14 million edges/sec (incl time for L=tril(A))
rate      50.94 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 100000 by 100000, nz: 19980330, method 0 time 5.595 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980330
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980330 
row: 0 : 189 entries [0:188]
    column 68: double 0.661716873588655
    column 778: double 0.346667912736641
    column 1801: double 0.371952817962016
    column 1839: double 0.197836379076741
    column 3356: double 0.878444087311034
    column 3756: double 0.217022247656947
    column 4441: double 0.2577766982832
    column 4808: double 0.392707915752597
    column 4922: double 0.0962031972027673
    column 5075: double 0.691830102660204
    column 6296: double 0.917483099015425
    column 7151: double 0.193326447087741
    column 7221: double 0.230494023532692
    column 8657: double 0.934093089488637
    column 9473: double 0.795621154107574
    column 9524: double 0.0817629687243753
    column 9648: double 0.357546753659551
    column 11313: double 0.0928425661313169
    column 11744: double 0.444733012853217
    column 12263: double 0.615758200269077
    column 12332: double 0.251131194044459
    column 13111: double 0.219714040656976
    column 13699: double 0.761268198442996
    column 14471: double 0.123158921695327
    column 14892: double 0.85213404597076
    column 15591: double 0.442234173393239
    column 16106: double 0.422217457293673
    column 16346: double 0.705855402008225
    column 16403: double 0.434678226736306
    column 16612: double 0.994128715640082
    ...
row: 1 : 163 entries [189:351]
    ...
row: 2 : 201 entries [352:552]
    ...
row: 3 : 205 entries [553:757]
    ...
row: 4 : 214 entries [758:971]
    ...
row: 5 : 193 entries [972:1164]
    ...
row: 6 : 215 entries [1165:1379]
    ...
row: 7 : 195 entries [1380:1574]
    ...
row: 8 : 210 entries [1575:1784]
    ...
row: 9 : 205 entries [1785:1989]
    ...
...

total time to read A matrix:       5.855907 sec

n 100000 # edges 9990165
U=triu(A) time:        0.138429 sec

------------------------------------- dot product method:
L=tril(A) time:        0.116079 sec
# triangles 1330131

L'*U time (dot):         8.634266 sec
tricount time:         8.639341 sec (dot product method)
tri+prep time:         8.893849 sec (incl time to compute L and U)
compute C time:        8.634266 sec
reduce (C) time:       0.005075 sec
rate       1.12 million edges/sec (incl time for U=triu(A))
rate       1.16 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         5.153198 sec (nthreads: 2 speedup 1.67552)
tricount time:         5.160551 sec (dot product method)
tri+prep time:         5.415059 sec (incl time to compute L and U)
compute C time:        5.153198 sec
reduce (C) time:       0.007353 sec
rate       1.84 million edges/sec (incl time for U=triu(A))
rate       1.94 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         3.764403 sec (nthreads: 3 speedup 2.29366)
tricount time:         3.778466 sec (dot product method)
tri+prep time:         4.032974 sec (incl time to compute L and U)
compute C time:        3.764403 sec
reduce (C) time:       0.014063 sec
rate       2.48 million edges/sec (incl time for U=triu(A))
rate       2.64 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         3.101774 sec (nthreads: 4 speedup 2.78365)
tricount time:         3.109050 sec (dot product method)
tri+prep time:         3.363558 sec (incl time to compute L and U)
compute C time:        3.101774 sec
reduce (C) time:       0.007276 sec
rate       2.97 million edges/sec (incl time for U=triu(A))
rate       3.21 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         2.920323 sec
tricount time:         2.928491 sec (saxpy method)
tri+prep time:         3.044570 sec (incl time to compute L)
compute C time:        2.920323 sec
reduce (C) time:       0.008168 sec
rate       3.28 million edges/sec (incl time for L=tril(A))
rate       3.41 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         1.727947 sec (nthreads: 2 speedup 1.69005)
tricount time:         1.733386 sec (saxpy method)
tri+prep time:         1.849465 sec (incl time to compute L)
compute C time:        1.727947 sec
reduce (C) time:       0.005439 sec
rate       5.40 million edges/sec (incl time for L=tril(A))
rate       5.76 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         1.573482 sec (nthreads: 3 speedup 1.85596)
tricount time:         1.578616 sec (saxpy method)
tri+prep time:         1.694695 sec (incl time to compute L)
compute C time:        1.573482 sec
reduce (C) time:       0.005134 sec
rate       5.89 million edges/sec (incl time for L=tril(A))
rate       6.33 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         1.423205 sec (nthreads: 4 speedup 2.05193)
tricount time:         1.429584 sec (saxpy method)
tri+prep time:         1.545663 sec (incl time to compute L)
compute C time:        1.423205 sec
reduce (C) time:       0.006379 sec
rate       6.46 million edges/sec (incl time for L=tril(A))
rate       6.99 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 100000 by 100000, nz: 19980330, method 1 time 5.800 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980330
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980330 
row: 0 : 189 entries [0:188]
    column 68: double 0.661716873588655
    column 778: double 0.346667912736641
    column 1801: double 0.371952817962016
    column 1839: double 0.197836379076741
    column 3356: double 0.878444087311034
    column 3756: double 0.217022247656947
    column 4441: double 0.2577766982832
    column 4808: double 0.392707915752597
    column 4922: double 0.0962031972027673
    column 5075: double 0.691830102660204
    column 6296: double 0.917483099015425
    column 7151: double 0.193326447087741
    column 7221: double 0.230494023532692
    column 8657: double 0.934093089488637
    column 9473: double 0.795621154107574
    column 9524: double 0.0817629687243753
    column 9648: double 0.357546753659551
    column 11313: double 0.0928425661313169
    column 11744: double 0.444733012853217
    column 12263: double 0.615758200269077
    column 12332: double 0.251131194044459
    column 13111: double 0.219714040656976
    column 13699: double 0.761268198442996
    column 14471: double 0.123158921695327
    column 14892: double 0.85213404597076
    column 15591: double 0.442234173393239
    column 16106: double 0.422217457293673
    column 16346: double 0.705855402008225
    column 16403: double 0.434678226736306
    column 16612: double 0.994128715640082
    ...
row: 1 : 163 entries [189:351]
    ...
row: 2 : 201 entries [352:552]
    ...
row: 3 : 205 entries [553:757]
    ...
row: 4 : 214 entries [758:971]
    ...
row: 5 : 193 entries [972:1164]
    ...
row: 6 : 215 entries [1165:1379]
    ...
row: 7 : 195 entries [1380:1574]
    ...
row: 8 : 210 entries [1575:1784]
    ...
row: 9 : 205 entries [1785:1989]
    ...
...

total time to read A matrix:       6.064195 sec

n 100000 # edges 9990165
U=triu(A) time:        0.134366 sec

------------------------------------- dot product method:
L=tril(A) time:        0.112891 sec
# triangles 1330131

L'*U time (dot):        10.309915 sec
tricount time:        10.316139 sec (dot product method)
tri+prep time:        10.563396 sec (incl time to compute L and U)
compute C time:       10.309915 sec
reduce (C) time:       0.006224 sec
rate       0.95 million edges/sec (incl time for U=triu(A))
rate       0.97 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         6.277519 sec (nthreads: 2 speedup 1.64236)
tricount time:         6.286254 sec (dot product method)
tri+prep time:         6.533511 sec (incl time to compute L and U)
compute C time:        6.277519 sec
reduce (C) time:       0.008735 sec
rate       1.53 million edges/sec (incl time for U=triu(A))
rate       1.59 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         4.382288 sec (nthreads: 3 speedup 2.35263)
tricount time:         4.390509 sec (dot product method)
tri+prep time:         4.637766 sec (incl time to compute L and U)
compute C time:        4.382288 sec
reduce (C) time:       0.008221 sec
rate       2.15 million edges/sec (incl time for U=triu(A))
rate       2.28 million edges/sec (just tricount itself)

# triangles 1330131

L'*U time (dot):         3.983030 sec (nthreads: 4 speedup 2.58846)
tricount time:         3.991933 sec (dot product method)
tri+prep time:         4.239190 sec (incl time to compute L and U)
compute C time:        3.983030 sec
reduce (C) time:       0.008903 sec
rate       2.36 million edges/sec (incl time for U=triu(A))
rate       2.50 million edges/sec (just tricount itself)


----------------------------------- saxpy method:

C<L>=L*L time (saxpy):         3.441557 sec
tricount time:         3.450564 sec (saxpy method)
tri+prep time:         3.563455 sec (incl time to compute L)
compute C time:        3.441557 sec
reduce (C) time:       0.009007 sec
rate       2.80 million edges/sec (incl time for L=tril(A))
rate       2.90 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         2.066466 sec (nthreads: 2 speedup 1.66543)
tricount time:         2.075554 sec (saxpy method)
tri+prep time:         2.188445 sec (incl time to compute L)
compute C time:        2.066466 sec
reduce (C) time:       0.009088 sec
rate       4.56 million edges/sec (incl time for L=tril(A))
rate       4.81 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         1.791826 sec (nthreads: 3 speedup 1.9207)
tricount time:         1.798483 sec (saxpy method)
tri+prep time:         1.911374 sec (incl time to compute L)
compute C time:        1.791826 sec
reduce (C) time:       0.006657 sec
rate       5.23 million edges/sec (incl time for L=tril(A))
rate       5.55 million edges/sec (just tricount itself)

flop count 6.65272e+08

C<L>=L*L time (saxpy):         1.811392 sec (nthreads: 4 speedup 1.89995)
tricount time:         1.822967 sec (saxpy method)
tri+prep time:         1.935858 sec (incl time to compute L)
compute C time:        1.811392 sec
reduce (C) time:       0.011575 sec
rate       5.16 million edges/sec (incl time for L=tril(A))
rate       5.48 million edges/sec (just tricount itself)


