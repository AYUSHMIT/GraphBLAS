define(`GB_ctype_bits', `0xffffL')
define(`GB_atomic_compare_exchange', `GB_ATOMIC_COMPARE_EXCHANGE_16')
define(`GB_Adot2B', `GB_Adot2B__plus_plus_uint16')
define(`GB_Adot3B', `GB_Adot3B__plus_plus_uint16')
define(`GB_Adot4B', `GB_Adot4B__plus_plus_uint16')
define(`GB_Asaxpy3B', `GB_Asaxpy3B__plus_plus_uint16')
define(`GB_ctype', `uint16_t')
define(`GB_atype', `uint16_t')
define(`GB_btype', `uint16_t')
define(`GB_ctype_ignore_overflow', `0')
define(`GB_ctype_cast', `((GB_ctype) $1)')
define(`GB_identity', `0')
define(`GB_is_any_pair_semiring', `0')
define(`GB_is_plus_pair_real_semiring', `0')
define(`GB_is_pair_multiplier', `0')
define(`GB_is_eq_monoid', `0')
define(`GB_is_performance_critical_semiring', `0')
define(`GB_is_any_monoid', `0')
define(`GB_terminal', `;')
define(`GB_dot_simd_vectorize', `GB_PRAGMA_SIMD_REDUCTION (+,$1)')
define(`GB_has_atomic', `1')
define(`GB_is_firsti_multiplier', `0')
define(`GB_is_firstj_multiplier', `0')
define(`GB_is_secondj_multiplier', `0')
define(`GB_is_plus_fc32_monoid', `0')
define(`GB_is_plus_fc64_monoid', `0')
define(`GB_is_any_fc32_monoid', `0')
define(`GB_is_any_fc64_monoid', `0')
define(`GB_is_imin_monoid', `0')
define(`GB_is_fmin_monoid', `0')
define(`GB_is_imax_monoid', `0')
define(`GB_is_fmax_monoid', `0')
define(`GB_has_omp_atomic', `1')
define(`GB_microsoft_has_omp_atomic', `1')
define(`GB_a_is_pattern', `0')
define(`GB_geta', `uint16_t $1 = $2 [$3]')
define(`GB_b_is_pattern', `0')
define(`GB_getb', `uint16_t $1 = $2 [$3]')
define(`GB_loadb', `$1 [$2] = $3 [$4]')
define(`GB_multiply', `$1 = (`$2' + `$3')')
define(`GB_add_update', ``$1' += `$2'')
define(`GB_add_function', ``$1' + `$2'')
define(`GB_multiply_add', `uint16_t x_op_y = (`$2' + `$3') ; `$1' += x_op_y')
define(`GB_has_identity_byte', `1')
define(`GB_identity_byte', `0')
define(`GB_has_bitmap_multadd', `1')
define(`GB_bitmap_multadd', `$2 += (uint16_t) (((uint16_t) (($4 + $5))) * X [$3]) ; $1 |= $3')
define(`GB_xload', `;')
define(`GB_xinit', `uint16_t X [2] = {0,1}')
define(`GB_disable', `(GxB_NO_PLUS || GxB_NO_UINT16 || GxB_NO_PLUS_UINT16 || GxB_NO_PLUS_PLUS_UINT16)')
