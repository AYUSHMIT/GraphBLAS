Script started on 2023-04-26 22:54:39-0500
 
:: WARNING: setvars.sh has already been run. Skipping re-execution.
   To force a re-execution of setvars.sh, use the '--force' option.
   Using '--force' can result in excessive use of your environment variables.
  
usage: source setvars.sh [--force] [--config=file] [--help] [...]
  --force        Force setvars.sh to re-run, doing so may overload environment.
  --config=file  Customize env vars using a setvars.sh configuration file.
  --help         Display this help message and exit.
  ...            Additional args are passed to individual env/vars.sh scripts
                 and should follow this script's arguments.
  
  Some POSIX shells do not accept command-line options. In that case, you can pass
  command-line options via the SETVARS_ARGS environment variable. For example:
  
  $ SETVARS_ARGS="ia32 --config=config.txt" ; export SETVARS_ARGS
  $ . path/to/setvars.sh
  
  The SETVARS_ARGS environment variable is cleared on exiting setvars.sh.
  
gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.9.7 :: Intel Corporation
 cmake version 3.24.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[0;36mslash $[0m mat
[?1h=
                            < M A T L A B (R) >
                  Copyright 1984-2022 The MathWorks, Inc.
                  R2022a (9.12.0.1884302) 64-bit (glnxa64)
                             February 16, 2022

 
To get started, type doc.
For product information, visit www.mathworks.com.
 

	Sponsored Third Party Support License -- for use only to support products interfaced to
	MathWorks software under terms specified in your company's restricted use license agreement.

ans =
    '/home/davis/master/GraphBLAS/GraphBLAS/@GrB/private'
>> cd ../../../Te  Test/    c  Tcov/
>> test    debug_on ; testall ;
usage:
[nthreads format hyper_switch name version date about license compiledate compiletime api api_about chunk bitmap_switch] = GB_mex_init
bitmap_switch [0] = 0.04 for vectors and matrices with 1 row or column
bitmap_switch [1] = 0.05 for matrices with min dimension 2 to 2
bitmap_switch [2] = 0.06 for matrices with min dimension 3 to 4
bitmap_switch [3] = 0.08 for matrices with min dimension 5 to 8
bitmap_switch [4] = 0.1 for matrices with min dimension 9 to 16
bitmap_switch [5] = 0.2 for matrices with min dimension 17 to 32
bitmap_switch [6] = 0.3 for matrices with min dimension 33 to 64
bitmap_switch [7] = 0.4 for matrices with min dimension > 64
jit: -1
jit: -1

======== test: test247     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
err: 0

test247: all tests passed
26-Apr 22:56:13 test247         0.2 sec   224: 21362 of 21586   1.0%  1092.27/s [malloc] [cover]
jit: 5

======== test: test247     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) 
   4.1e-05 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) 
   1.31e-05 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) 
   1.69e-05 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 
   0.00127 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 
   0.00119 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 (nthreads 16 fine hash: 64) 
   0.00236 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 (nthreads 16 fine hash: 64) 
   0.0018 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 (nthreads 16 fine hash: 64) (sparse saxpy) 
   0.00481 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 (nthreads 16 fine hash: 64) (sparse saxpy) 
   0.00296 sec ]
 [ GrB_mxm C=A*B, saxpy (S = S*S, anz: 3285 bnz: 9952) axbwork 10020 (nthreads 16 fine hash: 64) (sparse saxpy) 
   0.0013 sec ]
 [ GrB_Matrix_wait (wait:matrix 0 zombies, 0 pending, jumbled) 
   1.5e-05 sec ]
 [ GxB_set 
   9.54e-07 sec ]
err: 0

test247: all tests passed
26-Apr 22:56:13 test247         0.0 sec     2: 21360 of 21586   1.0%    69.47/s [malloc] [cover]
jit: -1

======== test: test246     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
..............................................................................................................................................................................................................................................................................
test246: all tests passed
26-Apr 22:56:22 test246         8.9 sec   157: 21203 of 21586   1.8%    17.62/s [malloc] [cover]
jit: 5

======== test: test246     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
..............................................................................................................................................................................................................................................................................
test246: all tests passed
26-Apr 22:56:31 test246         9.3 sec      : 21203 of 21586   1.8% [malloc] [cover]
jit: -1

======== test: test01      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A before set, no entries, memory: 240 bytes


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after set, no entries, memory: 4.3 KB
  iso value:   314159
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after remove, 1 entry, memory: 256 bytes
  iso value:   314159
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after set again, no entries, memory: 5.4 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0   99099
  pending operator: implicit 2nd


  10x1 GraphBLAS int32_t vector, sparse by col
  victor before set, no entries, memory: 232 bytes


  10x1 GraphBLAS int32_t vector, sparse by col
  victor after set, no entries, memory: 2.3 KB
  iso value:   44
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd


  10x1 GraphBLAS int32_t vector, sparse by col
  victor remove set, 1 entry, memory: 248 bytes
  iso value:   44
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  10x1 GraphBLAS int32_t vector, sparse by col
  victor after set again, no entries, memory: 3.3 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0   88
  pending operator: implicit 2nd


  1x1 GraphBLAS int32_t scalar, sparse by col
  scalar before set, no entries, memory: 232 bytes


  1x1 GraphBLAS int32_t scalar, full by col
  scalar after set, 1 entry, memory: 224 bytes
  iso value:   404

    (0,0)   404

  1x1 GraphBLAS int32_t scalar, full by col
  scalar after extract, 1 entry, memory: 224 bytes
  iso value:   404

    (0,0)   404

  1x1 GraphBLAS int32_t scalar, bitmap by col
  scalar after remove, no entries, memory: 232 bytes
  iso value:   404


  1x1 GraphBLAS int32_t scalar, bitmap by col
  scalar after wait, 1 entry, memory: 232 bytes

    (0,0)   707


  1x1 GraphBLAS int32_t scalar, sparse by col
  sparsity control: sparse only
  scalar with zombie, 1 entry, memory: 248 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  1x1 GraphBLAS int32_t scalar, sparse by col
  sparsity control: sparse only
  scalar after extract, no entries, memory: 248 bytes

expected error: 
Slice:  0 0 0 0 0 0 0 0 0 0 10

  10x10 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  valid matrix, 100 entries, memory: 1.1 KB
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3
    (5,0)   3
    (6,0)   3
    (7,0)   3
    (8,0)   3
    (9,0)   3
    (0,1)   3
    (1,1)   3
    (2,1)   3
    (3,1)   3
    (4,1)   3
    (5,1)   3
    (6,1)   3
    (7,1)   3
    (8,1)   3
    (9,1)   3
    (0,2)   3
    (1,2)   3
    (2,2)   3
    (3,2)   3
    (4,2)   3
    (5,2)   3
    (6,2)   3
    (7,2)   3
    (8,2)   3
    ...

  10x10 GraphBLAS int32_t matrix invalid structure

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  sparsity control: 999 invalid

  10x10 GraphBLAS int32_t matrix, full (jumbled) by col
  full matrix cannot be jumbled, 100 entries, memory: 224 bytes
  iso value:   3
  full matrix cannot be jumbled

  10x10 GraphBLAS int32_t matrix, full by col
  invalid full matrix structure

  10x10 GraphBLAS int32_t matrix, full by col
  full matrix cannot have zombies, 100 entries, memory: 224 bytes
  iso value:   3
  pending tuples: 0 max pending: 0 zombies: 1
  full matrix cannot have zombies

  10x10 GraphBLAS int32_t matrix, full by col
  full matrix cannot have pending tuples, 100 entries, memory: 5.3 KB
  iso value:   3
  pending tuples: 0 max pending: 256 zombies: 0
  full matrix cannot have pending tuples

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap matrix structure

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap, no entries, memory: 716 bytes
  invalid bitmap count: 1 exist but A->nvals = 0

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  valid matrix, 1 entry, memory: 324 bytes
  iso value:   12345

    (0,0)   12345

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap, 1 entry, memory: 324 bytes
  iso value:   12345

    invalid bitmap 3

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  invalid nvec_nonempty, no entries, memory: 240 bytes
  invalid count of non-empty vectors

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  valid matrix with 1 pending, no entries, memory: 4.3 KB
  iso value:   12345
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  invalid pending type, no entries, memory: 4.3 KB
  iso value:   12345
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
  matrix has an invalid Pending->type
 [ GrB_extract (C dense) 
   5.41e-05 sec ]

  10x0 GraphBLAS int32_t matrix, full by col
  C = A (:,1:0:1), no entries, memory: 224 bytes

 [ GrB_extract (C dense) 
   1.38e-05 sec ]

  0x10 GraphBLAS int32_t matrix, full by col
  C = A (1:0:1,:), no entries, memory: 224 bytes

expected error: GraphBLAS error: GrB_EMPTY_OBJECT
function: GrB_Matrix_apply_BinaryOp2nd_Scalar (C, M, accum, op, A, y, desc)
Scalar must contain an entry

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = replace    (invalid value for this field)
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     
    Descriptor field set to an invalid value

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  empty, no entries, memory: 248 bytes

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_INT32 (C, I, J, X, nvals, dup)
Positional op z=firsti(x,y) not supported as dup op

vector bitmap switch: 0.04

error expected: GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=firsti(x,y) has no equivalent monoid


  3x3 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  wild matrix, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  3x3 GraphBLAS wild matrix, sparse (jumbled) by col
  sparsity control: sparse only
  wild matrix jumbled, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (1,0) [user-defined value]
    (0,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  3x3 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  wild matrix unjumbled, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  1152921504606846976x1152921504606846976 GraphBLAS float matrix, hypersparse by col
  huge matrix, 1 entry, memory: 528 bytes
  iso value:    3

    (0,0)    3

 ======================== split/concat tests:  [ GxB_set 
   0 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 21: (C full) = scalar (full to sparse) (sparse to hyper) 
   2.79e-05 sec ]
 [ GxB_Matrix_split (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   6.41e-05 sec ]

  5x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [0], 60 entries, memory: 960 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [1], 40 entries, memory: 736 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [2], 180 entries, memory: 1.9 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [3], 120 entries, memory: 1.3 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set 
   9.54e-07 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) (bitmap to sparse) (sparse to hyper) 
   5.6e-05 sec ]
 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set 
   0 sec ]
 [ GxB_Matrix_split (iso wait:A 0 zombies, 20 pending) (iso build) (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   7.2e-05 sec ]

  5x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [0], 5 entries, memory: 408 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [1], no entries, memory: 312 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [2], 7 entries, memory: 456 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [3], 8 entries, memory: 480 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set 
   0 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (sparse to hyper) 
   2.91e-05 sec ]
 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (hyper to sparse) 
   5.96e-06 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 21: (C full) = scalar (full to sparse) 
   1.91e-05 sec ]
 [ GxB_Matrix_split (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   5.41e-05 sec ]

  5x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [0], 60 entries, memory: 864 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [1], 40 entries, memory: 672 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [2], 180 entries, memory: 1.8 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [3], 120 entries, memory: 1.3 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (hyper to sparse) 
   5.96e-06 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) (bitmap to sparse) 
   2.79e-05 sec ]
 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (hyper to sparse) 
   5.96e-06 sec ]
 [ GxB_Matrix_split (iso wait:A 0 zombies, 20 pending) (iso build) (hyper to sparse) (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   6.1e-05 sec ]

  5x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [0], 5 entries, memory: 424 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [1], no entries, memory: 360 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [2], 7 entries, memory: 440 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [3], 8 entries, memory: 416 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (hyper to sparse) 
   5.96e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) 
   2e-05 sec ]
 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   2e-05 sec ]
 [ GrB_assign (C iso assign) Method:bit6:whole C = scalar (full to bitmap) 
   2.41e-05 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   2.19e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [0], 60 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [1], 40 entries, memory: 320 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [2], 180 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [3], 120 entries, memory: 400 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   6.91e-06 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) 
   5.7e-05 sec ]
 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   6.91e-06 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   1.69e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [0], 5 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [1], no entries, memory: 320 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [2], 7 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [3], 8 entries, memory: 400 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   5.96e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (bitmap to sparse) (bitmap to sparse) (bitmap to sparse) (sparse to bitmap) 
   5.79e-05 sec ]
 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   7.15e-06 sec ]
 [ GrB_assign (C iso assign) Method:bit6:whole C = scalar 
   8.82e-06 sec ]
 [ GxB_Matrix_split (iso split) (full split) 
   7.87e-06 sec ]

  5x12 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [0], 60 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    ...

  5x8 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [1], 40 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    ...

  15x12 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [2], 180 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    ...

  15x8 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [3], 120 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    ...
 [ GxB_set (jit: undefined) 
   8.11e-06 sec ]
 [ GxB_Matrix_concat (iso full concat) 
   5.96e-06 sec ]
 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   9.54e-07 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   5.96e-06 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   2.29e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [0], 5 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [1], no entries, memory: 320 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [2], 7 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [3], 8 entries, memory: 400 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   8.11e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (bitmap to sparse) (bitmap to sparse) (bitmap to sparse) (sparse to bitmap) 
   6.01e-05 sec ]
 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]


testing C<C,struct> = scalar for user-defined type:
 [ GrB_Matrix_wait (iso wait:matrix 0 zombies, 20 pending) (iso build) (hyper to sparse) 
   2.91e-05 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 05f: C<C,struct> = scalar 
   1.5e-05 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input matrix is 10-by-20 but must be 10-by-10

expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input matrix is 5-by-5 but must be 10-by-10

expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Vector_diag (v, A, k, desc)
Input vector must have size 5

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input vector of type [float] cannot be typecast to output of type [wild]

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Vector_diag (v, A, k, desc)
Input matrix of type [wild] cannot be typecast to output of type [float]


All errors printed above were expected.
GB_mex_about2: all tests passed

in /home/davis/master/GraphBLAS/Test/GB_mex_about.c
expected error: [-3]
in /home/davis/master/GraphBLAS/Test/GB_mex_about.c:
sizeof (struct GB_Type_opaque) 184
sizeof (struct GB_UnaryOp_opaque) 224
sizeof (struct GB_BinaryOp_opaque) 224
sizeof (struct GB_SelectOp_opaque) 224
sizeof (struct GB_Monoid_opaque) 64
sizeof (struct GB_Semiring_opaque) 64
sizeof (struct GB_Vector_opaque) 216
sizeof (struct GB_Matrix_opaque) 216
sizeof (struct GB_Descriptor_opaque) 64
1 1
1 1
1 1
2 2
2 2
4 4
4 4
8 8
8 8
4 4
8 8
info is -3

    GraphBLAS UnaryOp: LNOT (built-in): z=not(x)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1

    GraphBLAS UnaryOp: LNOT_FP32 (built-in): z=not(x)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4

    GraphBLAS BinaryOp: ISEQ_INT32 (built-in): z=iseq(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS BinaryOp: EQ_INT32 (built-in): z=eq(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS Monoid: plus uint16 monoid (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2
    identity: [   0 ] 
id is 0

    GraphBLAS BinaryOp: plus op from monoid (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS Monoid: mangled monoid, no identity (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2
    Identity value is missing

    GraphBLAS Monoid: max int16 monoid (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]
id1 is -32768

    GraphBLAS BinaryOp: plus op from monoid (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS Semiring: 
new sem (user-defined): (max,times)
    GraphBLAS Monoid: semiring->add (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]

    GraphBLAS BinaryOp: semiring->multiply (built-in): z=times(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS Monoid: sem mm (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]

    GraphBLAS BinaryOp: sem mult (built-in): z=times(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    GraphBLAS type: matrix Gunk type is: double size: 8
    GraphBLAS type: victor type is: uint32_t size: 4
and its size of type is 4

    GraphBLAS Descriptor: 
---------------------------------- Duh: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
got outp 0
got mask 0
got inp0 0
got inp1 0

    GraphBLAS Descriptor: 
------------------------------- Duh set sort: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got sort 1

    GraphBLAS Descriptor: 
------------------------------- Duh set sort: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got sort 1

    GraphBLAS Descriptor: 
------------------------------- Duh set: 
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
------------------------------- Duh set: 
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask 
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask 
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set out 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set out 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask structural 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 6
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask structural 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 6
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask back 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask back 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]

    GraphBLAS Descriptor: 
-----Duh set in1 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]

    GraphBLAS Descriptor: 
-----Duh set in1 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
    GraphBLAS type: user Complex type double complex size: 16
size is 16
Spec: 2.0.0 (2000000): 2.0
Spec Date: Nov 15, 2021
About the spec:
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang, and Benjamin Brock.  Based on 'GraphBLAS
Mathematics by Jeremy Kepner.  See also 'Graph Algorithms in the Language
of Linear Algebra,' edited by J. Kepner and J. Gilbert, SIAM, 2011.

date: Nov 15, 2021
URL: http://graphblas.org
Spec Version (2.0.0)
library info:
name: SuiteSparse:GraphBLAS
date: (DRAFT9) Apr 25, 2023
about:
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2023, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University.

license:
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2023, All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use SuiteSparse:GraphBLAS except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Version (8.0.0)
Implementation: (8000000)
compile date: Apr 26 2023
compile time: 22:48:18
with OpenMP: 1
URL: http://faculty.cse.tamu.edu/davis/GraphBLAS
The spec is >= version 1.0.0
The spec is < version 2.3.0
This implementation is >= version 1.0.0
gpu count: 0
gpu control: -1
built-in types:
    GraphBLAS type: bool bool size: 1
    GraphBLAS type: int8 int8_t size: 1
    GraphBLAS type: uint8 uint8_t size: 1
    GraphBLAS type: int16 int16_t size: 2
    GraphBLAS type: uint16 uint16_t size: 2
    GraphBLAS type: int32 int32_t size: 4
    GraphBLAS type: uint32 uint32_t size: 4
    GraphBLAS type: int64 int64_t size: 8
    GraphBLAS type: uint64 uint64_t size: 8
    GraphBLAS type: fp32 float size: 4
    GraphBLAS type: fp64 double size: 8

printing built-in types:
  1
  22
  44
  909
  777
  3203
  8080
  -987
  987
   3.14
   99.4
[user-defined value]
Check status codes
   0 : GrB_SUCCESS
   1 : GrB_NO_VALUE
  -1 : GrB_UNINITIALIZED_OBJECT
  -2 : GrB_NULL_POINTER
  -3 : GrB_INVALID_VALUE
  -4 : GrB_INVALID_INDEX
  -5 : GrB_DOMAIN_MISMATCH
  -6 : GrB_DIMENSION_MISMATCH
  -7 : GrB_OUTPUT_NOT_EMPTY
  -8 : GrB_NOT_IMPLEMENTED
-101 : GrB_PANIC
-102 : GrB_OUT_OF_MEMORY
-103 : GrB_INSUFFICIENT_SPACE
-104 : GrB_INVALID_OBJECT
-105 : GrB_INDEX_OUT_OF_BOUNDS
-106 : GrB_EMPTY_OBJECT
 911 : unknown GrB_Info value!
hyper_switch 0.0625 csc 1
bitmap_switch [0]: 0.04
bitmap_switch [1]: 0.05
bitmap_switch [2]: 0.06
bitmap_switch [3]: 0.08
bitmap_switch [4]: 0.1
bitmap_switch [5]: 0.2
bitmap_switch [6]: 0.3
bitmap_switch [7]: 0.4
mode: 0
# threads: 4
chunk: 1

  10000x10000 GraphBLAS bool matrix, hypersparse by col
  A, 1 entry, memory: 528 bytes
  iso value:   1

    (0,0)   1


  10000x10000 GraphBLAS bool matrix, hypersparse by col
  B, 1 entry, memory: 528 bytes
  iso value:   1

    (0,0)   1


  10000x10000 GraphBLAS bool matrix, hypersparse by col
  Q, no entries, memory: 0 bytes


div_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=first(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    identity: [   0 ] 

rdiv_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=second(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isgt_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=gt(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

islt_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=lt(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isge_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=ge(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isle_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=le(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

  10x10 GraphBLAS user_int matrix, sparse by col
  A, 10 entries, memory: 504 bytes

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]
    (5,5) [user-defined value]
    (6,6) [user-defined value]
    (7,7) [user-defined value]
    (8,8) [user-defined value]
    (9,9) [user-defined value]


  10x10 GraphBLAS int16_t matrix, sparse by col
  B, 10 entries, memory: 504 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   2
    (3,3)   3
    (4,4)   4
    (5,5)   5
    (6,6)   6
    (7,7)   7
    (8,8)   8
    (9,9)   9


  1x1 GraphBLAS user_int scalar, sparse by col
  thunk, no entries, memory: 232 bytes

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -5


  10x10 GraphBLAS bool matrix, sparse by col
  A, 10 entries, memory: 484 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   0
    (3,3)   1
    (4,4)   0
    (5,5)   1
    (6,6)   0
    (7,7)   1
    (8,8)   0
    (9,9)   1


============== B = select (A > 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 5 entries, memory: 352 bytes
  iso value:   1

    (1,1)   1
    (3,3)   1
    (5,5)   1
    (7,7)   1
    (9,9)   1


============== B = select (A >= 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 10 entries, memory: 394 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   0
    (3,3)   1
    (4,4)   0
    (5,5)   1
    (6,6)   0
    (7,7)   1
    (8,8)   0
    (9,9)   1


============== B = select (A < 0)

  10x10 GraphBLAS bool matrix, hypersparse by col
  B, no entries, memory: 240 bytes


============== B = select (A <= 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 5 entries, memory: 352 bytes
  iso value:   0

    (0,0)   0
    (2,2)   0
    (4,4)   0
    (6,6)   0
    (8,8)   0

did setEL loop
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Vector_removeElement (v, i)
Row index 9999 out of range; must be < 43
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Matrix_removeElement (C, row, col)
Column index 9999 out of range; must be < 8
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Matrix_removeElement (C, row, col)
Row index 9999 out of range; must be < 8

  8x8 GraphBLAS double matrix, hypersparse by col
  A, no entries, memory: 6.3 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 0 col: 0    2

    GraphBLAS BinaryOp: pending operator: (built-in): z=plus(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8


  8x8 GraphBLAS double matrix, hypersparse by col
  A, 1 entry, memory: 256 bytes

    (0,0)    3


  8x8 GraphBLAS double matrix, hypersparse by col
  A, 1 entry, memory: 528 bytes

    (0,0)    3

testing removeElement
removeElement: OK

  1x1 GraphBLAS double scalar, full by col
  scalar2, 1 entry, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25

  2x1 GraphBLAS double scalar, full by col
  scalar2, 2 entries, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25
    (1,0)    1.25
    GrB_Scalar is invalid [scalar2]

  1x1 GraphBLAS double scalar, full by col
  scalar2, 1 entry, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25

    GraphBLAS Descriptor: T1     
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: T0     
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: T0T1   
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: C      
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: CT1    
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: CT0    
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: CT0T1  
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: S      
    d.out      = default   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: ST1    
    d.out      = default   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: ST0    
    d.out      = default   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: ST0T1  
    d.out      = default   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: SC     
    d.out      = default   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: SCT1   
    d.out      = default   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: SCT0   
    d.out      = default   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: SCT0T1 
    d.out      = default   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: R      
    d.out      = replace   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RT1    
    d.out      = replace   
    d.mask     = default   
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RT0    
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RT0T1  
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RC     
    d.out      = replace   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RCT1   
    d.out      = replace   
    d.mask     = complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RCT0   
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RCT0T1 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RS     
    d.out      = replace   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RST1   
    d.out      = replace   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RST0   
    d.out      = replace   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RST0T1 
    d.out      = replace   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RSC    
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RSCT1  
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RSCT0  
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RSCT0T1 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = hash      

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       
burble: 0

    GraphBLAS SelectOp: tril: C=tril(A,k)

    GraphBLAS SelectOp: triu: C=triu(A,k)

    GraphBLAS SelectOp: diag: C=diag(A,k)

    GraphBLAS SelectOp: offidiag: C=offdiag(A,k)

    GraphBLAS SelectOp: nonzero: C=nonzero(A,k)

    GraphBLAS SelectOp: eq_zero: C=eq_zero(A,k)

    GraphBLAS SelectOp: gt_zero: C=gt_zero(A,k)

    GraphBLAS SelectOp: ge_zero: C=ge_zero(A,k)

    GraphBLAS SelectOp: lt_zero: C=lt_zero(A,k)

    GraphBLAS SelectOp: le_zero: C=le_zero(A,k)

    GraphBLAS SelectOp: ne_thunk: C=ne_thunk(A,k)

    GraphBLAS SelectOp: eq_thunk: C=eq_thunk(A,k)

    GraphBLAS SelectOp: gt_thunk: C=gt_thunk(A,k)

    GraphBLAS SelectOp: ge_thunk: C=ge_thunk(A,k)

    GraphBLAS SelectOp: lt_thunk: C=lt_thunk(A,k)

    GraphBLAS SelectOp: le_thunk: C=le_thunk(A,k)

  2199023254528x2199023254528 GraphBLAS double matrix, full by col
  A iso full, 4.8357e+24 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (10,0)    1
    (11,0)    1
    (12,0)    1
    (13,0)    1
    (14,0)    1
    (15,0)    1
    (16,0)    1
    (17,0)    1
    (18,0)    1
    (19,0)    1
    (20,0)    1
    (21,0)    1
    (22,0)    1
    (23,0)    1
    (24,0)    1
    (25,0)    1
    (26,0)    1
    (27,0)    1
    (28,0)    1
    ...
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_BOOL (C, row, col, x)
Input scalar of type [bool]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT8 (C, row, col, x)
Input scalar of type [int8_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT16 (C, row, col, x)
Input scalar of type [int16_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT32 (C, row, col, x)
Input scalar of type [int32_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT64 (C, row, col, x)
Input scalar of type [int64_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT8 (C, row, col, x)
Input scalar of type [uint8_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT16 (C, row, col, x)
Input scalar of type [uint16_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT32 (C, row, col, x)
Input scalar of type [uint32_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT64 (C, row, col, x)
Input scalar of type [uint64_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_FP32 (C, row, col, x)
Input scalar of type [float]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_FP64 (C, row, col, x)
Input scalar of type [double]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxM_Matrix_setElement_FC32 (C, row, col, x)
Input scalar of type [float complex]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxM_Matrix_setElement_FC64 (C, row, col, x)
Input scalar of type [double complex]
cannot be typecast to entry of type [user_int]
Test GrB_error:

  10x10 GraphBLAS user_int matrix, hypersparse by col
  A, no entries, memory: 4.3 KB
  iso value: [user-defined value]
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  user-defined: [user_int] size: 2
    typedef int16_t user_int ;
    row: 3 col: 7 
  pending operator: implicit 2nd


All errors printed above were expected.
GB_mex_about: all tests passed

nmalloc 0 at start
nmalloc 34 after complex init
rand seed----------------------------------------------------
nmalloc 34 befor 2nd start
nmalloc 0 after Complex_finialize
GrB_init-----------------------------------------------------
nmalloc 0 at 2nd start, reinit complex with builtin: 1
nmalloc 0 after 2nd complex init
GrB_Type-----------------------------------------------------
    GraphBLAS type: new type user-defined: [int] size: 4

----------------------------------tcode: 0
    GraphBLAS type: GB_code_type: double complex size: 16

----------------------------------tcode: 1
    GraphBLAS type: GB_code_type: bool size: 1

----------------------------------tcode: 2
    GraphBLAS type: GB_code_type: int8_t size: 1

----------------------------------tcode: 3
    GraphBLAS type: GB_code_type: uint8_t size: 1

----------------------------------tcode: 4
    GraphBLAS type: GB_code_type: int16_t size: 2

----------------------------------tcode: 5
    GraphBLAS type: GB_code_type: uint16_t size: 2

----------------------------------tcode: 6
    GraphBLAS type: GB_code_type: int32_t size: 4

----------------------------------tcode: 7
    GraphBLAS type: GB_code_type: uint32_t size: 4

----------------------------------tcode: 8
    GraphBLAS type: GB_code_type: int64_t size: 8

----------------------------------tcode: 9
    GraphBLAS type: GB_code_type: uint64_t size: 8

----------------------------------tcode: 10
    GraphBLAS type: GB_code_type: float size: 4

----------------------------------tcode: 11
    GraphBLAS type: GB_code_type: double size: 8

----------------------------------tcode: 12
    GraphBLAS type: GB_code_type: float complex size: 8

----------------------------------tcode: 13
    GraphBLAS type: GB_code_type: double complex size: 16

----------------------------------tcode: 14
    GraphBLAS type: GB_code_type: double complex size: 16
GrB_UnaryOp--------------------------------------------------

    GraphBLAS UnaryOp: new unary opzz (user-defined): z=f1(x)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype uint32_t size: 4
GrB_BinaryOp-------------------------------------------------

    GraphBLAS BinaryOp: new binary opxx (user-defined): z=f2(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype int16_t size: 2
GrB_Monoid---------------------------------------------------
GrB_Semiring-------------------------------------------------
User defined (complex) --------------------------------------
Complex_finalize:
Complex_init (true): using builtin complex
Complex_finalize again:
Complex_init (false): user-defined complex
GrB_Vector---------------------------------------------------

  1x1 GraphBLAS int32_t scalar, full by col
  a_scalar, 1 entry, memory: 224 bytes
  iso value:   42

    (0,0)   42

  1x1 GraphBLAS int scalar, sparse by col
  a_scalar, no entries, memory: 232 bytes

    GraphBLAS type: T user-defined: [int] size: 4
error expected: -5
GrB_Vector---------------------------------------------------

  32x1 GraphBLAS uint16_t vector, bitmap by col
  vector 18:28, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10

nvals 12

  32x1 GraphBLAS uint16_t vector, bitmap by col
  vector 18:28, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10


  32x1 GraphBLAS uint16_t vector, bitmap by col
  zz ok vector, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10

GrB_Vector_build---------------------------------------------
build udt:
info -5 expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Vector_build_UDT (w, I, X, nvals, dup)
Operator [plus] for assembling duplicates has type [double],
cannot be typecast to entries in output of type [user_int]

  10x1 GraphBLAS user_int vector, sparse by col
  v, no entries, memory: 232 bytes


  10x1 GraphBLAS double vector, sparse by col
  v clear, no entries, memory: 232 bytes

GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Vector_build_FP64 (w, I, X, nvals, dup)
nvals cannot be GxB_RANGE, GxB_STRIDE, or GxB_BACKWARDS
expected error, index out of bounds:


  10x1 GraphBLAS double vector invalid object
GrB_Vector_setElement----------------------------------------
GrB_Vector_extractElement------------------------------------
GrB_Vector_extractTuples-------------------------------------
GrB_Matrix---------------------------------------------------
GrB_Matrix_build---------------------------------------------
info -5 expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_UDT (C, I, J, X, nvals, dup)
Operator [plus] for assembling duplicates has type [double],
cannot be typecast to entries in output of type [user_int]
GrB_Matrix_setElement----------------------------------------
GrB_Matrix_extractElement------------------------------------

  10x5 GraphBLAS double matrix, hypersparse by row
  A, 1 entry, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (2,0)    22.8
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 4 col: 0    44.9
  pending operator: implicit 2nd


  10x5 GraphBLAS double matrix, sparse by col
  A, 2 entries, memory: 296 bytes

    (2,0)    22.8
    (4,0)    44.9

GrB_Matrix_extractTuples-------------------------------------
GrB_Descriptor-----------------------------------------------
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_AxB_METHOD field;
must be GxB_DEFAULT [0], GxB_AxB_GUSTAVSON [1001]
GxB_AxB_DOT [1003], GxB_AxB_HASH [1004] or GxB_AxB_SAXPY [1005]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_AxB_METHOD field;
must be GxB_DEFAULT [0], GxB_AxB_GUSTAVSON [1001]
GxB_AxB_DOT [1003], GxB_AxB_HASH [1004] or GxB_AxB_SAXPY [1005]

    GraphBLAS Descriptor: new descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (default) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (dot) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       

    GraphBLAS Descriptor: new descriptor (Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (still Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (default) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (dot) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       

    GraphBLAS Descriptor: new descriptor (Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (still Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = unknown    (invalid value for this field)
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = unknown    (invalid value for this field)
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = hash       (invalid value for this field)
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = transpose  (invalid value for this field)
    Descriptor field set to an invalid value
create test matrices-----------------------------------------
complex vector:
GrB_mxm------------------------------------------------------
last error was [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_mxm (C, M, accum, semiring, A, B, desc)
M of type [mycx] cannot be typecast to boolean]

  1x1152921504606846976 GraphBLAS double matrix, sparse by row
  huge row, no entries, memory: 232 bytes

GrB_eWise ---------------------------------------------------
GrB_kronecker -----------------------------------------------
GrB_extract -------------------------------------------------
GxB_subassign -----------------------------------------------

  3x4 GraphBLAS double matrix, bitmap by col
  A, 7 entries, memory: 324 bytes

    (0,0)    0.230336
    (1,0)    0.629655
    (0,1)    0.825397
    (1,1)    0.674999
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555

GrB_assign---------------------------------------------------

  3x4 GraphBLAS double matrix, bitmap by col
  A, 8 entries, memory: 324 bytes

    (0,0)    1.26719
    (1,0)    1.51611
    (0,1)    2.03707
    (1,1)    2.28599
    (2,1)    0.137173
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555


  5x1 GraphBLAS bool vector, sparse by col
  v5, no entries, memory: 232 bytes


  5x1 GraphBLAS double vector, sparse by col
  v, no entries, memory: 232 bytes

mask wrong size:
GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GrB_Col_assign (C, M, accum, u, Rows, nRows, col, desc)
Mask vector m length is 5; must match the number of rows of C (3)

  3x4 GraphBLAS double matrix, bitmap by col
  A, 8 entries, memory: 324 bytes

    (0,0)    1.26719
    (1,0)    1.51611
    (0,1)    2.03707
    (1,1)    2.28599
    (2,1)    0.137173
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555


  5x5 GraphBLAS bool matrix, hypersparse by row
  A5, no entries, memory: 240 bytes

mask wrong size:
GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GrB_Matrix_assign (C, M, accum, A, Rows, nRows, Cols, nCols, desc)
Mask M is 5-by-5; must match result C (3-by-4)

  5x5 GraphBLAS float matrix, full by row
  A5 with 2nd:fp32, 25 entries, memory: 316 bytes

    (0,0)    42
    (0,1)    42
    (0,2)    42
    (0,3)    42
    (0,4)    42
    (1,0)    42
    (1,1)    42
    (1,2)    42
    (1,3)    42
    (1,4)    42
    (2,0)    42
    (2,1)    42
    (2,2)    42
    (2,3)    42
    (2,4)    42
    (3,0)    42
    (3,1)    42
    (3,2)    42
    (3,3)    42
    (3,4)    42
    (4,0)    42
    (4,1)    42
    (4,2)    42
    (4,3)    42
    (4,4)    42


  5x5 GraphBLAS float matrix, full by row
  A5 with 2nd:bool, 25 entries, memory: 316 bytes

    (0,0)    1
    (0,1)    1
    (0,2)    1
    (0,3)    1
    (0,4)    1
    (1,0)    1
    (1,1)    1
    (1,2)    1
    (1,3)    1
    (1,4)    1
    (2,0)    1
    (2,1)    1
    (2,2)    1
    (2,3)    1
    (2,4)    1
    (3,0)    1
    (3,1)    1
    (3,2)    1
    (3,3)    1
    (3,4)    1
    (4,0)    1
    (4,1)    1
    (4,2)    1
    (4,3)    1
    (4,4)    1


  5x5 GraphBLAS float matrix, full by row
  A5 done, 25 entries, memory: 316 bytes

    (0,0)    1
    (0,1)    1
    (0,2)    1
    (0,3)    1
    (0,4)    1
    (1,0)    1
    (1,1)    1
    (1,2)    1
    (1,3)    1
    (1,4)    1
    (2,0)    1
    (2,1)    1
    (2,2)    1
    (2,3)    1
    (2,4)    1
    (3,0)    1
    (3,1)    1
    (3,2)    1
    (3,3)    1
    (3,4)    1
    (4,0)    1
    (4,1)    1
    (4,2)    1
    (4,3)    1
    (4,4)    1

GrB_apply----------------------------------------------------
GrB_reduce (to scalar)---------------------------------------
GrB_reduce (to vector)---------------------------------------
GrB_transpose------------------------------------------------

-------------- GB_entry_check:
   4.5

All GB_entry_check tests passed (errors expected)

-------------- GB_Type_check:
unknown code: [unknown type!]
unknown info: [unknown GrB_Info value!]

All GB_Type_check tests passed (errors expected)

-------------- GB_UnaryOp_check:

All GB_UnaryOp_check tests passed (errors expected)

-------------- GB_BinaryOp_check:

All GB_BinaryOp_check tests passed (errors expected)

-------------- GB_Monoid_check:

All GB_Monoid_check tests passed (errors expected)

-------------- GB_Semiring_check:

All GB_Semiring_check tests passed (errors expected)

-------------- GB_Descriptor_check:

All GB_Descriptor_check tests passed (errors expected)

-------------- GB_Vector_check:

All GB_Vector_check tests passed (errors expected)

-------------- GB_Matrix_check:

  10x4 GraphBLAS double matrix, hypersparse by row
  valid pending pi, 1 entry, memory: 256 bytes

    (0,0)    1


  10x4 GraphBLAS double matrix, hypersparse by row
  valid pending pi again, 1 entry, memory: 256 bytes

    (0,0)    1

nvals 1

========================================== valid pi

  10x4 GraphBLAS double matrix, hypersparse by row
  valid pi, 1 entry, memory: 528 bytes

    (0,0)    1


===================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  A empty, no entries, memory: 304 bytes


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with bool pending, no entries, memory: 4.6 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  bool size: 1
    row: 0 col: 0   1

    GraphBLAS BinaryOp: pending operator: (built-in): z=second(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: ytype double size: 8


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with pi pending, 1 entry, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 3    3.14159
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with pi and 9.0909 pending, 1 entry, memory: 6.4 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 3    3.14159
    row: 2 col: 1    9.0909
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->i is NULL, invalid matrix

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [0] = 1 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [1] = -1 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [4] = 1002 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  negative zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: -1
  invalid number of zombies: -1 must be >= 0 and <= # entries (3)

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  too many zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: 1000
  invalid number of zombies: 1000 must be >= 0 and <= # entries (3)

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  row index invalid, 3 entries, memory: 400 bytes

    (0,-1)   index (0,-1) out of range

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  bad zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  invalid zombie count: 0 exist but A->nzombies = 1

========================================== valid [pi 7.1]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1], 3 entries, memory: 6.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
  pending operator: implicit 2nd


===================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  negative pending, 3 entries, memory: 6.5 KB
  pending tuples: -1 max pending: 256 zombies: 0

  invalid pending count

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  missing pending, 3 entries, memory: 4.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  invalid pending tuples

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  bad pending tuple, 3 entries, memory: 6.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1070 col: 0    7.1
    tuple (1070,0) out of range

====================================== valid [pi 7.1 11.4]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1 11.4], 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4
  pending operator: implicit 2nd


=========================================================
matrix check with jumbled pending tuples:

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  invalid operator, 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4

    GraphBLAS BinaryOp: pending operator:  uninititialized object
  invalid pending operator

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1 11.4], 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4
  pending operator: implicit 2nd


=========================================================

###### get nvals; assemble the pending tuples ##### 

====================================== valid [pi 7.1 11.4]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid [pi 7 11.4], 5 entries, memory: 384 bytes

    (0,0)    1
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


=========================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  jumbled, 5 entries, memory: 384 bytes

    (0,1)    1
    (0,0)    11.4 index (0,0) invalid
jumbled info -105
jumbled info -104

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  OK, 5 entries, memory: 384 bytes

    (0,0)    1
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid zombie, 5 entries, memory: 384 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  no more zombie, 5 entries, memory: 384 bytes

    (0,0)    99099
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid zombie, 5 entries, memory: 384 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  again no more zombie, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid, no pending, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A now hyper, 4 entries, memory: 352 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  A now sparse, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A now hyper, 4 entries, memory: 352 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A with bad nvec_nonempty, 4 entries, memory: 352 bytes

 index (1,0) invalid
hratio: 0.75 0.75 0
default bswitch [0] = 0.04
default bswitch [1] = 0.05
default bswitch [2] = 0.06
default bswitch [3] = 0.08
default bswitch [4] = 0.1
default bswitch [5] = 0.2
default bswitch [6] = 0.3
default bswitch [7] = 0.4
77.33
error expected (A format null):
error expected (A format null):
error expected:
error expected:
error expected:
error expected:
error expected (bad field):
error expected (bad field):
error expected (bad field):
error expected:
error expected:
error expected:
error expected:
error expected:
error expected:

  10x4 GraphBLAS double matrix, sparse by col
  sparsity control: hypersparse only
  invalid sparse matrix structure

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  h restored, 4 entries, memory: 336 bytes


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  invalid hypersparse matrix structure

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  nvec restored, 4 entries, memory: 336 bytes


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  ->h [0] = -1 invalid

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  h[0] restored, 4 entries, memory: 336 bytes


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, no entries, memory: 4.3 KB
  iso value:   1
  pending tuples: 11 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  bool size: 1
    row: 0 col: 0 
    row: 0 col: 1 
    row: 0 col: 2 
    row: 0 col: 3 
    row: 0 col: 4 
    row: 0 col: 5 
    row: 0 col: 6 
    row: 0 col: 7 
    row: 0 col: 8 
    row: 0 col: 9 
    row: 0 col: 10 
  pending operator: implicit 2nd

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value: 


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1


Eleven invalid hypersparse:

  11x11 GraphBLAS bool matrix, hypersparse by row
  A->h is too small!

  11x11 GraphBLAS bool matrix, hypersparse by row
  A->h is too small!

  11x11 GraphBLAS bool matrix, full by row
  Eleven, 121 entries, memory: 224 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1
    (1,0)   1
    (1,1)   1
    (1,2)   1
    (1,3)   1
    (1,4)   1
    (1,5)   1
    (1,6)   1
    (1,7)   1
    (1,8)   1
    (1,9)   1
    (1,10)   1
    (2,0)   1
    (2,1)   1
    (2,2)   1
    (2,3)   1
    (2,4)   1
    (2,5)   1
    (2,6)   1
    ...

All GB_Matrix_check tests passed (errors expected)

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with one pending, 4 entries, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 2    32.4
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with no pending, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A blocking mode, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


All blocking/nonblocking mode tests passed

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A for ix_realloc, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A pattern 1, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A pattern 2, 5 entries, memory: 928 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A for shallow op, 5 entries, memory: 928 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  1x1 GraphBLAS float matrix, sparse by col
  Q empty, float, no entries, memory: 0 bytes

free A:
free B:
free C:
free E:
free F:
free v:
free u:
free z:

GrB_extract ============================================

  12x1 GraphBLAS double vector, bitmap by col
  start u , 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  start v , 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  u to check, 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  v to check, 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  v, 10 entries, memory: 324 bytes

    (0,0)    0.337293
    (1,0)    2.27776
    (2,0)    11.1243
    (4,0)    4.4319
    (6,0)    0.347899
    (7,0)    0.45809
    (8,0)    1.45361
    (9,0)    0.00843494
    (10,0)    2.65766
    (11,0)    27.4598


  12x1 GraphBLAS double vector, bitmap by col
  u, 10 entries, memory: 324 bytes

    (0,0)    0.337293
    (1,0)    2.27776
    (2,0)    11.1243
    (4,0)    4.4319
    (6,0)    0.347899
    (7,0)    0.45809
    (8,0)    1.45361
    (9,0)    0.00843494
    (10,0)    2.65766
    (11,0)    27.4598


  12x1 GraphBLAS double vector, bitmap by col
  v, 10 entries, memory: 324 bytes

    (0,0)    -11.1243
    (2,0)    -1.45361
    (3,0)    -0.45809
    (4,0)    -27.4598
    (5,0)    -4.4319
    (7,0)    -2.65766
    (8,0)    -0.337293
    (9,0)    -2.27776
    (10,0)    -0.00843494
    (11,0)    -0.347899


  12x1 GraphBLAS double vector, bitmap by col
  u, 10 entries, memory: 324 bytes

    (0,0)    -11.1243
    (2,0)    -1.45361
    (3,0)    -0.45809
    (4,0)    -27.4598
    (5,0)    -4.4319
    (7,0)    -2.65766
    (8,0)    -0.337293
    (9,0)    -2.27776
    (10,0)    -0.00843494
    (11,0)    -0.347899


GrB_extract ============================================

  12x1 GraphBLAS double vector, bitmap by col
  start u , 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  start v , 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  u to check, 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  v to check, 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    880848
    (1,0)    2.43015e+06
    (2,0)    79504
    (3,0)    5.9743e+06
    (4,0)    0.349378
    (5,0)    372627
    (6,0)    1.6954e+07
    (7,0)    258255
    (8,0)    5.58291e+06
    (9,0)    5094.77
    (10,0)    5094.77
    (11,0)    0.349378


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    880848
    (1,0)    2.43015e+06
    (2,0)    79504
    (3,0)    5.9743e+06
    (4,0)    0.349378
    (5,0)    372627
    (6,0)    1.6954e+07
    (7,0)    258255
    (8,0)    5.58291e+06
    (9,0)    5094.77
    (10,0)    5094.77
    (11,0)    0.349378


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -5.9743e+06
    (2,0)    -5.58291e+06
    (3,0)    -258255
    (4,0)    -0.349378
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    -5094.77
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -5.9743e+06
    (2,0)    -5.58291e+06
    (3,0)    -258255
    (4,0)    -0.349378
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    -5094.77
    (11,0)    -1.6954e+07


GrB_extract ============================================

  12x1 GraphBLAS double vector, full by col
  start u , 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  start v , 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u to check, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v to check, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -29670
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    -47.7385
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -29670
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    -47.7385
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


----------------------------- nthreads

----------------------------- import/export

  12x12 GraphBLAS double matrix, bitmap by col
  A to import/export, 94 entries, memory: 1.5 KB

    (0,0)    5.70695e+20
    (1,0)    -24011.4
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -103875
    (8,0)    6.68941e+21
    (9,0)    -129164
    (10,0)    -47.7385
    (11,0)    5.50359e+24
    (0,1)    8.10778e+21
    (1,1)    8.78032e+23
    (3,1)    -1316.53
    (5,1)    -618.248
    (6,1)    -30552.3
    (8,1)    -2.32089e+17
    (9,1)    9.49377e+23
    (10,1)    2.85353e+25
    (0,2)    -5.58291e+06
    (2,2)    -3.12163e+28
    (4,2)    -750.477
    (5,2)    -3.68311e+06
    (7,2)    -198783
    (9,2)    -30552.3
    (0,3)    -29670
    (1,3)    -1316.53
    (3,3)    8.08229e+20
    (5,3)    3.98145e+23
    (6,3)    -99121.2
    (7,3)    2.7988e+17
    (9,3)    3.68097e+24
    (0,4)    -2384.76
    (2,4)    -750.477
    (4,4)    3.15406e+22
    (5,4)    -5.96257
    (6,4)    -4.14935e+06
    (8,4)    -1.65667
    (10,4)    -167.268
    (0,5)    -0.349378
    (1,5)    1.84666e+23
    (2,5)    -39.4471
    (3,5)    3.93233e+23
    (4,5)    -5.96257
    (5,5)    -1.65667
    (7,5)    1.62408e+20
    (8,5)    -1.3075e+06
    (9,5)    1.501e+28
    (10,5)    -0.0338679
    (1,6)    -5.38515e+06
    (2,6)    2.57395e+27
    (3,6)    -365233
    (4,6)    -4.14935e+06
    (6,6)    -59731.2
    (7,6)    2.97553e+18
    (8,6)    -129164
    (10,6)    -207.484
    (2,7)    -198783
    (3,7)    -4.66699
    (6,7)    -891.777
    (7,7)    -3.46458e+16
    (8,7)    5.44432e+29
    (9,7)    6.8555e+29
    (10,7)    -8.21612e-05
    (0,8)    6.68941e+21
    (1,8)    5.58291e+06
    (4,8)    2.80448e+15
    (5,8)    -3.18231e+06
    (6,8)    -129164
    (7,8)    5.44432e+29
    (8,8)    -3.68311e+06
    (9,8)    -4.53492e+06
    (10,8)    -7.82353e+21
    (11,8)    4.56913e+14
    (0,9)    3.69887e+22
    (1,9)    8.09708e+24
    (2,9)    -30552.3
    (4,9)    8.80765e+23
    (5,9)    2.33703e+26
    (8,9)    -4.53492e+06
    (10,9)    4.54628e+22
    (11,9)    9.19161e+24
    (0,10)    -47.7385
    (1,10)    2.85353e+25
    (2,10)    2.22615e+23
    (4,10)    -0.960076
    (5,10)    -33.1062
    (6,10)    -207.484
    (7,10)    -8.21612e-05
    (9,10)    4.54628e+22
    (10,10)    -2.84418
    (11,10)    1.63904e+20
    (0,11)    -1.6954e+07
    (8,11)    -4.14935e+06
    (11,11)    30552.3

    GraphBLAS type: type of A double size: 8
Ax_size 752
exported row 0
   col 0 value 5.70695e+20
   col 1 value 8.10778e+21
   col 2 value -5.58291e+06
   col 3 value -29670
   col 4 value -2384.76
   col 5 value -0.349378
   col 8 value 6.68941e+21
   col 9 value 3.69887e+22
   col 10 value -47.7385
   col 11 value -1.6954e+07
exported row 0
   col 0 value -24011.4
   col 1 value 8.78032e+23
   col 3 value -1316.53
   col 5 value 1.84666e+23
   col 6 value -5.38515e+06
   col 8 value 5.58291e+06
   col 9 value 8.09708e+24
   col 10 value 2.85353e+25
exported row 0
   col 0 value -5.58291e+06
   col 2 value -3.12163e+28
   col 4 value -750.477
   col 5 value -39.4471
   col 6 value 2.57395e+27
   col 7 value -198783
   col 9 value -30552.3
   col 10 value 2.22615e+23
exported row 0
   col 0 value -29670
   col 1 value -1316.53
   col 3 value 8.08229e+20
   col 5 value 3.93233e+23
   col 6 value -365233
   col 7 value -4.66699
exported row 0
   col 0 value -91.8849
   col 2 value -750.477
   col 4 value 3.15406e+22
   col 5 value -5.96257
   col 6 value -4.14935e+06
   col 8 value 2.80448e+15
   col 9 value 8.80765e+23
   col 10 value -0.960076
exported row 0
   col 0 value -103875
   col 1 value -618.248
   col 2 value -3.68311e+06
   col 3 value 3.98145e+23
   col 4 value -5.96257
   col 5 value -1.65667
   col 8 value -3.18231e+06
   col 9 value 2.33703e+26
   col 10 value -33.1062
exported row 0
   col 1 value -30552.3
   col 3 value -99121.2
   col 4 value -4.14935e+06
   col 6 value -59731.2
   col 7 value -891.777
   col 8 value -129164
   col 10 value -207.484
exported row 0
   col 2 value -198783
   col 3 value 2.7988e+17
   col 5 value 1.62408e+20
   col 6 value 2.97553e+18
   col 7 value -3.46458e+16
   col 8 value 5.44432e+29
   col 10 value -8.21612e-05
exported row 0
   col 0 value 6.68941e+21
   col 1 value -2.32089e+17
   col 4 value -1.65667
   col 5 value -1.3075e+06
   col 6 value -129164
   col 7 value 5.44432e+29
   col 8 value -3.68311e+06
   col 9 value -4.53492e+06
   col 11 value -4.14935e+06
exported row 0
   col 0 value -129164
   col 1 value 9.49377e+23
   col 2 value -30552.3
   col 3 value 3.68097e+24
   col 5 value 1.501e+28
   col 7 value 6.8555e+29
   col 8 value -4.53492e+06
   col 10 value 4.54628e+22
exported row 0
   col 0 value -47.7385
   col 1 value 2.85353e+25
   col 4 value -167.268
   col 5 value -0.0338679
   col 6 value -207.484
   col 7 value -8.21612e-05
   col 8 value -7.82353e+21
   col 9 value 4.54628e+22
   col 10 value -2.84418
exported row 0
   col 0 value 5.50359e+24
   col 8 value 4.56913e+14
   col 9 value 9.19161e+24
   col 10 value 1.63904e+20
   col 11 value 30552.3

  12x12 GraphBLAS double matrix, sparse by row
  A imported, 94 entries, memory: 1.8 KB

    (0,0)    5.70695e+20
    (0,1)    8.10778e+21
    (0,2)    -5.58291e+06
    (0,3)    -29670
    (0,4)    -2384.76
    (0,5)    -0.349378
    (0,8)    6.68941e+21
    (0,9)    3.69887e+22
    (0,10)    -47.7385
    (0,11)    -1.6954e+07
    (1,0)    -24011.4
    (1,1)    8.78032e+23
    (1,3)    -1316.53
    (1,5)    1.84666e+23
    (1,6)    -5.38515e+06
    (1,8)    5.58291e+06
    (1,9)    8.09708e+24
    (1,10)    2.85353e+25
    (2,0)    -5.58291e+06
    (2,2)    -3.12163e+28
    (2,4)    -750.477
    (2,5)    -39.4471
    (2,6)    2.57395e+27
    (2,7)    -198783
    (2,9)    -30552.3
    (2,10)    2.22615e+23
    (3,0)    -29670
    (3,1)    -1316.53
    (3,3)    8.08229e+20
    (3,5)    3.93233e+23
    (3,6)    -365233
    (3,7)    -4.66699
    (4,0)    -91.8849
    (4,2)    -750.477
    (4,4)    3.15406e+22
    (4,5)    -5.96257
    (4,6)    -4.14935e+06
    (4,8)    2.80448e+15
    (4,9)    8.80765e+23
    (4,10)    -0.960076
    (5,0)    -103875
    (5,1)    -618.248
    (5,2)    -3.68311e+06
    (5,3)    3.98145e+23
    (5,4)    -5.96257
    (5,5)    -1.65667
    (5,8)    -3.18231e+06
    (5,9)    2.33703e+26
    (5,10)    -33.1062
    (6,1)    -30552.3
    (6,3)    -99121.2
    (6,4)    -4.14935e+06
    (6,6)    -59731.2
    (6,7)    -891.777
    (6,8)    -129164
    (6,10)    -207.484
    (7,2)    -198783
    (7,3)    2.7988e+17
    (7,5)    1.62408e+20
    (7,6)    2.97553e+18
    (7,7)    -3.46458e+16
    (7,8)    5.44432e+29
    (7,10)    -8.21612e-05
    (8,0)    6.68941e+21
    (8,1)    -2.32089e+17
    (8,4)    -1.65667
    (8,5)    -1.3075e+06
    (8,6)    -129164
    (8,7)    5.44432e+29
    (8,8)    -3.68311e+06
    (8,9)    -4.53492e+06
    (8,11)    -4.14935e+06
    (9,0)    -129164
    (9,1)    9.49377e+23
    (9,2)    -30552.3
    (9,3)    3.68097e+24
    (9,5)    1.501e+28
    (9,7)    6.8555e+29
    (9,8)    -4.53492e+06
    (9,10)    4.54628e+22
    (10,0)    -47.7385
    (10,1)    2.85353e+25
    (10,4)    -167.268
    (10,5)    -0.0338679
    (10,6)    -207.484
    (10,7)    -8.21612e-05
    (10,8)    -7.82353e+21
    (10,9)    4.54628e+22
    (10,10)    -2.84418
    (11,0)    5.50359e+24
    (11,8)    4.56913e+14
    (11,9)    9.19161e+24
    (11,10)    1.63904e+20
    (11,11)    30552.3


  12x12 GraphBLAS double matrix, hypersparse by col
  A still OK, 94 entries, memory: 1.9 KB


  12x12 GraphBLAS double matrix, sparse by row
  A also OK, 94 entries, memory: 1.8 KB


  12x12 GraphBLAS double matrix, sparse by col
  A here too OK, 94 entries, memory: 1.8 KB


  12x12 GraphBLAS double matrix, hypersparse by row
  A yet still OK, 94 entries, memory: 1.9 KB


  12x12 GraphBLAS double matrix, hypersparse by col
  A yet again OK, 94 entries, memory: 1.9 KB


  12x1 GraphBLAS double vector, full by col
  u to import/export, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07

    GraphBLAS type: type of u double size: 8
nvals 12
   col 0 value -79504
   col 1 value 29670
   col 2 value -5.58291e+06
   col 3 value 47.7385
   col 4 value 1.6954e+07
   col 5 value -91.8849
   col 6 value -372627
   col 7 value -47.7385
   col 8 value -880848
   col 9 value -24011.4
   col 10 value 24011.4
   col 11 value -1.6954e+07

  12x1 GraphBLAS double vector, sparse by col
  u imported, 12 entries, memory: 424 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, sparse by col
  u still OK, 12 entries, memory: 424 bytes


  12x1 GraphBLAS double vector, sparse by col
  u still OK, 12 entries, memory: 424 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07



free all: nmalloc 0
nmalloc 0 before complex_finalize
nmalloc 0 done
nmalloc 0 all freed
nmalloc 0 all freed
nmalloc 0 after finalize

check errlog.txt for errors tested
All error-handling tests passed (all errors above were expected)

Burble with standard printf/flush:
 [ GrB_Matrix_nvals 
   1.19e-06 sec ]

Burble with myprintf/myflush:
[[myprintf: [ GrB_Matrix_nvals ]]myflush
[[myprintf:
   0 sec ]
]]myflush

default memory pool limits:
expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same
]
expected error: [GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid
]

  10x10 GraphBLAS float matrix, hypersparse by col
  C ok, no entries, memory: 240 bytes


  10x10 GraphBLAS float matrix, hypersparse by col
  C iso invald, no entries, memory: 240 bytes
  invalid iso matrix

  1x1 GraphBLAS float scalar, sparse by col
  scalar init, no entries, memory: 232 bytes

expected error: [GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_build_Scalar (C, I, J, scalar, nvals)
Scalar value is missing]
expected error: [GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Vector_build_Scalar (w, I, scalar, nvals)
Scalar value is missing]

  1x1 GraphBLAS float scalar, full by col
  scalar set, 1 entry, memory: 224 bytes
  iso value:    3

    (0,0)    3

  1x1 GraphBLAS float scalar, sparse by col
  sparsity control: sparse only
  scalar, 1 entry, memory: 248 bytes
  iso value:    3

    (0,0)    3

expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_UINT64 (C, I, J, X, nvals, dup)
Value(s) of type [uint64_t] cannot be typecast to matrix of type [int]
]
expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_build_Scalar (C, I, J, scalar, nvals)
Value(s) of type [float] cannot be typecast to matrix of type [int]
]

  10x10 GraphBLAS float matrix, sparse by col
  C to export, 8 entries, memory: 376 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1


  10x10 GraphBLAS float matrix, sparse by col
  C imported sparse, 8 entries, memory: 376 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1


  10x10 GraphBLAS float matrix, hypersparse by col
  C imported hyper, 8 entries, memory: 424 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1

  10x10 GraphBLAS float matrix, sparse by col
  C imported non-iso, 100 entries, memory: 1.5 KB

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  10x10 GraphBLAS float matrix, sparse by col
  C imported iso, 100 entries, memory: 1.1 KB
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...
    GraphBLAS type: My4x64 user-defined: [my4x64] size: 32
    typedef struct { int64_t stuff [4] ; } my4x64 ;

################# sparsity_control 1

  4x4 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  C stuff, 12 entries, memory: 768 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 2 entries, memory: 336 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 4 entries, memory: 416 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 4 entries, memory: 416 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 2 entries, memory: 336 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 2

  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff, 12 entries, memory: 736 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 2 entries, memory: 320 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 4 entries, memory: 400 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 4 entries, memory: 400 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 2 entries, memory: 320 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 4

  4x4 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  C stuff, 12 entries, memory: 744 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 2 entries, memory: 352 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 4 entries, memory: 352 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 4 entries, memory: 352 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 2 entries, memory: 352 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 8

  4x4 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  C stuff, 16 entries, memory: 728 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
C(0,0) = [0, 0, 32, 99]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,1) = [1, 1, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,2) = [2, 2, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]
C(3,3) = [3, 3, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 0, 32, 99]
Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]
Tile(1,1) = [1, 1, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 2, 32, 99]
Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]
Tile(1,1) = [3, 3, 32, 99]

  4x4 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  C stuff iso, 16 entries, memory: 248 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]

  4x4 GraphBLAS my4x64 matrix, full by col
  C stuff iso imported, 16 entries, memory: 728 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]

C(0,0) = [3, 3, 32, 99]
C(0,1) = [3, 3, 32, 99]
C(0,2) = [3, 3, 32, 99]
C(0,3) = [3, 3, 32, 99]
C(1,0) = [3, 3, 32, 99]
C(1,1) = [3, 3, 32, 99]
C(1,2) = [3, 3, 32, 99]
C(1,3) = [3, 3, 32, 99]
C(2,0) = [3, 3, 32, 99]
C(2,1) = [3, 3, 32, 99]
C(2,2) = [3, 3, 32, 99]
C(2,3) = [3, 3, 32, 99]
C(3,0) = [3, 3, 32, 99]
C(3,1) = [3, 3, 32, 99]
C(3,2) = [3, 3, 32, 99]
C(3,3) = [3, 3, 32, 99]

  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff sparse non-iso, 16 entries, memory: 544 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse (jumbled) by col
  sparsity control: sparse only
  C stuff jumbled, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff wait, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff non iso, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  10x10 GraphBLAS float matrix, full by col
  C iso full, 100 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  10x10 GraphBLAS float matrix, full by col
  C non-iso full, 100 entries, memory: 616 bytes

    (0,0)    2
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  4x4 GraphBLAS float matrix, full by col
  A iso, 16 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (0,3)    1
    (1,3)    1
    (2,3)    1
    (3,3)    1

  10x10 GraphBLAS float matrix, hypersparse by col
  C iso with pending, no entries, memory: 4.3 KB
  iso value:    1
  pending tuples: 16 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 1 
    row: 2 col: 1 
    row: 3 col: 1 
    row: 4 col: 1 
    row: 1 col: 2 
    row: 2 col: 2 
    row: 3 col: 2 
    row: 4 col: 2 
    row: 1 col: 3 
    row: 2 col: 3 
    row: 3 col: 3 
    row: 4 col: 3 
    row: 1 col: 4 
    row: 2 col: 4 
    row: 3 col: 4 
    row: 4 col: 4 
  pending operator: implicit 2nd

  2x2 GraphBLAS float matrix, bitmap by col
  A non-iso, 4 entries, memory: 240 bytes

    (0,0)    1.1
    (1,0)    2.1
    (0,1)    1.2
    (1,1)    2.2

  10x10 GraphBLAS float matrix, bitmap by col
  C non-iso, 16 entries, memory: 716 bytes

    (1,1)    1.1
    (2,1)    2.1
    (3,1)    1
    (4,1)    1
    (1,2)    1.2
    (2,2)    2.2
    (3,2)    1
    (4,2)    1
    (1,3)    1
    (2,3)    1
    (3,3)    1
    (4,3)    1
    (1,4)    1
    (2,4)    1
    (3,4)    1
    (4,4)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  C iso, 2 entries, memory: 264 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  A iso, 2 entries, memory: 264 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  C iso, C<M>=op(A), 2 entries, memory: 4.6 KB
  iso value:    1
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (1,0)    1
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 0 col: 2 
    row: 1 col: 2 
  pending operator: implicit 2nd

  10x10 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  C for C<M>=A, 3 entries, memory: 716 bytes

    (0,0)    1.1
    (3,3)    9.7
    (4,4)    9.9

  2x2 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  A for C<M>=A, 2 entries, memory: 240 bytes

    (0,0)    1.1
    (0,1)    1.2

  10x10 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  C after C<M>=A, 2 entries, memory: 716 bytes

    (1,1)    1.1
    (1,2)    1.2

    GraphBLAS Descriptor: descriptor !M 
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

  100x1 GraphBLAS float vector, sparse by col
  w after first setElement, no entries, memory: 2.3 KB
  iso value:    0
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd

  100x1 GraphBLAS float vector, sparse by col
  w before extractElement, 2 entries, memory: 3.4 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    2
    (1,0)    -1
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 2 col: 0    2
    row: 2 col: 0    3
  pending operator: implicit 2nd

  100x1 GraphBLAS float vector, sparse by col
  w after extractElement, 3 entries, memory: 268 bytes

    (0,0)    2
    (1,0)    -1
    (2,0)    3

  10x10 GraphBLAS float matrix, hypersparse by col
  C before transpose, 1 entry, memory: 5.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (2,4)    8.25
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 3    9.5
  pending operator: implicit 2nd

  10x10 GraphBLAS float matrix, sparse by col
  C after transpose, 2 entries, memory: 328 bytes

    (3,1)    9.5
    (4,2)    8.25

----------------- ntasks: 1
task:   0 kfirst: 0 klast: 3 pfirst:  0 plast: 11

----------------- ntasks: 2
task:   0 kfirst: 0 klast: 1 pfirst:  0 plast:  5
task:   1 kfirst: 2 klast: 3 pfirst:  6 plast: 11

----------------- ntasks: 3
task:   0 kfirst: 0 klast: 1 pfirst:  0 plast:  3
task:   1 kfirst: 1 klast: 2 pfirst:  4 plast:  7
task:   2 kfirst: 2 klast: 3 pfirst:  8 plast: 11

----------------- ntasks: 4
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  2
task:   1 kfirst: 1 klast: 1 pfirst:  3 plast:  5
task:   2 kfirst: 2 klast: 2 pfirst:  6 plast:  8
task:   3 kfirst: 3 klast: 3 pfirst:  9 plast: 11

----------------- ntasks: 5
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  1
task:   1 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   2 kfirst: 1 klast: 2 pfirst:  4 plast:  6
task:   3 kfirst: 2 klast: 2 pfirst:  7 plast:  8
task:   4 kfirst: 3 klast: 3 pfirst:  9 plast: 11

----------------- ntasks: 6
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  1
task:   1 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   2 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   3 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   4 kfirst: 2 klast: 3 pfirst:  8 plast:  9
task:   5 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 7
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  2
task:   2 kfirst: 1 klast: 1 pfirst:  3 plast:  4
task:   3 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   4 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   5 kfirst: 2 klast: 3 pfirst:  8 plast:  9
task:   6 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 8
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  2
task:   2 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   3 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   4 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   5 kfirst: 2 klast: 2 pfirst:  7 plast:  8
task:   6 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   7 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 9
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   3 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   4 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   5 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   6 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   7 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   8 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 10
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   5 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   6 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   7 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   8 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   9 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 11
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   5 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   6 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   7 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   8 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   9 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  10 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 12
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   5 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   6 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   7 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   8 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   9 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  10 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  11 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 13
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   6 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   7 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   8 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   9 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  10 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  11 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  12 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 14
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   6 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   7 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   9 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  10 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  11 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  12 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  13 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 15
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   7 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   9 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  10 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  11 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  12 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  13 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  14 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 16
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   7 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  10 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  11 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  12 kfirst: 3 klast: 3 pfirst:  9 plast:  8
task:  13 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  14 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  15 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 17
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  10 kfirst: 2 klast: 2 pfirst:  7 plast:  6
task:  11 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  12 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  13 kfirst: 3 klast: 3 pfirst:  9 plast:  8
task:  14 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  15 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  16 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 18
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:  10 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  11 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  12 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  13 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  14 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  15 kfirst: 3 klast: 3 pfirst: 10 plast:  9
task:  16 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  17 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 19
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  0
task:   3 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  2
task:   6 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  4
task:   9 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:  10 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:  11 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  12 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  13 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  14 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  15 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  16 kfirst: 3 klast: 3 pfirst: 10 plast:  9
task:  17 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  18 kfirst: 3 klast: 3 pfirst: 11 plast: 11

  10x10 GraphBLAS float matrix, hypersparse by col
  empty C for size, no entries, memory: 240 bytes

size of C: 240 bytes

  100x1 GraphBLAS float vector, sparse by col
  empty w for size, no entries, memory: 232 bytes

size of w: 232 bytes

  1x1 GraphBLAS float scalar, sparse by col
  empty scalar for size, no entries, memory: 232 bytes

size of scalar: 232 bytes

  10x10 GraphBLAS float matrix, hypersparse by col
  non-empty C for size (with pending), 1 entry, memory: 5.4 KB
  pending tuples: 7 max pending: 256 zombies: 0

    (0,1)    0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 2    1
    row: 2 col: 3    2
    row: 3 col: 4    3
    row: 4 col: 5    4
    row: 5 col: 6    5
    row: 6 col: 7    6
    row: 7 col: 8    7
  pending operator: implicit 2nd

size of C: 5480 bytes

  100x1 GraphBLAS float vector, sparse by col
  non-empty w for size (with pending), 1 entry, memory: 3.3 KB
  pending tuples: 7 max pending: 256 zombies: 0

    (0,0)    0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 0    1
    row: 2 col: 0    2
    row: 3 col: 0    3
    row: 4 col: 0    4
    row: 5 col: 0    5
    row: 6 col: 0    6
    row: 7 col: 0    7
  pending operator: implicit 2nd

size of w: 3424 bytes

  1x1 GraphBLAS float scalar, full by col
  non-empty scalar for size, 1 entry, memory: 224 bytes
  iso value:    3

    (0,0)    3
size of scalar: 224 bytes

  10x10 GraphBLAS float matrix, sparse by col
  non-empty C for size (no pending), 8 entries, memory: 496 bytes

    (0,1)    0
    (1,2)    1
    (2,3)    2
    (3,4)    3
    (4,5)    4
    (5,6)    5
    (6,7)    6
    (7,8)    7

size of C: 496 bytes

  100x1 GraphBLAS float vector, bitmap by col
  non-empty w for size (no pending), 8 entries, memory: 716 bytes

    (0,0)    0
    (1,0)    1
    (2,0)    2
    (3,0)    3
    (4,0)    4
    (5,0)    5
    (6,0)    6
    (7,0)    7

size of w: 716 bytes

GB_mex_about3: all tests passed


  1x3 GraphBLAS int32_t matrix, bitmap by row
  A for v5.1.7 test: initial, 3 entries, memory: 236 bytes

    (0,0)   -3
    (0,1)   10
    (0,2)   -4


  1x3 GraphBLAS int32_t matrix, bitmap by row
  A for v5.1.7 test: spones(A), 3 entries, memory: 232 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1


GB_mex_about4: all tests passed, time: 0.000415087


    GraphBLAS IndexUnaryOp: rowindex32 (built-in): z=rowindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: rowindex64 (built-in): z=rowindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colindex32 (built-in): z=colindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: colindex64 (built-in): z=colindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: diagindex32 (built-in): z=diagindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: diagindex64 (built-in): z=diagindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: tril (built-in): z=tril(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: triu (built-in): z=triu(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: diag (built-in): z=diag(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: offdiag (built-in): z=offdiag(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colle (built-in): z=colle(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colgt (built-in): z=colgt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: rowle (built-in): z=rowle(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: rowgt (built-in): z=rowgt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_bool (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valueeq_int8 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valueeq_int16 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valueeq_int32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valueeq_int64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_uint8 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valueeq_uint16 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valueeq_uint32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valueeq_uint64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_fp32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valueeq_fp64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valueeq_fc32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float complex size: 8
    GraphBLAS type: ytype float complex size: 8

    GraphBLAS IndexUnaryOp: valueeq_fc64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double complex size: 16
    GraphBLAS type: ytype double complex size: 16

    GraphBLAS IndexUnaryOp: valuene_bool (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuene_int8 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuene_int16 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuene_int32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuene_int64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuene_uint8 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuene_uint16 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuene_uint32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuene_uint64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuene_fp32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuene_fp64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuene_fc32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float complex size: 8
    GraphBLAS type: ytype float complex size: 8

    GraphBLAS IndexUnaryOp: valuene_fc64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double complex size: 16
    GraphBLAS type: ytype double complex size: 16

    GraphBLAS IndexUnaryOp: valuelt_bool (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuelt_int8 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuelt_int16 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuelt_int32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuelt_int64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuelt_uint8 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuelt_uint16 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuelt_uint32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuelt_uint64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuelt_fp32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuelt_fp64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuele_bool (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuele_int8 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuele_int16 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuele_int32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuele_int64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuele_uint8 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuele_uint16 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuele_uint32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuele_uint64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuele_fp32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuele_fp64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuegt_bool (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuegt_int8 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuegt_int16 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuegt_int32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuegt_int64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuegt_uint8 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuegt_uint16 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuegt_uint32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuegt_uint64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuegt_fp32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuegt_fp64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuege_bool (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuege_int8 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuege_int16 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuege_int32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuege_int64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuege_uint8 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuege_uint16 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuege_uint32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuege_uint64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuege_fp32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuege_fp64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: nothing NULL

    GraphBLAS IndexUnaryOp: plus     IndexUnaryOp has an invalid opcode

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void banded_idx                        
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    if (d < 0) d = -d ;                
    (*z) = (d <= *thunk) ;             
}

    GraphBLAS IndexUnaryOp: upperbanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

    GraphBLAS IndexUnaryOp: upperbanded64 (user-defined): z=upperbanded_idx_int64(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx_int64                     
(                                              
    int64_t *z,                                
    const int64_t *x,   // unused              
    int64_t i,                                 
    int64_t j,                                 
    const int64_t *thunk                       
)                                              
{                                              
    int64_t d = j-i ;                          
    (*z) = (int64_t) (d >= 0 && d <= *thunk) ; 
}

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a7/GB_jit__select_bitmap__06fe18866a__banded_idx.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a7/GB_jit__select_bitmap__06fe18866a__banded_idx.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/a7/libGB_jit__select_bitmap__06fe18866a__banded_idx.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a7/GB_jit__select_bitmap__06fe18866a__banded_idx.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.114 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 0
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   3.19e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/57/GB_jit__select_bitmap__06fe18888a__banded_idx.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/57/GB_jit__select_bitmap__06fe18888a__banded_idx.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/57/libGB_jit__select_bitmap__06fe18888a__banded_idx.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/57/GB_jit__select_bitmap__06fe18888a__banded_idx.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.109 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 1
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.31e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   3.19e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/bf/GB_jit__select_bitmap__36fe18866a__banded_idx.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/bf/GB_jit__select_bitmap__36fe18866a__banded_idx.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/bf/libGB_jit__select_bitmap__36fe18866a__banded_idx.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/bf/GB_jit__select_bitmap__36fe18866a__banded_idx.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.113 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 2
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.22e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.12e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   4.2e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a6/GB_jit__select_bitmap__36fe18888a__banded_idx.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a6/GB_jit__select_bitmap__36fe18888a__banded_idx.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/a6/libGB_jit__select_bitmap__36fe18888a__banded_idx.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/a6/GB_jit__select_bitmap__36fe18888a__banded_idx.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.12 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 3
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   2.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   3.7e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: run) (jit: run) (sparse to bitmap) 
   3.31e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 4
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   2.98e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.01e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: run) (jit: run) (sparse to bitmap) 
   3.19e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 5
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.5e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.48e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: run) (jit: run) (sparse to bitmap) 
   3e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 6
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.31e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: run) (jit: run) (sparse to bitmap) 
   2.79e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 7
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.81e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.91e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/3c/GB_jit__select_bitmap__06fe68866a__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/3c/GB_jit__select_bitmap__06fe68866a__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/3c/libGB_jit__select_bitmap__06fe68866a__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/3c/GB_jit__select_bitmap__06fe68866a__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.11 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 8
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   2.31e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/4d/GB_jit__select_bitmap__06fe68888a__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/4d/GB_jit__select_bitmap__06fe68888a__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/4d/libGB_jit__select_bitmap__06fe68888a__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/4d/GB_jit__select_bitmap__06fe68888a__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.113 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 9
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   2.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f1/GB_jit__select_bitmap__36fe68866a__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f1/GB_jit__select_bitmap__36fe68866a__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/f1/libGB_jit__select_bitmap__36fe68866a__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f1/GB_jit__select_bitmap__36fe68866a__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.111 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 10
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.31e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   2.31e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/8a/GB_jit__select_bitmap__36fe68888a__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/8a/GB_jit__select_bitmap__36fe68888a__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/8a/libGB_jit__select_bitmap__36fe68888a__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/8a/GB_jit__select_bitmap__36fe68888a__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) 
   0.109 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 11
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   2.48e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/27/GB_jit__select_phase1__06fe688665__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/27/GB_jit__select_phase1__06fe688665__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/27/libGB_jit__select_phase1__06fe688665__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/27/GB_jit__select_phase1__06fe688665__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/28/GB_jit__select_phase2__06fe688665__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/28/GB_jit__select_phase2__06fe688665__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/28/libGB_jit__select_phase2__06fe688665__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/28/GB_jit__select_phase2__06fe688665__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (sparse to bitmap) 
   0.242 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 12
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   6.01e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/c6/GB_jit__select_phase1__06fe688885__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/c6/GB_jit__select_phase1__06fe688885__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/c6/libGB_jit__select_phase1__06fe688885__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/c6/GB_jit__select_phase1__06fe688885__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/e6/GB_jit__select_phase2__06fe688885__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/e6/GB_jit__select_phase2__06fe688885__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/e6/libGB_jit__select_phase2__06fe688885__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/e6/GB_jit__select_phase2__06fe688885__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (sparse to bitmap) 
   0.237 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 13
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.2e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f2/GB_jit__select_phase1__36fe688665__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f2/GB_jit__select_phase1__36fe688665__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/f2/libGB_jit__select_phase1__36fe688665__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/f2/GB_jit__select_phase1__36fe688665__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/54/GB_jit__select_phase2__36fe688665__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/54/GB_jit__select_phase2__36fe688665__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/54/libGB_jit__select_phase2__36fe688665__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/54/GB_jit__select_phase2__36fe688665__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (sparse to bitmap) 
   0.231 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 14
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.01e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/2a/GB_jit__select_phase1__36fe688885__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/2a/GB_jit__select_phase1__36fe688885__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/2a/libGB_jit__select_phase1__36fe688885__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/2a/GB_jit__select_phase1__36fe688885__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (jit: compile and load) (jit: /usr/bin/gcc -DGB_JIT_RUNTIME=1  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC  -I/home/davis/.SuiteSparse/GraphBLAS/8.0.0/src  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/ff/GB_jit__select_phase2__36fe688885__banded_idx_32.o -c /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/ff/GB_jit__select_phase2__36fe688885__banded_idx_32.c    ; /usr/bin/gcc  -DGBMATLAB=1  -Wundef  -std=c11 -lm -Wno-pragmas  -fexcess-precision=fast  -fcx-limited-range  -fno-math-errno  -fwrapv  -O3 -DNDEBUG -fopenmp  -fPIC   -shared  -o /home/davis/.SuiteSparse/GraphBLAS/8.0.0/lib/ff/libGB_jit__select_phase2__36fe688885__banded_idx_32.so /home/davis/.SuiteSparse/GraphBLAS/8.0.0/c/ff/GB_jit__select_phase2__36fe688885__banded_idx_32.o  -lm -ldl /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so /usr/lib/x86_64-linux-gnu/libpthread.so   ) (sparse to bitmap) 
   0.231 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 15
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.72e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   1.81e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.22e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype NULL
    IndexUnaryOp has an invalid ztype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype NULL
    IndexUnaryOp has an invalid ytype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype unknown type
    IndexUnaryOp has an invalid xtype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    IndexUnaryOp has a NULL function pointer

    GraphBLAS Operator: banded: invalid opcode

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void banded_idx                        
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    if (d < 0) d = -d ;                
    (*z) = (d <= *thunk) ;             
}

    GraphBLAS BinaryOp: plus (built-in): z=plus(x,y)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS UnaryOp: abs (built-in): z=abs(x)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4

    GraphBLAS IndexUnaryOp: tril_idx (built-in): z=tril(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS SelectOp: tril_selectop: C=tril(A,k)

    GraphBLAS Operator: null: NULL

    GraphBLAS BinaryOp: ignore_dup ignore_dup

  4x4 GraphBLAS mytype matrix, bitmap by col
  A of MyType, 1 entry, memory: 240 bytes
  iso value: [user-defined value]

    (2,3) [user-defined value]

error expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_apply_IndexOp_INT32 (C, M, accum, op, A, thunk, desc)
Incompatible type for z=banded_idx(x,i,j,thunk):
input A of type [mytype]
cannot be typecast to x input of type [int64_t]
error expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_apply_IndexOp_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for z=banded_idx(x,i,j,thunk):
input scalar of type [mytype]
cannot be typecast to thunk input of type [int64_t]

  4x4 GraphBLAS mytype matrix, bitmap by col
  C of MyType, 1 entry, memory: 240 bytes
  iso value: [user-defined value]

    (2,3) [user-defined value]

size of mytype: 8

  3x4 GraphBLAS float matrix, bitmap by col
  A for serialize, 2 entries, memory: 276 bytes

    (1,1)    9.1
    (2,2)    1.1


  3x4 GraphBLAS float matrix, bitmap by col
  C from deserialize, 2 entries, memory: 276 bytes

    (1,1)    9.1
    (2,2)    1.1


    GraphBLAS Descriptor: desc with secure import 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure

    GraphBLAS Descriptor: desc with secure import 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure

    GraphBLAS Descriptor: desc with secure & lz4hc+4 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure
    d.compression = 2005

  100x100 GraphBLAS float matrix, hypersparse by col
  A conformed, 1 entry, memory: 528 bytes
  iso value:    1

    (0,0)    1


  4x4 GraphBLAS float matrix, full by col
  A iso to export, 16 entries, memory: 224 bytes
  iso value:    2

    (0,0)    2
    (1,0)    2
    (2,0)    2
    (3,0)    2
    (0,1)    2
    (1,1)    2
    (2,1)    2
    (3,1)    2
    (0,2)    2
    (1,2)    2
    (2,2)    2
    (3,2)    2
    (0,3)    2
    (1,3)    2
    (2,3)    2
    (3,3)    2
(1)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input A type [double]
cannot be typecast to operator input of type [mytype]
(2)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input A type [double]
cannot be typecast to operator input of type [mytype]
(3)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input Thunk type [double] and op thunk type [mytype] not compatible
(4)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Output of user-defined IndexUnaryOp donothing is mytype
which cannot be typecasted to bool


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select output, 5 entries, memory: 312 bytes
  iso value:    3

    (0,0)    3
    (1,1)    3
    (2,2)    3
    (3,3)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLLE output, 3 entries, memory: 296 bytes
  iso value:    3

    (0,0)    3
    (1,1)    3
    (2,2)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLGT output, 10 entries, memory: 352 bytes
  iso value:    3

    (0,3)    3
    (1,3)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (0,4)    3
    (1,4)    3
    (2,4)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select ROWGT output, 10 entries, memory: 352 bytes
  iso value:    3

    (3,0)    3
    (4,0)    3
    (3,1)    3
    (4,1)    3
    (3,2)    3
    (4,2)    3
    (3,3)    3
    (4,3)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLINDEX output, 20 entries, memory: 432 bytes
  iso value:    3

    (0,0)    3
    (1,0)    3
    (2,0)    3
    (3,0)    3
    (4,0)    3
    (0,1)    3
    (1,1)    3
    (2,1)    3
    (3,1)    3
    (4,1)    3
    (0,3)    3
    (1,3)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (0,4)    3
    (1,4)    3
    (2,4)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select Banded output, 13 entries, memory: 376 bytes
  iso value:    3

    (0,0)    3
    (1,0)    3
    (0,1)    3
    (1,1)    3
    (2,1)    3
    (1,2)    3
    (2,2)    3
    (3,2)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (3,4)    3
    (4,4)    3


  5x1 GraphBLAS int64_t vector, bitmap by col
  w for select Banded, 5 entries, memory: 264 bytes

    (0,0)   0
    (1,0)   1
    (2,0)   2
    (3,0)   3
    (4,0)   4


  5x1 GraphBLAS int64_t vector, bitmap by col
  w from select Banded output, 2 entries, memory: 264 bytes

    (0,0)   0
    (1,0)   1


  5x1 GraphBLAS int64_t vector, full by col
  w for apply Banded , 5 entries, memory: 224 bytes
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3

  5x1 GraphBLAS int64_t vector, full by col
  w from apply Banded output, 5 entries, memory: 256 bytes

    (0,0)   1
    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0


  5x5 GraphBLAS int64_t matrix, full by col
  A for apply Banded , 25 entries, memory: 224 bytes
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3
    (0,1)   3
    (1,1)   3
    (2,1)   3
    (3,1)   3
    (4,1)   3
    (0,2)   3
    (1,2)   3
    (2,2)   3
    (3,2)   3
    (4,2)   3
    (0,3)   3
    (1,3)   3
    (2,3)   3
    (3,3)   3
    (4,3)   3
    (0,4)   3
    (1,4)   3
    (2,4)   3
    (3,4)   3
    (4,4)   3

  5x5 GraphBLAS int64_t matrix, full by col
  A from apply Banded output, 25 entries, memory: 416 bytes

    (0,0)   1
    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1


  5x4 GraphBLAS int64_t matrix, full by col
  A iso, 20 entries, memory: 224 bytes
  iso value:   1

    (0,0)   1
    (1,0)   1
    (2,0)   1
    (3,0)   1
    (4,0)   1
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   1
    (4,1)   1
    (0,2)   1
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   1
    (0,3)   1
    (1,3)   1
    (2,3)   1
    (3,3)   1
    (4,3)   1
 [ GrB_apply (in-place-op) 
   1e-05 sec ]

  5x4 GraphBLAS int64_t matrix, full by col
  A after apply rowindex, 20 entries, memory: 376 bytes

    (0,0)   0
    (1,0)   1
    (2,0)   2
    (3,0)   3
    (4,0)   4
    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (0,2)   0
    (1,2)   1
    (2,2)   2
    (3,2)   3
    (4,2)   4
    (0,3)   0
    (1,3)   1
    (2,3)   2
    (3,3)   3
    (4,3)   4


GB_mex_about5: all tests passed

expected error:
GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
alpha cannot be an empty scalar

expected error:
GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
beta cannot be an empty scalar


  1x1 GraphBLAS myint scalar, full by col
  alpha, 1 entry, memory: 224 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]

  1x1 GraphBLAS double scalar, sparse by col
  beta, no entries, memory: 232 bytes

expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
alpha scalar of type [myint]
cannot be typecast to op input of type [double]
expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
beta scalar of type [myint]
cannot be typecast to op input of type [double]
expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_reduce_BinaryOp_Scalar (s, accum, binaryop, A, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same

expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Vector_reduce_BinaryOp_Scalar (s, accum, binaryop, u, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same

expected error:
GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp_Scalar (s, accum, binaryop, A, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid

expected error:
GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Vector_reduce_BinaryOp_Scalar (s, accum, binaryop, u, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid


GB_mex_about6: all tests passed


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A valid, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


invalid A->p:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->p is too small!

invalid A->h:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->h is too small!

invalid A->Y:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with invalid A->Y, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid
  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with invalid A->Y (wrong type), 1 entry, memory: 496 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid
  100x100 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A valid (sparse), 1 entry, memory: 1.0 KB
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A with invalid A->Y (not hyper), 1 entry, memory: 1.2 KB
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A valid (hypersparse), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B valid (shallow hypersparse: print_mem_shallow true), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B valid (shallow hypersparse: print_mem_shallow false), 1 entry, memory: 256 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B, 1 entry, memory: 256 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A still valid (hypersparse), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A hypersparse (pack did nothing), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->Y invalid (not found) , 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->Y invalid (wrong k) , 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  1048576x1048576 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A->Y with many collisions, 1024 entries, memory: 68.6 KB

    (0,0)    2
    (1,1)    2
    (2,2)    2
    (3,3)    2
    (1640,1640)    2
    (1641,1641)    2
    (1642,1642)    2
    (1643,1643)    2
    (3280,3280)    2
    (3281,3281)    2
    (3282,3282)    2
    (3283,3283)    2
    (6492,6492)    2
    (6493,6493)    2
    (6494,6494)    2
    (6495,6495)    2
    (8132,8132)    2
    (8133,8133)    2
    (8134,8134)    2
    (8135,8135)    2
    (11344,11344)    2
    (11345,11345)    2
    (11346,11346)    2
    (11347,11347)    2
    (12984,12984)    2
    (12985,12985)    2
    (12986,12986)    2
    (12987,12987)    2
    (16196,16196)    2
    ...

  1048576x1048576 GraphBLAS double matrix, sparse (jumbled) by col
  sparsity control: sparse only
  C<A>=A'*A, 1024 entries, memory: 8.0 MB

    (0,0)    4
    (1,1)    4
    (2,2)    4
    (3,3)    4
    (1640,1640)    4
    (1641,1641)    4
    (1642,1642)    4
    (1643,1643)    4
    (3280,3280)    4
    (3281,3281)    4
    (3282,3282)    4
    (3283,3283)    4
    (6492,6492)    4
    (6493,6493)    4
    (6494,6494)    4
    (6495,6495)    4
    (8132,8132)    4
    (8133,8133)    4
    (8134,8134)    4
    (8135,8135)    4
    (11344,11344)    4
    (11345,11345)    4
    (11346,11346)    4
    (11347,11347)    4
    (12984,12984)    4
    (12985,12985)    4
    (12986,12986)    4
    (12987,12987)    4
    (16196,16196)    4
    ...

avx2: 0 avx512f: 0
GraphBLAS compiled with:
[GNU gcc 7.5.0] [v7.5.0]

GB_mex_about7: all tests passed


  0x0 GraphBLAS int64_t matrix, full by col
  M_0, no entries, memory: 224 bytes
  iso value:   1

  0x1 GraphBLAS int64_t vector, full by col
  v_0, no entries, memory: 224 bytes
  iso value:   1

  0x1 GraphBLAS int64_t vector, full by col
  v_1, no entries, memory: 224 bytes
  iso value:   1

GB_mex_about8: all tests passed

compiler: GNU gcc 7.5.0 7.5.0
 [ GrB_transpose (transpose) 
   2.1e-05 sec ]
test time 0.000150919 sec, max threads 4

GB_mex_about10: all tests passed

    GraphBLAS type: (256-byte big type) user-defined: [bigtype] size: 256
    typedef struct { double stuff [32] ; } bigtype

    GraphBLAS UnaryOp: f1 (user-defined): z=f1(x)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
void f1 (void *z, const void *x) { (*((double *)z)) = 2*(*(double *)x) ; } 

    GraphBLAS BinaryOp: f2 (user-defined): z=f2(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8
void f2 (void *z, const void *x, const void *y) { (*((double *)z)) = 2*(*(double *)x) + 1 ; }   

    GraphBLAS IndexUnaryOp: i1 (user-defined): z=i1(x,i,j,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8
void i1 (void *z, const void *x, GrB_Index i, GrB_Index j,  const void *thunk) { (*((bool *)z)) = (i == j) ; }

  10x10 GraphBLAS float matrix, hypersparse by col
  empty matrix, no entries, memory: 240 bytes


reduce empty matrix to non-opaque scalar via ANY: 0

  1x1 GraphBLAS float scalar, full by col
  scalar == 33, 1 entry, memory: 224 bytes
  iso value:    33

    (0,0)    33

reduce empty matrix to opaque scalar via ANY:

  1x1 GraphBLAS float scalar, sparse by col
  empty scalar, no entries, memory: 232 bytes


GB_mex_about9: all tests passed


test01: all tests passed
26-Apr 22:56:42 test01         11.0 sec  2163: 19040 of 21586  11.8%   196.51/s [malloc] [cover]
jit: 5

======== test: test01      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A before set, no entries, memory: 240 bytes


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after set, no entries, memory: 4.3 KB
  iso value:   314159
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after remove, 1 entry, memory: 256 bytes
  iso value:   314159
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  10x10 GraphBLAS int32_t matrix, hypersparse by col
  A after set again, no entries, memory: 5.4 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0   99099
  pending operator: implicit 2nd


  10x1 GraphBLAS int32_t vector, sparse by col
  victor before set, no entries, memory: 232 bytes


  10x1 GraphBLAS int32_t vector, sparse by col
  victor after set, no entries, memory: 2.3 KB
  iso value:   44
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd


  10x1 GraphBLAS int32_t vector, sparse by col
  victor remove set, 1 entry, memory: 248 bytes
  iso value:   44
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  10x1 GraphBLAS int32_t vector, sparse by col
  victor after set again, no entries, memory: 3.3 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0   88
  pending operator: implicit 2nd


  1x1 GraphBLAS int32_t scalar, sparse by col
  scalar before set, no entries, memory: 232 bytes


  1x1 GraphBLAS int32_t scalar, full by col
  scalar after set, 1 entry, memory: 224 bytes
  iso value:   404

    (0,0)   404

  1x1 GraphBLAS int32_t scalar, full by col
  scalar after extract, 1 entry, memory: 224 bytes
  iso value:   404

    (0,0)   404

  1x1 GraphBLAS int32_t scalar, bitmap by col
  scalar after remove, no entries, memory: 232 bytes
  iso value:   404


  1x1 GraphBLAS int32_t scalar, bitmap by col
  scalar after wait, 1 entry, memory: 232 bytes

    (0,0)   707


  1x1 GraphBLAS int32_t scalar, sparse by col
  sparsity control: sparse only
  scalar with zombie, 1 entry, memory: 248 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie


  1x1 GraphBLAS int32_t scalar, sparse by col
  sparsity control: sparse only
  scalar after extract, no entries, memory: 248 bytes

expected error: 
Slice:  0 0 0 0 0 0 0 0 0 0 10

  10x10 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  valid matrix, 100 entries, memory: 1.1 KB
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3
    (5,0)   3
    (6,0)   3
    (7,0)   3
    (8,0)   3
    (9,0)   3
    (0,1)   3
    (1,1)   3
    (2,1)   3
    (3,1)   3
    (4,1)   3
    (5,1)   3
    (6,1)   3
    (7,1)   3
    (8,1)   3
    (9,1)   3
    (0,2)   3
    (1,2)   3
    (2,2)   3
    (3,2)   3
    (4,2)   3
    (5,2)   3
    (6,2)   3
    (7,2)   3
    (8,2)   3
    ...

  10x10 GraphBLAS int32_t matrix invalid structure

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  sparsity control: 999 invalid

  10x10 GraphBLAS int32_t matrix, full (jumbled) by col
  full matrix cannot be jumbled, 100 entries, memory: 224 bytes
  iso value:   3
  full matrix cannot be jumbled

  10x10 GraphBLAS int32_t matrix, full by col
  invalid full matrix structure

  10x10 GraphBLAS int32_t matrix, full by col
  full matrix cannot have zombies, 100 entries, memory: 224 bytes
  iso value:   3
  pending tuples: 0 max pending: 0 zombies: 1
  full matrix cannot have zombies

  10x10 GraphBLAS int32_t matrix, full by col
  full matrix cannot have pending tuples, 100 entries, memory: 5.3 KB
  iso value:   3
  pending tuples: 0 max pending: 256 zombies: 0
  full matrix cannot have pending tuples

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap matrix structure

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap, no entries, memory: 716 bytes
  invalid bitmap count: 1 exist but A->nvals = 0

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  valid matrix, 1 entry, memory: 324 bytes
  iso value:   12345

    (0,0)   12345

  10x10 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  invalid bitmap, 1 entry, memory: 324 bytes
  iso value:   12345

    invalid bitmap 3

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  invalid nvec_nonempty, no entries, memory: 240 bytes
  invalid count of non-empty vectors

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  valid matrix with 1 pending, no entries, memory: 4.3 KB
  iso value:   12345
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  invalid pending type, no entries, memory: 4.3 KB
  iso value:   12345
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  int32_t size: 4
  matrix has an invalid Pending->type
 [ GrB_extract (C dense) 
   2.88e-05 sec ]

  10x0 GraphBLAS int32_t matrix, full by col
  C = A (:,1:0:1), no entries, memory: 224 bytes

 [ GrB_extract (C dense) 
   1.31e-05 sec ]

  0x10 GraphBLAS int32_t matrix, full by col
  C = A (1:0:1,:), no entries, memory: 224 bytes

expected error: GraphBLAS error: GrB_EMPTY_OBJECT
function: GrB_Matrix_apply_BinaryOp2nd_Scalar (C, M, accum, op, A, y, desc)
Scalar must contain an entry

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = replace    (invalid value for this field)
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     
    Descriptor field set to an invalid value

  10x10 GraphBLAS int32_t matrix, hypersparse by col
  empty, no entries, memory: 248 bytes

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_INT32 (C, I, J, X, nvals, dup)
Positional op z=firsti(x,y) not supported as dup op

vector bitmap switch: 0.04

error expected: GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=firsti(x,y) has no equivalent monoid


  3x3 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  wild matrix, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  3x3 GraphBLAS wild matrix, sparse (jumbled) by col
  sparsity control: sparse only
  wild matrix jumbled, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (1,0) [user-defined value]
    (0,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  3x3 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  wild matrix unjumbled, 9 entries, memory: 384 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]

  1152921504606846976x1152921504606846976 GraphBLAS float matrix, hypersparse by col
  huge matrix, 1 entry, memory: 528 bytes
  iso value:    3

    (0,0)    3

 ======================== split/concat tests:  [ GxB_set 
   0 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 21: (C full) = scalar (full to sparse) (sparse to hyper) 
   2.72e-05 sec ]
 [ GxB_Matrix_split (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   5.91e-05 sec ]

  5x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [0], 60 entries, memory: 960 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [1], 40 entries, memory: 736 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [2], 180 entries, memory: 1.9 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [3], 120 entries, memory: 1.3 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set 
   0 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) (bitmap to sparse) (sparse to hyper) 
   3.91e-05 sec ]
 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set 
   9.54e-07 sec ]
 [ GxB_Matrix_split (iso wait:A 0 zombies, 20 pending) (iso build) (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   6.39e-05 sec ]

  5x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [0], 5 entries, memory: 408 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [1], no entries, memory: 312 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [2], 7 entries, memory: 456 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, hypersparse by col
  sparsity control: hypersparse only
  Tiles [3], 8 entries, memory: 480 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set 
   0 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (sparse to hyper) 
   2.81e-05 sec ]
 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (hyper to sparse) 
   6.91e-06 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 21: (C full) = scalar (full to sparse) 
   1.98e-05 sec ]
 [ GxB_Matrix_split (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   5.29e-05 sec ]

  5x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [0], 60 entries, memory: 864 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [1], 40 entries, memory: 672 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [2], 180 entries, memory: 1.8 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [3], 120 entries, memory: 1.3 KB
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (hyper to sparse) 
   2e-05 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) (bitmap to sparse) 
   4.41e-05 sec ]
 [ GxB_Matrix_concat 
   5.01e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   4.05e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   9.54e-07 sec ]
 [ GxB_set (hyper to sparse) 
   7.15e-06 sec ]
 [ GxB_Matrix_split (iso wait:A 0 zombies, 20 pending) (iso build) (hyper to sparse) (iso split) (sparse/hyper split) (iso sparse split) (iso sparse split) (iso sparse split) (iso sparse split) 
   9.61e-05 sec ]

  5x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [0], 5 entries, memory: 424 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [1], no entries, memory: 360 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [2], 7 entries, memory: 440 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, sparse by col
  sparsity control: sparse only
  Tiles [3], 8 entries, memory: 416 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (hyper to sparse) 
   8.11e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) 
   2.5e-05 sec ]
 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.86e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   9.54e-07 sec ]
 [ GxB_set (jit: undefined) 
   2.41e-05 sec ]
 [ GrB_assign (C iso assign) Method:bit6:whole C = scalar (full to bitmap) 
   3.1e-05 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   2.6e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [0], 60 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [1], 40 entries, memory: 320 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [2], 180 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]
    (0,8) [user-defined value]
    (1,8) [user-defined value]
    (2,8) [user-defined value]
    (3,8) [user-defined value]
    (4,8) [user-defined value]
    (5,8) [user-defined value]
    (6,8) [user-defined value]
    (7,8) [user-defined value]
    (8,8) [user-defined value]
    (9,8) [user-defined value]
    (10,8) [user-defined value]
    (11,8) [user-defined value]
    (12,8) [user-defined value]
    (13,8) [user-defined value]
    (14,8) [user-defined value]
    (0,9) [user-defined value]
    (1,9) [user-defined value]
    (2,9) [user-defined value]
    (3,9) [user-defined value]
    (4,9) [user-defined value]
    (5,9) [user-defined value]
    (6,9) [user-defined value]
    (7,9) [user-defined value]
    (8,9) [user-defined value]
    (9,9) [user-defined value]
    (10,9) [user-defined value]
    (11,9) [user-defined value]
    (12,9) [user-defined value]
    (13,9) [user-defined value]
    (14,9) [user-defined value]
    (0,10) [user-defined value]
    (1,10) [user-defined value]
    (2,10) [user-defined value]
    (3,10) [user-defined value]
    (4,10) [user-defined value]
    (5,10) [user-defined value]
    (6,10) [user-defined value]
    (7,10) [user-defined value]
    (8,10) [user-defined value]
    (9,10) [user-defined value]
    (10,10) [user-defined value]
    (11,10) [user-defined value]
    (12,10) [user-defined value]
    (13,10) [user-defined value]
    (14,10) [user-defined value]
    (0,11) [user-defined value]
    (1,11) [user-defined value]
    (2,11) [user-defined value]
    (3,11) [user-defined value]
    (4,11) [user-defined value]
    (5,11) [user-defined value]
    (6,11) [user-defined value]
    (7,11) [user-defined value]
    (8,11) [user-defined value]
    (9,11) [user-defined value]
    (10,11) [user-defined value]
    (11,11) [user-defined value]
    (12,11) [user-defined value]
    (13,11) [user-defined value]
    (14,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [3], 120 entries, memory: 400 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    (14,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (5,2) [user-defined value]
    (6,2) [user-defined value]
    (7,2) [user-defined value]
    (8,2) [user-defined value]
    (9,2) [user-defined value]
    (10,2) [user-defined value]
    (11,2) [user-defined value]
    (12,2) [user-defined value]
    (13,2) [user-defined value]
    (14,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (5,3) [user-defined value]
    (6,3) [user-defined value]
    (7,3) [user-defined value]
    (8,3) [user-defined value]
    (9,3) [user-defined value]
    (10,3) [user-defined value]
    (11,3) [user-defined value]
    (12,3) [user-defined value]
    (13,3) [user-defined value]
    (14,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (5,4) [user-defined value]
    (6,4) [user-defined value]
    (7,4) [user-defined value]
    (8,4) [user-defined value]
    (9,4) [user-defined value]
    (10,4) [user-defined value]
    (11,4) [user-defined value]
    (12,4) [user-defined value]
    (13,4) [user-defined value]
    (14,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    (4,5) [user-defined value]
    (5,5) [user-defined value]
    (6,5) [user-defined value]
    (7,5) [user-defined value]
    (8,5) [user-defined value]
    (9,5) [user-defined value]
    (10,5) [user-defined value]
    (11,5) [user-defined value]
    (12,5) [user-defined value]
    (13,5) [user-defined value]
    (14,5) [user-defined value]
    (0,6) [user-defined value]
    (1,6) [user-defined value]
    (2,6) [user-defined value]
    (3,6) [user-defined value]
    (4,6) [user-defined value]
    (5,6) [user-defined value]
    (6,6) [user-defined value]
    (7,6) [user-defined value]
    (8,6) [user-defined value]
    (9,6) [user-defined value]
    (10,6) [user-defined value]
    (11,6) [user-defined value]
    (12,6) [user-defined value]
    (13,6) [user-defined value]
    (14,6) [user-defined value]
    (0,7) [user-defined value]
    (1,7) [user-defined value]
    (2,7) [user-defined value]
    (3,7) [user-defined value]
    (4,7) [user-defined value]
    (5,7) [user-defined value]
    (6,7) [user-defined value]
    (7,7) [user-defined value]
    (8,7) [user-defined value]
    (9,7) [user-defined value]
    (10,7) [user-defined value]
    (11,7) [user-defined value]
    (12,7) [user-defined value]
    (13,7) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   2.72e-05 sec ]
 [ GxB_Matrix_concat (iso bitmap concat) 
   4.41e-05 sec ]
 [ GxB_Matrix_concat 
   4.05e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   3.1e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   7.87e-06 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   1.81e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [0], 5 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [1], no entries, memory: 320 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [2], 7 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: bitmap only
  Tiles [3], 8 entries, memory: 400 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   6.91e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (bitmap to sparse) (bitmap to sparse) (bitmap to sparse) (sparse to bitmap) 
   5.98e-05 sec ]
 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   6.2e-06 sec ]
 [ GrB_assign (C iso assign) Method:bit6:whole C = scalar 
   2e-05 sec ]
 [ GxB_Matrix_split (iso split) (full split) 
   8.11e-06 sec ]

  5x12 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [0], 60 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    ...

  5x8 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [1], 40 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (4,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
    (4,3) [user-defined value]
    (0,4) [user-defined value]
    (1,4) [user-defined value]
    (2,4) [user-defined value]
    (3,4) [user-defined value]
    (4,4) [user-defined value]
    (0,5) [user-defined value]
    (1,5) [user-defined value]
    (2,5) [user-defined value]
    (3,5) [user-defined value]
    ...

  15x12 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [2], 180 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    ...

  15x8 GraphBLAS wild matrix, full by col
  sparsity control: full
  Tiles [3], 120 entries, memory: 280 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (4,0) [user-defined value]
    (5,0) [user-defined value]
    (6,0) [user-defined value]
    (7,0) [user-defined value]
    (8,0) [user-defined value]
    (9,0) [user-defined value]
    (10,0) [user-defined value]
    (11,0) [user-defined value]
    (12,0) [user-defined value]
    (13,0) [user-defined value]
    (14,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (4,1) [user-defined value]
    (5,1) [user-defined value]
    (6,1) [user-defined value]
    (7,1) [user-defined value]
    (8,1) [user-defined value]
    (9,1) [user-defined value]
    (10,1) [user-defined value]
    (11,1) [user-defined value]
    (12,1) [user-defined value]
    (13,1) [user-defined value]
    ...
 [ GxB_set (jit: undefined) 
   6.2e-06 sec ]
 [ GxB_Matrix_concat (iso full concat) 
   5.01e-06 sec ]
 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   0 sec ]
 [ GxB_set (jit: undefined) 
   5.01e-06 sec ]
 [ GxB_Matrix_split (iso split) (bitmap split) 
   2.48e-05 sec ]

  5x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [0], 5 entries, memory: 340 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]


  5x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [1], no entries, memory: 320 bytes
  iso value: [user-defined value]


  15x12 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [2], 7 entries, memory: 460 bytes
  iso value: [user-defined value]

    (0,5) [user-defined value]
    (1,6) [user-defined value]
    (2,7) [user-defined value]
    (3,8) [user-defined value]
    (4,9) [user-defined value]
    (5,10) [user-defined value]
    (6,11) [user-defined value]


  15x8 GraphBLAS wild matrix, bitmap by col
  sparsity control: full
  Tiles [3], 8 entries, memory: 400 bytes
  iso value: [user-defined value]

    (7,0) [user-defined value]
    (8,1) [user-defined value]
    (9,2) [user-defined value]
    (10,3) [user-defined value]
    (11,4) [user-defined value]
    (12,5) [user-defined value]
    (13,6) [user-defined value]
    (14,7) [user-defined value]

 [ GxB_set (jit: undefined) 
   5.96e-06 sec ]
 [ GxB_Matrix_concat (iso sparse concat) (bitmap to sparse) (bitmap to sparse) (bitmap to sparse) (sparse to bitmap) 
   5.41e-05 sec ]
 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{0,0} of type [wild]
cannot be typecast to output of type [float]

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
C is 100-by-100 but Tiles{:,:} is 20-by-20

 [ GxB_Matrix_concat 
   1.91e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 15-by-100; its column
dimension must match all other matrices Tiles{:,1}, which is 8

 [ GxB_Matrix_concat 
   2.15e-06 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_concat (C, Tiles, m, n, desc)
Input matrix Tiles{1,1} is 100-by-8; its row
dimension must match all other matrices Tiles{1,:}, which is 15

 [ GxB_Matrix_concat 
   1.19e-06 sec ]


testing C<C,struct> = scalar for user-defined type:
 [ GrB_Matrix_wait (iso wait:matrix 0 zombies, 20 pending) (iso build) (hyper to sparse) 
   2.81e-05 sec ]
 [ GrB_assign (C iso assign) (pending: 0) Method 05f: C<C,struct> = scalar 
   1.1e-05 sec ]
expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input matrix is 10-by-20 but must be 10-by-10

expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input matrix is 5-by-5 but must be 10-by-10

expected error: GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GxB_Vector_diag (v, A, k, desc)
Input vector must have size 5

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_diag (C, v, k, desc)
Input vector of type [float] cannot be typecast to output of type [wild]

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Vector_diag (v, A, k, desc)
Input matrix of type [wild] cannot be typecast to output of type [float]


All errors printed above were expected.
GB_mex_about2: all tests passed

in /home/davis/master/GraphBLAS/Test/GB_mex_about.c
expected error: [-3]
in /home/davis/master/GraphBLAS/Test/GB_mex_about.c:
sizeof (struct GB_Type_opaque) 184
sizeof (struct GB_UnaryOp_opaque) 224
sizeof (struct GB_BinaryOp_opaque) 224
sizeof (struct GB_SelectOp_opaque) 224
sizeof (struct GB_Monoid_opaque) 64
sizeof (struct GB_Semiring_opaque) 64
sizeof (struct GB_Vector_opaque) 216
sizeof (struct GB_Matrix_opaque) 216
sizeof (struct GB_Descriptor_opaque) 64
1 1
1 1
1 1
2 2
2 2
4 4
4 4
8 8
8 8
4 4
8 8
info is -3

    GraphBLAS UnaryOp: LNOT (built-in): z=not(x)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1

    GraphBLAS UnaryOp: LNOT_FP32 (built-in): z=not(x)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4

    GraphBLAS BinaryOp: ISEQ_INT32 (built-in): z=iseq(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS BinaryOp: EQ_INT32 (built-in): z=eq(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS Monoid: plus uint16 monoid (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2
    identity: [   0 ] 
id is 0

    GraphBLAS BinaryOp: plus op from monoid (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS Monoid: mangled monoid, no identity (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=plus(x,y)
    GraphBLAS type: ztype uint16_t size: 2
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2
    Identity value is missing

    GraphBLAS Monoid: max int16 monoid (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]
id1 is -32768

    GraphBLAS BinaryOp: plus op from monoid (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS Semiring: 
new sem (user-defined): (max,times)
    GraphBLAS Monoid: semiring->add (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]

    GraphBLAS BinaryOp: semiring->multiply (built-in): z=times(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS Monoid: sem mm (user-defined; same as built-in):
    GraphBLAS BinaryOp: monoid->op (built-in): z=max(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    identity: [   -32768 ] terminal: [   32767 ]

    GraphBLAS BinaryOp: sem mult (built-in): z=times(x,y)
    GraphBLAS type: ztype int16_t size: 2
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2
    GraphBLAS type: matrix Gunk type is: double size: 8
    GraphBLAS type: victor type is: uint32_t size: 4
and its size of type is 4

    GraphBLAS Descriptor: 
---------------------------------- Duh: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
got outp 0
got mask 0
got inp0 0
got inp1 0

    GraphBLAS Descriptor: 
------------------------------- Duh set sort: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got sort 1

    GraphBLAS Descriptor: 
------------------------------- Duh set sort: 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got sort 1

    GraphBLAS Descriptor: 
------------------------------- Duh set: 
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
------------------------------- Duh set: 
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask 
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask 
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 0
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set out 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set out 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 2
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask structural 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 6
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask structural 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 6
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask back 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0

    GraphBLAS Descriptor: 
-----Duh set mask back 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]

    GraphBLAS Descriptor: 
-----Duh set in1 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]

    GraphBLAS Descriptor: 
-----Duh set in1 
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   
    d.sort     = true
got outp 1
got mask 0
got inp0 3
got inp1 0
    GraphBLAS type: user Complex type double complex size: 16
size is 16
Spec: 2.0.0 (2000000): 2.0
Spec Date: Nov 15, 2021
About the spec:
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang, and Benjamin Brock.  Based on 'GraphBLAS
Mathematics by Jeremy Kepner.  See also 'Graph Algorithms in the Language
of Linear Algebra,' edited by J. Kepner and J. Gilbert, SIAM, 2011.

date: Nov 15, 2021
URL: http://graphblas.org
Spec Version (2.0.0)
library info:
name: SuiteSparse:GraphBLAS
date: (DRAFT9) Apr 25, 2023
about:
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2023, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University.

license:
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2023, All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use SuiteSparse:GraphBLAS except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Version (8.0.0)
Implementation: (8000000)
compile date: Apr 26 2023
compile time: 22:48:18
with OpenMP: 1
URL: http://faculty.cse.tamu.edu/davis/GraphBLAS
The spec is >= version 1.0.0
The spec is < version 2.3.0
This implementation is >= version 1.0.0
gpu count: 0
gpu control: -1
built-in types:
    GraphBLAS type: bool bool size: 1
    GraphBLAS type: int8 int8_t size: 1
    GraphBLAS type: uint8 uint8_t size: 1
    GraphBLAS type: int16 int16_t size: 2
    GraphBLAS type: uint16 uint16_t size: 2
    GraphBLAS type: int32 int32_t size: 4
    GraphBLAS type: uint32 uint32_t size: 4
    GraphBLAS type: int64 int64_t size: 8
    GraphBLAS type: uint64 uint64_t size: 8
    GraphBLAS type: fp32 float size: 4
    GraphBLAS type: fp64 double size: 8

printing built-in types:
  1
  22
  44
  909
  777
  3203
  8080
  -987
  987
   3.14
   99.4
[user-defined value]
Check status codes
   0 : GrB_SUCCESS
   1 : GrB_NO_VALUE
  -1 : GrB_UNINITIALIZED_OBJECT
  -2 : GrB_NULL_POINTER
  -3 : GrB_INVALID_VALUE
  -4 : GrB_INVALID_INDEX
  -5 : GrB_DOMAIN_MISMATCH
  -6 : GrB_DIMENSION_MISMATCH
  -7 : GrB_OUTPUT_NOT_EMPTY
  -8 : GrB_NOT_IMPLEMENTED
-101 : GrB_PANIC
-102 : GrB_OUT_OF_MEMORY
-103 : GrB_INSUFFICIENT_SPACE
-104 : GrB_INVALID_OBJECT
-105 : GrB_INDEX_OUT_OF_BOUNDS
-106 : GrB_EMPTY_OBJECT
 911 : unknown GrB_Info value!
hyper_switch 0.0625 csc 1
bitmap_switch [0]: 0.04
bitmap_switch [1]: 0.05
bitmap_switch [2]: 0.06
bitmap_switch [3]: 0.08
bitmap_switch [4]: 0.1
bitmap_switch [5]: 0.2
bitmap_switch [6]: 0.3
bitmap_switch [7]: 0.4
mode: 0
# threads: 4
chunk: 1

  10000x10000 GraphBLAS bool matrix, hypersparse by col
  A, 1 entry, memory: 528 bytes
  iso value:   1

    (0,0)   1


  10000x10000 GraphBLAS bool matrix, hypersparse by col
  B, 1 entry, memory: 528 bytes
  iso value:   1

    (0,0)   1


  10000x10000 GraphBLAS bool matrix, hypersparse by col
  Q, no entries, memory: 0 bytes


div_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=first(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    identity: [   0 ] 

rdiv_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=second(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isgt_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=gt(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

islt_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=lt(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isge_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=ge(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

isle_bool monoid:

    GraphBLAS Monoid: mono (user-defined):
    GraphBLAS BinaryOp: monoid->op (built-in): z=le(x,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1
    identity: [   0 ] 

  10x10 GraphBLAS user_int matrix, sparse by col
  A, 10 entries, memory: 504 bytes

    (0,0) [user-defined value]
    (1,1) [user-defined value]
    (2,2) [user-defined value]
    (3,3) [user-defined value]
    (4,4) [user-defined value]
    (5,5) [user-defined value]
    (6,6) [user-defined value]
    (7,7) [user-defined value]
    (8,8) [user-defined value]
    (9,9) [user-defined value]


  10x10 GraphBLAS int16_t matrix, sparse by col
  B, 10 entries, memory: 504 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   2
    (3,3)   3
    (4,4)   4
    (5,5)   5
    (6,6)   6
    (7,7)   7
    (8,8)   8
    (9,9)   9


  1x1 GraphBLAS user_int scalar, sparse by col
  thunk, no entries, memory: 232 bytes

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -8

Expected error: info: -5


  10x10 GraphBLAS bool matrix, sparse by col
  A, 10 entries, memory: 484 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   0
    (3,3)   1
    (4,4)   0
    (5,5)   1
    (6,6)   0
    (7,7)   1
    (8,8)   0
    (9,9)   1


============== B = select (A > 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 5 entries, memory: 352 bytes
  iso value:   1

    (1,1)   1
    (3,3)   1
    (5,5)   1
    (7,7)   1
    (9,9)   1


============== B = select (A >= 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 10 entries, memory: 394 bytes

    (0,0)   0
    (1,1)   1
    (2,2)   0
    (3,3)   1
    (4,4)   0
    (5,5)   1
    (6,6)   0
    (7,7)   1
    (8,8)   0
    (9,9)   1


============== B = select (A < 0)

  10x10 GraphBLAS bool matrix, hypersparse by col
  B, no entries, memory: 240 bytes


============== B = select (A <= 0)

  10x10 GraphBLAS bool matrix, sparse by col
  B, 5 entries, memory: 352 bytes
  iso value:   0

    (0,0)   0
    (2,2)   0
    (4,4)   0
    (6,6)   0
    (8,8)   0

did setEL loop
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Vector_removeElement (v, i)
Row index 9999 out of range; must be < 43
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Matrix_removeElement (C, row, col)
Column index 9999 out of range; must be < 8
expected error: GraphBLAS error: GrB_INVALID_INDEX
function: GrB_Matrix_removeElement (C, row, col)
Row index 9999 out of range; must be < 8

  8x8 GraphBLAS double matrix, hypersparse by col
  A, no entries, memory: 6.3 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 0 col: 0    2

    GraphBLAS BinaryOp: pending operator: (built-in): z=plus(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8


  8x8 GraphBLAS double matrix, hypersparse by col
  A, 1 entry, memory: 256 bytes

    (0,0)    3


  8x8 GraphBLAS double matrix, hypersparse by col
  A, 1 entry, memory: 528 bytes

    (0,0)    3

testing removeElement
removeElement: OK

  1x1 GraphBLAS double scalar, full by col
  scalar2, 1 entry, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25

  2x1 GraphBLAS double scalar, full by col
  scalar2, 2 entries, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25
    (1,0)    1.25
    GrB_Scalar is invalid [scalar2]

  1x1 GraphBLAS double scalar, full by col
  scalar2, 1 entry, memory: 224 bytes
  iso value:    1.25

    (0,0)    1.25

    GraphBLAS Descriptor: T1     
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: T0     
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: T0T1   
    d.out      = default   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: C      
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: CT1    
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: CT0    
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: CT0T1  
    d.out      = default   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: S      
    d.out      = default   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: ST1    
    d.out      = default   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: ST0    
    d.out      = default   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: ST0T1  
    d.out      = default   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: SC     
    d.out      = default   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: SCT1   
    d.out      = default   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: SCT0   
    d.out      = default   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: SCT0T1 
    d.out      = default   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: R      
    d.out      = replace   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RT1    
    d.out      = replace   
    d.mask     = default   
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RT0    
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RT0T1  
    d.out      = replace   
    d.mask     = default   
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RC     
    d.out      = replace   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RCT1   
    d.out      = replace   
    d.mask     = complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RCT0   
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RCT0T1 
    d.out      = replace   
    d.mask     = complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RS     
    d.out      = replace   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RST1   
    d.out      = replace   
    d.mask     = structure 
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RST0   
    d.out      = replace   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RST0T1 
    d.out      = replace   
    d.mask     = structure 
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RSC    
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RSCT1  
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = default   
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: RSCT0  
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: RSCT0T1 
    d.out      = replace   
    d.mask     = structural complement
    d.in0      = transpose 
    d.in1      = transpose 
    d.axb      = default   

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = saxpy     

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = hash      

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: Duh 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       
burble: 0

    GraphBLAS SelectOp: tril: C=tril(A,k)

    GraphBLAS SelectOp: triu: C=triu(A,k)

    GraphBLAS SelectOp: diag: C=diag(A,k)

    GraphBLAS SelectOp: offidiag: C=offdiag(A,k)

    GraphBLAS SelectOp: nonzero: C=nonzero(A,k)

    GraphBLAS SelectOp: eq_zero: C=eq_zero(A,k)

    GraphBLAS SelectOp: gt_zero: C=gt_zero(A,k)

    GraphBLAS SelectOp: ge_zero: C=ge_zero(A,k)

    GraphBLAS SelectOp: lt_zero: C=lt_zero(A,k)

    GraphBLAS SelectOp: le_zero: C=le_zero(A,k)

    GraphBLAS SelectOp: ne_thunk: C=ne_thunk(A,k)

    GraphBLAS SelectOp: eq_thunk: C=eq_thunk(A,k)

    GraphBLAS SelectOp: gt_thunk: C=gt_thunk(A,k)

    GraphBLAS SelectOp: ge_thunk: C=ge_thunk(A,k)

    GraphBLAS SelectOp: lt_thunk: C=lt_thunk(A,k)

    GraphBLAS SelectOp: le_thunk: C=le_thunk(A,k)

  2199023254528x2199023254528 GraphBLAS double matrix, full by col
  A iso full, 4.8357e+24 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (10,0)    1
    (11,0)    1
    (12,0)    1
    (13,0)    1
    (14,0)    1
    (15,0)    1
    (16,0)    1
    (17,0)    1
    (18,0)    1
    (19,0)    1
    (20,0)    1
    (21,0)    1
    (22,0)    1
    (23,0)    1
    (24,0)    1
    (25,0)    1
    (26,0)    1
    (27,0)    1
    (28,0)    1
    ...
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_BOOL (C, row, col, x)
Input scalar of type [bool]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT8 (C, row, col, x)
Input scalar of type [int8_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT16 (C, row, col, x)
Input scalar of type [int16_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT32 (C, row, col, x)
Input scalar of type [int32_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_INT64 (C, row, col, x)
Input scalar of type [int64_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT8 (C, row, col, x)
Input scalar of type [uint8_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT16 (C, row, col, x)
Input scalar of type [uint16_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT32 (C, row, col, x)
Input scalar of type [uint32_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_UINT64 (C, row, col, x)
Input scalar of type [uint64_t]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_FP32 (C, row, col, x)
Input scalar of type [float]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_setElement_FP64 (C, row, col, x)
Input scalar of type [double]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxM_Matrix_setElement_FC32 (C, row, col, x)
Input scalar of type [float complex]
cannot be typecast to entry of type [user_int]
expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxM_Matrix_setElement_FC64 (C, row, col, x)
Input scalar of type [double complex]
cannot be typecast to entry of type [user_int]
Test GrB_error:

  10x10 GraphBLAS user_int matrix, hypersparse by col
  A, no entries, memory: 4.3 KB
  iso value: [user-defined value]
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  user-defined: [user_int] size: 2
    typedef int16_t user_int ;
    row: 3 col: 7 
  pending operator: implicit 2nd


All errors printed above were expected.
GB_mex_about: all tests passed

nmalloc 0 at start
nmalloc 34 after complex init
rand seed----------------------------------------------------
nmalloc 34 befor 2nd start
nmalloc 0 after Complex_finialize
GrB_init-----------------------------------------------------
nmalloc 0 at 2nd start, reinit complex with builtin: 1
nmalloc 0 after 2nd complex init
GrB_Type-----------------------------------------------------
    GraphBLAS type: new type user-defined: [int] size: 4

----------------------------------tcode: 0
    GraphBLAS type: GB_code_type: double complex size: 16

----------------------------------tcode: 1
    GraphBLAS type: GB_code_type: bool size: 1

----------------------------------tcode: 2
    GraphBLAS type: GB_code_type: int8_t size: 1

----------------------------------tcode: 3
    GraphBLAS type: GB_code_type: uint8_t size: 1

----------------------------------tcode: 4
    GraphBLAS type: GB_code_type: int16_t size: 2

----------------------------------tcode: 5
    GraphBLAS type: GB_code_type: uint16_t size: 2

----------------------------------tcode: 6
    GraphBLAS type: GB_code_type: int32_t size: 4

----------------------------------tcode: 7
    GraphBLAS type: GB_code_type: uint32_t size: 4

----------------------------------tcode: 8
    GraphBLAS type: GB_code_type: int64_t size: 8

----------------------------------tcode: 9
    GraphBLAS type: GB_code_type: uint64_t size: 8

----------------------------------tcode: 10
    GraphBLAS type: GB_code_type: float size: 4

----------------------------------tcode: 11
    GraphBLAS type: GB_code_type: double size: 8

----------------------------------tcode: 12
    GraphBLAS type: GB_code_type: float complex size: 8

----------------------------------tcode: 13
    GraphBLAS type: GB_code_type: double complex size: 16

----------------------------------tcode: 14
    GraphBLAS type: GB_code_type: double complex size: 16
GrB_UnaryOp--------------------------------------------------

    GraphBLAS UnaryOp: new unary opzz (user-defined): z=f1(x)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype uint32_t size: 4
GrB_BinaryOp-------------------------------------------------

    GraphBLAS BinaryOp: new binary opxx (user-defined): z=f2(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype int16_t size: 2
GrB_Monoid---------------------------------------------------
GrB_Semiring-------------------------------------------------
User defined (complex) --------------------------------------
Complex_finalize:
Complex_init (true): using builtin complex
Complex_finalize again:
Complex_init (false): user-defined complex
GrB_Vector---------------------------------------------------

  1x1 GraphBLAS int32_t scalar, full by col
  a_scalar, 1 entry, memory: 224 bytes
  iso value:   42

    (0,0)   42

  1x1 GraphBLAS int scalar, sparse by col
  a_scalar, no entries, memory: 232 bytes

    GraphBLAS type: T user-defined: [int] size: 4
error expected: -5
GrB_Vector---------------------------------------------------

  32x1 GraphBLAS uint16_t vector, bitmap by col
  vector 18:28, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10

nvals 12

  32x1 GraphBLAS uint16_t vector, bitmap by col
  vector 18:28, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10


  32x1 GraphBLAS uint16_t vector, bitmap by col
  zz ok vector, 12 entries, memory: 312 bytes

    (0,0)   12
    (18,0)   0
    (19,0)   1
    (20,0)   2
    (21,0)   3
    (22,0)   4
    (23,0)   5
    (24,0)   6
    (25,0)   7
    (26,0)   8
    (27,0)   9
    (28,0)   10

GrB_Vector_build---------------------------------------------
build udt:
info -5 expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Vector_build_UDT (w, I, X, nvals, dup)
Operator [plus] for assembling duplicates has type [double],
cannot be typecast to entries in output of type [user_int]

  10x1 GraphBLAS user_int vector, sparse by col
  v, no entries, memory: 232 bytes


  10x1 GraphBLAS double vector, sparse by col
  v clear, no entries, memory: 232 bytes

GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Vector_build_FP64 (w, I, X, nvals, dup)
nvals cannot be GxB_RANGE, GxB_STRIDE, or GxB_BACKWARDS
expected error, index out of bounds:


  10x1 GraphBLAS double vector invalid object
GrB_Vector_setElement----------------------------------------
GrB_Vector_extractElement------------------------------------
GrB_Vector_extractTuples-------------------------------------
GrB_Matrix---------------------------------------------------
GrB_Matrix_build---------------------------------------------
info -5 expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_UDT (C, I, J, X, nvals, dup)
Operator [plus] for assembling duplicates has type [double],
cannot be typecast to entries in output of type [user_int]
GrB_Matrix_setElement----------------------------------------
GrB_Matrix_extractElement------------------------------------

  10x5 GraphBLAS double matrix, hypersparse by row
  A, 1 entry, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (2,0)    22.8
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 4 col: 0    44.9
  pending operator: implicit 2nd


  10x5 GraphBLAS double matrix, sparse by col
  A, 2 entries, memory: 296 bytes

    (2,0)    22.8
    (4,0)    44.9

GrB_Matrix_extractTuples-------------------------------------
GrB_Descriptor-----------------------------------------------
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GxB_Desc_set_INT32 (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_AxB_METHOD field;
must be GxB_DEFAULT [0], GxB_AxB_GUSTAVSON [1001]
GxB_AxB_DOT [1003], GxB_AxB_HASH [1004] or GxB_AxB_SAXPY [1005]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_OUTP field;
must be GxB_DEFAULT [0] or GrB_REPLACE [1]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_MASK field;
must be GxB_DEFAULT [0], GrB_COMP [2],
GrB_STRUCTURE [4], or GrB_COMP+GrB_STRUCTURE [6]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP0 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_INP1 field;
must be GxB_DEFAULT [0] or GrB_TRAN [3]
GraphBLAS error: GrB_INVALID_VALUE
function: GrB_Descriptor_set (desc, field, value)
invalid descriptor value [-1] for GrB_AxB_METHOD field;
must be GxB_DEFAULT [0], GxB_AxB_GUSTAVSON [1001]
GxB_AxB_DOT [1003], GxB_AxB_HASH [1004] or GxB_AxB_SAXPY [1005]

    GraphBLAS Descriptor: new descriptor 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (default) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (dot) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       

    GraphBLAS Descriptor: new descriptor (Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (still Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (default) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

    GraphBLAS Descriptor: new descriptor (dot) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = dot       

    GraphBLAS Descriptor: new descriptor (Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: new descriptor (still Gustavson) 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = Gustavson 

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = unknown    (invalid value for this field)
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = unknown    (invalid value for this field)
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = hash       (invalid value for this field)
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    Descriptor field set to an invalid value

    GraphBLAS Descriptor: invalid 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = transpose  (invalid value for this field)
    Descriptor field set to an invalid value
create test matrices-----------------------------------------
complex vector:
GrB_mxm------------------------------------------------------
last error was [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_mxm (C, M, accum, semiring, A, B, desc)
M of type [mycx] cannot be typecast to boolean]

  1x1152921504606846976 GraphBLAS double matrix, sparse by row
  huge row, no entries, memory: 232 bytes

GrB_eWise ---------------------------------------------------
GrB_kronecker -----------------------------------------------
GrB_extract -------------------------------------------------
GxB_subassign -----------------------------------------------

  3x4 GraphBLAS double matrix, bitmap by col
  A, 7 entries, memory: 324 bytes

    (0,0)    0.230336
    (1,0)    0.629655
    (0,1)    0.825397
    (1,1)    0.674999
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555

GrB_assign---------------------------------------------------

  3x4 GraphBLAS double matrix, bitmap by col
  A, 8 entries, memory: 324 bytes

    (0,0)    1.26719
    (1,0)    1.51611
    (0,1)    2.03707
    (1,1)    2.28599
    (2,1)    0.137173
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555


  5x1 GraphBLAS bool vector, sparse by col
  v5, no entries, memory: 232 bytes


  5x1 GraphBLAS double vector, sparse by col
  v, no entries, memory: 232 bytes

mask wrong size:
GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GrB_Col_assign (C, M, accum, u, Rows, nRows, col, desc)
Mask vector m length is 5; must match the number of rows of C (3)

  3x4 GraphBLAS double matrix, bitmap by col
  A, 8 entries, memory: 324 bytes

    (0,0)    1.26719
    (1,0)    1.51611
    (0,1)    2.03707
    (1,1)    2.28599
    (2,1)    0.137173
    (0,2)    0.815877
    (2,2)    0.666813
    (1,3)    0.814555


  5x5 GraphBLAS bool matrix, hypersparse by row
  A5, no entries, memory: 240 bytes

mask wrong size:
GraphBLAS error: GrB_DIMENSION_MISMATCH
function: GrB_Matrix_assign (C, M, accum, A, Rows, nRows, Cols, nCols, desc)
Mask M is 5-by-5; must match result C (3-by-4)

  5x5 GraphBLAS float matrix, full by row
  A5 with 2nd:fp32, 25 entries, memory: 316 bytes

    (0,0)    42
    (0,1)    42
    (0,2)    42
    (0,3)    42
    (0,4)    42
    (1,0)    42
    (1,1)    42
    (1,2)    42
    (1,3)    42
    (1,4)    42
    (2,0)    42
    (2,1)    42
    (2,2)    42
    (2,3)    42
    (2,4)    42
    (3,0)    42
    (3,1)    42
    (3,2)    42
    (3,3)    42
    (3,4)    42
    (4,0)    42
    (4,1)    42
    (4,2)    42
    (4,3)    42
    (4,4)    42


  5x5 GraphBLAS float matrix, full by row
  A5 with 2nd:bool, 25 entries, memory: 316 bytes

    (0,0)    1
    (0,1)    1
    (0,2)    1
    (0,3)    1
    (0,4)    1
    (1,0)    1
    (1,1)    1
    (1,2)    1
    (1,3)    1
    (1,4)    1
    (2,0)    1
    (2,1)    1
    (2,2)    1
    (2,3)    1
    (2,4)    1
    (3,0)    1
    (3,1)    1
    (3,2)    1
    (3,3)    1
    (3,4)    1
    (4,0)    1
    (4,1)    1
    (4,2)    1
    (4,3)    1
    (4,4)    1


  5x5 GraphBLAS float matrix, full by row
  A5 done, 25 entries, memory: 316 bytes

    (0,0)    1
    (0,1)    1
    (0,2)    1
    (0,3)    1
    (0,4)    1
    (1,0)    1
    (1,1)    1
    (1,2)    1
    (1,3)    1
    (1,4)    1
    (2,0)    1
    (2,1)    1
    (2,2)    1
    (2,3)    1
    (2,4)    1
    (3,0)    1
    (3,1)    1
    (3,2)    1
    (3,3)    1
    (3,4)    1
    (4,0)    1
    (4,1)    1
    (4,2)    1
    (4,3)    1
    (4,4)    1

GrB_apply----------------------------------------------------
GrB_reduce (to scalar)---------------------------------------
GrB_reduce (to vector)---------------------------------------
GrB_transpose------------------------------------------------

-------------- GB_entry_check:
   4.5

All GB_entry_check tests passed (errors expected)

-------------- GB_Type_check:
unknown code: [unknown type!]
unknown info: [unknown GrB_Info value!]

All GB_Type_check tests passed (errors expected)

-------------- GB_UnaryOp_check:

All GB_UnaryOp_check tests passed (errors expected)

-------------- GB_BinaryOp_check:

All GB_BinaryOp_check tests passed (errors expected)

-------------- GB_Monoid_check:

All GB_Monoid_check tests passed (errors expected)

-------------- GB_Semiring_check:

All GB_Semiring_check tests passed (errors expected)

-------------- GB_Descriptor_check:

All GB_Descriptor_check tests passed (errors expected)

-------------- GB_Vector_check:

All GB_Vector_check tests passed (errors expected)

-------------- GB_Matrix_check:

  10x4 GraphBLAS double matrix, hypersparse by row
  valid pending pi, 1 entry, memory: 256 bytes

    (0,0)    1


  10x4 GraphBLAS double matrix, hypersparse by row
  valid pending pi again, 1 entry, memory: 256 bytes

    (0,0)    1

nvals 1

========================================== valid pi

  10x4 GraphBLAS double matrix, hypersparse by row
  valid pi, 1 entry, memory: 528 bytes

    (0,0)    1


===================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  A empty, no entries, memory: 304 bytes


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with bool pending, no entries, memory: 4.6 KB
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  bool size: 1
    row: 0 col: 0   1

    GraphBLAS BinaryOp: pending operator: (built-in): z=second(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: ytype double size: 8


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with pi pending, 1 entry, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 3    3.14159
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  with pi and 9.0909 pending, 1 entry, memory: 6.4 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 3    3.14159
    row: 2 col: 1    9.0909
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->i is NULL, invalid matrix

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [0] = 1 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [1] = -1 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  ->p [4] = 1002 invalid

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  negative zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: -1
  invalid number of zombies: -1 must be >= 0 and <= # entries (3)

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  too many zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: 1000
  invalid number of zombies: 1000 must be >= 0 and <= # entries (3)

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  row index invalid, 3 entries, memory: 400 bytes

    (0,-1)   index (0,-1) out of range

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  bad zombies, 3 entries, memory: 400 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  invalid zombie count: 0 exist but A->nzombies = 1

========================================== valid [pi 7.1]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1], 3 entries, memory: 6.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
  pending operator: implicit 2nd


===================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  negative pending, 3 entries, memory: 6.5 KB
  pending tuples: -1 max pending: 256 zombies: 0

  invalid pending count

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  missing pending, 3 entries, memory: 4.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  invalid pending tuples

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  bad pending tuple, 3 entries, memory: 6.5 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1070 col: 0    7.1
    tuple (1070,0) out of range

====================================== valid [pi 7.1 11.4]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1 11.4], 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4
  pending operator: implicit 2nd


=========================================================
matrix check with jumbled pending tuples:

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  invalid operator, 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4

    GraphBLAS BinaryOp: pending operator:  uninititialized object
  invalid pending operator

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid pending [pi 7.1 11.4], 3 entries, memory: 6.5 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 1 col: 0    7.1
    row: 0 col: 1    11.4
  pending operator: implicit 2nd


=========================================================

###### get nvals; assemble the pending tuples ##### 

====================================== valid [pi 7.1 11.4]

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid [pi 7 11.4], 5 entries, memory: 384 bytes

    (0,0)    1
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


=========================================================

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  jumbled, 5 entries, memory: 384 bytes

    (0,1)    1
    (0,0)    11.4 index (0,0) invalid
jumbled info -105
jumbled info -104

  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  OK, 5 entries, memory: 384 bytes

    (0,0)    1
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid zombie, 5 entries, memory: 384 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  no more zombie, 5 entries, memory: 384 bytes

    (0,0)    99099
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid zombie, 5 entries, memory: 384 bytes
  pending tuples: 0 max pending: 0 zombies: 1

    (0,0) zombie
    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  again no more zombie, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  valid, no pending, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A now hyper, 4 entries, memory: 352 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, sparse by row
  sparsity control: sparse only
  A now sparse, 4 entries, memory: 368 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A now hyper, 4 entries, memory: 352 bytes

    (0,1)    11.4
    (1,0)    7.1
    (2,1)    9.0909
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A with bad nvec_nonempty, 4 entries, memory: 352 bytes

 index (1,0) invalid
hratio: 0.75 0.75 0
default bswitch [0] = 0.04
default bswitch [1] = 0.05
default bswitch [2] = 0.06
default bswitch [3] = 0.08
default bswitch [4] = 0.1
default bswitch [5] = 0.2
default bswitch [6] = 0.3
default bswitch [7] = 0.4
77.33
error expected (A format null):
error expected (A format null):
error expected:
error expected:
error expected:
error expected:
error expected (bad field):
error expected (bad field):
error expected (bad field):
error expected:
error expected:
error expected:
error expected:
error expected:
error expected:

  10x4 GraphBLAS double matrix, sparse by col
  sparsity control: hypersparse only
  invalid sparse matrix structure

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  h restored, 4 entries, memory: 336 bytes


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  invalid hypersparse matrix structure

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  nvec restored, 4 entries, memory: 336 bytes


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  ->h [0] = -1 invalid

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  h[0] restored, 4 entries, memory: 336 bytes


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, no entries, memory: 4.3 KB
  iso value:   1
  pending tuples: 11 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  bool size: 1
    row: 0 col: 0 
    row: 0 col: 1 
    row: 0 col: 2 
    row: 0 col: 3 
    row: 0 col: 4 
    row: 0 col: 5 
    row: 0 col: 6 
    row: 0 col: 7 
    row: 0 col: 8 
    row: 0 col: 9 
    row: 0 col: 10 
  pending operator: implicit 2nd

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value: 


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1


  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1

  11x11 GraphBLAS bool matrix, hypersparse by row
  Eleven, 11 entries, memory: 336 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1


Eleven invalid hypersparse:

  11x11 GraphBLAS bool matrix, hypersparse by row
  A->h is too small!

  11x11 GraphBLAS bool matrix, hypersparse by row
  A->h is too small!

  11x11 GraphBLAS bool matrix, full by row
  Eleven, 121 entries, memory: 224 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1
    (0,3)   1
    (0,4)   1
    (0,5)   1
    (0,6)   1
    (0,7)   1
    (0,8)   1
    (0,9)   1
    (0,10)   1
    (1,0)   1
    (1,1)   1
    (1,2)   1
    (1,3)   1
    (1,4)   1
    (1,5)   1
    (1,6)   1
    (1,7)   1
    (1,8)   1
    (1,9)   1
    (1,10)   1
    (2,0)   1
    (2,1)   1
    (2,2)   1
    (2,3)   1
    (2,4)   1
    (2,5)   1
    (2,6)   1
    ...

All GB_Matrix_check tests passed (errors expected)

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with one pending, 4 entries, memory: 6.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,3)    3.14159
  pending tuples:
    GraphBLAS type:  double size: 8
    row: 3 col: 2    32.4
  pending operator: implicit 2nd


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with no pending, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    3.14159


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A blocking mode, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


All blocking/nonblocking mode tests passed

  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A for ix_realloc, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A pattern 1, 5 entries, memory: 768 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A pattern 2, 5 entries, memory: 928 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  10x4 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A for shallow op, 5 entries, memory: 928 bytes

    (1,0)    7.1
    (0,1)    11.4
    (2,1)    9.0909
    (3,2)    32.4
    (3,3)    99.4


  1x1 GraphBLAS float matrix, sparse by col
  Q empty, float, no entries, memory: 0 bytes

free A:
free B:
free C:
free E:
free F:
free v:
free u:
free z:

GrB_extract ============================================

  12x1 GraphBLAS double vector, bitmap by col
  start u , 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  start v , 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  u to check, 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  v to check, 10 entries, memory: 324 bytes

    (0,0)    821.557
    (1,0)    36.2943
    (2,0)    1.4534
    (3,0)    51.1414
    (5,0)    77.1552
    (6,0)    204.801
    (8,0)    652.001
    (9,0)    183.725
    (10,0)    19.5076
    (11,0)    329.759


  12x1 GraphBLAS double vector, bitmap by col
  v, 10 entries, memory: 324 bytes

    (0,0)    0.337293
    (1,0)    2.27776
    (2,0)    11.1243
    (4,0)    4.4319
    (6,0)    0.347899
    (7,0)    0.45809
    (8,0)    1.45361
    (9,0)    0.00843494
    (10,0)    2.65766
    (11,0)    27.4598


  12x1 GraphBLAS double vector, bitmap by col
  u, 10 entries, memory: 324 bytes

    (0,0)    0.337293
    (1,0)    2.27776
    (2,0)    11.1243
    (4,0)    4.4319
    (6,0)    0.347899
    (7,0)    0.45809
    (8,0)    1.45361
    (9,0)    0.00843494
    (10,0)    2.65766
    (11,0)    27.4598


  12x1 GraphBLAS double vector, bitmap by col
  v, 10 entries, memory: 324 bytes

    (0,0)    -11.1243
    (2,0)    -1.45361
    (3,0)    -0.45809
    (4,0)    -27.4598
    (5,0)    -4.4319
    (7,0)    -2.65766
    (8,0)    -0.337293
    (9,0)    -2.27776
    (10,0)    -0.00843494
    (11,0)    -0.347899


  12x1 GraphBLAS double vector, bitmap by col
  u, 10 entries, memory: 324 bytes

    (0,0)    -11.1243
    (2,0)    -1.45361
    (3,0)    -0.45809
    (4,0)    -27.4598
    (5,0)    -4.4319
    (7,0)    -2.65766
    (8,0)    -0.337293
    (9,0)    -2.27776
    (10,0)    -0.00843494
    (11,0)    -0.347899


GrB_extract ============================================

  12x1 GraphBLAS double vector, bitmap by col
  start u , 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  start v , 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  u to check, 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, bitmap by col
  v to check, 10 entries, memory: 324 bytes

    (0,0)    6.25689e+15
    (2,0)    1.33383e+15
    (3,0)    1.89642e+15
    (4,0)    5.57684e+14
    (5,0)    1.21263e+16
    (7,0)    5.40986e+15
    (8,0)    8.62748e+13
    (9,0)    7.476e+12
    (10,0)    1.4665e+14
    (11,0)    9.06608e+08


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    880848
    (1,0)    2.43015e+06
    (2,0)    79504
    (3,0)    5.9743e+06
    (4,0)    0.349378
    (5,0)    372627
    (6,0)    1.6954e+07
    (7,0)    258255
    (8,0)    5.58291e+06
    (9,0)    5094.77
    (10,0)    5094.77
    (11,0)    0.349378


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    880848
    (1,0)    2.43015e+06
    (2,0)    79504
    (3,0)    5.9743e+06
    (4,0)    0.349378
    (5,0)    372627
    (6,0)    1.6954e+07
    (7,0)    258255
    (8,0)    5.58291e+06
    (9,0)    5094.77
    (10,0)    5094.77
    (11,0)    0.349378


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -5.9743e+06
    (2,0)    -5.58291e+06
    (3,0)    -258255
    (4,0)    -0.349378
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    -5094.77
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -5.9743e+06
    (2,0)    -5.58291e+06
    (3,0)    -258255
    (4,0)    -0.349378
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    -5094.77
    (11,0)    -1.6954e+07


GrB_extract ============================================

  12x1 GraphBLAS double vector, full by col
  start u , 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  start v , 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u to check, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v to check, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    5.36713e+71
    (2,0)    -5.58291e+06
    (3,0)    1.50347e+51
    (4,0)    1.63724e+44
    (5,0)    -0.349378
    (6,0)    -372627
    (7,0)    -5094.77
    (8,0)    -880848
    (9,0)    -2.43015e+06
    (10,0)    2.7124e+58
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -29670
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    -47.7385
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    -29670
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    -47.7385
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  v, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, full by col
  u, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


----------------------------- nthreads

----------------------------- import/export

  12x12 GraphBLAS double matrix, bitmap by col
  A to import/export, 94 entries, memory: 1.5 KB

    (0,0)    5.70695e+20
    (1,0)    -24011.4
    (2,0)    -5.58291e+06
    (3,0)    -29670
    (4,0)    -91.8849
    (5,0)    -103875
    (8,0)    6.68941e+21
    (9,0)    -129164
    (10,0)    -47.7385
    (11,0)    5.50359e+24
    (0,1)    8.10778e+21
    (1,1)    8.78032e+23
    (3,1)    -1316.53
    (5,1)    -618.248
    (6,1)    -30552.3
    (8,1)    -2.32089e+17
    (9,1)    9.49377e+23
    (10,1)    2.85353e+25
    (0,2)    -5.58291e+06
    (2,2)    -3.12163e+28
    (4,2)    -750.477
    (5,2)    -3.68311e+06
    (7,2)    -198783
    (9,2)    -30552.3
    (0,3)    -29670
    (1,3)    -1316.53
    (3,3)    8.08229e+20
    (5,3)    3.98145e+23
    (6,3)    -99121.2
    (7,3)    2.7988e+17
    (9,3)    3.68097e+24
    (0,4)    -2384.76
    (2,4)    -750.477
    (4,4)    3.15406e+22
    (5,4)    -5.96257
    (6,4)    -4.14935e+06
    (8,4)    -1.65667
    (10,4)    -167.268
    (0,5)    -0.349378
    (1,5)    1.84666e+23
    (2,5)    -39.4471
    (3,5)    3.93233e+23
    (4,5)    -5.96257
    (5,5)    -1.65667
    (7,5)    1.62408e+20
    (8,5)    -1.3075e+06
    (9,5)    1.501e+28
    (10,5)    -0.0338679
    (1,6)    -5.38515e+06
    (2,6)    2.57395e+27
    (3,6)    -365233
    (4,6)    -4.14935e+06
    (6,6)    -59731.2
    (7,6)    2.97553e+18
    (8,6)    -129164
    (10,6)    -207.484
    (2,7)    -198783
    (3,7)    -4.66699
    (6,7)    -891.777
    (7,7)    -3.46458e+16
    (8,7)    5.44432e+29
    (9,7)    6.8555e+29
    (10,7)    -8.21612e-05
    (0,8)    6.68941e+21
    (1,8)    5.58291e+06
    (4,8)    2.80448e+15
    (5,8)    -3.18231e+06
    (6,8)    -129164
    (7,8)    5.44432e+29
    (8,8)    -3.68311e+06
    (9,8)    -4.53492e+06
    (10,8)    -7.82353e+21
    (11,8)    4.56913e+14
    (0,9)    3.69887e+22
    (1,9)    8.09708e+24
    (2,9)    -30552.3
    (4,9)    8.80765e+23
    (5,9)    2.33703e+26
    (8,9)    -4.53492e+06
    (10,9)    4.54628e+22
    (11,9)    9.19161e+24
    (0,10)    -47.7385
    (1,10)    2.85353e+25
    (2,10)    2.22615e+23
    (4,10)    -0.960076
    (5,10)    -33.1062
    (6,10)    -207.484
    (7,10)    -8.21612e-05
    (9,10)    4.54628e+22
    (10,10)    -2.84418
    (11,10)    1.63904e+20
    (0,11)    -1.6954e+07
    (8,11)    -4.14935e+06
    (11,11)    30552.3

    GraphBLAS type: type of A double size: 8
Ax_size 752
exported row 0
   col 0 value 5.70695e+20
   col 1 value 8.10778e+21
   col 2 value -5.58291e+06
   col 3 value -29670
   col 4 value -2384.76
   col 5 value -0.349378
   col 8 value 6.68941e+21
   col 9 value 3.69887e+22
   col 10 value -47.7385
   col 11 value -1.6954e+07
exported row 0
   col 0 value -24011.4
   col 1 value 8.78032e+23
   col 3 value -1316.53
   col 5 value 1.84666e+23
   col 6 value -5.38515e+06
   col 8 value 5.58291e+06
   col 9 value 8.09708e+24
   col 10 value 2.85353e+25
exported row 0
   col 0 value -5.58291e+06
   col 2 value -3.12163e+28
   col 4 value -750.477
   col 5 value -39.4471
   col 6 value 2.57395e+27
   col 7 value -198783
   col 9 value -30552.3
   col 10 value 2.22615e+23
exported row 0
   col 0 value -29670
   col 1 value -1316.53
   col 3 value 8.08229e+20
   col 5 value 3.93233e+23
   col 6 value -365233
   col 7 value -4.66699
exported row 0
   col 0 value -91.8849
   col 2 value -750.477
   col 4 value 3.15406e+22
   col 5 value -5.96257
   col 6 value -4.14935e+06
   col 8 value 2.80448e+15
   col 9 value 8.80765e+23
   col 10 value -0.960076
exported row 0
   col 0 value -103875
   col 1 value -618.248
   col 2 value -3.68311e+06
   col 3 value 3.98145e+23
   col 4 value -5.96257
   col 5 value -1.65667
   col 8 value -3.18231e+06
   col 9 value 2.33703e+26
   col 10 value -33.1062
exported row 0
   col 1 value -30552.3
   col 3 value -99121.2
   col 4 value -4.14935e+06
   col 6 value -59731.2
   col 7 value -891.777
   col 8 value -129164
   col 10 value -207.484
exported row 0
   col 2 value -198783
   col 3 value 2.7988e+17
   col 5 value 1.62408e+20
   col 6 value 2.97553e+18
   col 7 value -3.46458e+16
   col 8 value 5.44432e+29
   col 10 value -8.21612e-05
exported row 0
   col 0 value 6.68941e+21
   col 1 value -2.32089e+17
   col 4 value -1.65667
   col 5 value -1.3075e+06
   col 6 value -129164
   col 7 value 5.44432e+29
   col 8 value -3.68311e+06
   col 9 value -4.53492e+06
   col 11 value -4.14935e+06
exported row 0
   col 0 value -129164
   col 1 value 9.49377e+23
   col 2 value -30552.3
   col 3 value 3.68097e+24
   col 5 value 1.501e+28
   col 7 value 6.8555e+29
   col 8 value -4.53492e+06
   col 10 value 4.54628e+22
exported row 0
   col 0 value -47.7385
   col 1 value 2.85353e+25
   col 4 value -167.268
   col 5 value -0.0338679
   col 6 value -207.484
   col 7 value -8.21612e-05
   col 8 value -7.82353e+21
   col 9 value 4.54628e+22
   col 10 value -2.84418
exported row 0
   col 0 value 5.50359e+24
   col 8 value 4.56913e+14
   col 9 value 9.19161e+24
   col 10 value 1.63904e+20
   col 11 value 30552.3

  12x12 GraphBLAS double matrix, sparse by row
  A imported, 94 entries, memory: 1.8 KB

    (0,0)    5.70695e+20
    (0,1)    8.10778e+21
    (0,2)    -5.58291e+06
    (0,3)    -29670
    (0,4)    -2384.76
    (0,5)    -0.349378
    (0,8)    6.68941e+21
    (0,9)    3.69887e+22
    (0,10)    -47.7385
    (0,11)    -1.6954e+07
    (1,0)    -24011.4
    (1,1)    8.78032e+23
    (1,3)    -1316.53
    (1,5)    1.84666e+23
    (1,6)    -5.38515e+06
    (1,8)    5.58291e+06
    (1,9)    8.09708e+24
    (1,10)    2.85353e+25
    (2,0)    -5.58291e+06
    (2,2)    -3.12163e+28
    (2,4)    -750.477
    (2,5)    -39.4471
    (2,6)    2.57395e+27
    (2,7)    -198783
    (2,9)    -30552.3
    (2,10)    2.22615e+23
    (3,0)    -29670
    (3,1)    -1316.53
    (3,3)    8.08229e+20
    (3,5)    3.93233e+23
    (3,6)    -365233
    (3,7)    -4.66699
    (4,0)    -91.8849
    (4,2)    -750.477
    (4,4)    3.15406e+22
    (4,5)    -5.96257
    (4,6)    -4.14935e+06
    (4,8)    2.80448e+15
    (4,9)    8.80765e+23
    (4,10)    -0.960076
    (5,0)    -103875
    (5,1)    -618.248
    (5,2)    -3.68311e+06
    (5,3)    3.98145e+23
    (5,4)    -5.96257
    (5,5)    -1.65667
    (5,8)    -3.18231e+06
    (5,9)    2.33703e+26
    (5,10)    -33.1062
    (6,1)    -30552.3
    (6,3)    -99121.2
    (6,4)    -4.14935e+06
    (6,6)    -59731.2
    (6,7)    -891.777
    (6,8)    -129164
    (6,10)    -207.484
    (7,2)    -198783
    (7,3)    2.7988e+17
    (7,5)    1.62408e+20
    (7,6)    2.97553e+18
    (7,7)    -3.46458e+16
    (7,8)    5.44432e+29
    (7,10)    -8.21612e-05
    (8,0)    6.68941e+21
    (8,1)    -2.32089e+17
    (8,4)    -1.65667
    (8,5)    -1.3075e+06
    (8,6)    -129164
    (8,7)    5.44432e+29
    (8,8)    -3.68311e+06
    (8,9)    -4.53492e+06
    (8,11)    -4.14935e+06
    (9,0)    -129164
    (9,1)    9.49377e+23
    (9,2)    -30552.3
    (9,3)    3.68097e+24
    (9,5)    1.501e+28
    (9,7)    6.8555e+29
    (9,8)    -4.53492e+06
    (9,10)    4.54628e+22
    (10,0)    -47.7385
    (10,1)    2.85353e+25
    (10,4)    -167.268
    (10,5)    -0.0338679
    (10,6)    -207.484
    (10,7)    -8.21612e-05
    (10,8)    -7.82353e+21
    (10,9)    4.54628e+22
    (10,10)    -2.84418
    (11,0)    5.50359e+24
    (11,8)    4.56913e+14
    (11,9)    9.19161e+24
    (11,10)    1.63904e+20
    (11,11)    30552.3


  12x12 GraphBLAS double matrix, hypersparse by col
  A still OK, 94 entries, memory: 1.9 KB


  12x12 GraphBLAS double matrix, sparse by row
  A also OK, 94 entries, memory: 1.8 KB


  12x12 GraphBLAS double matrix, sparse by col
  A here too OK, 94 entries, memory: 1.8 KB


  12x12 GraphBLAS double matrix, hypersparse by row
  A yet still OK, 94 entries, memory: 1.9 KB


  12x12 GraphBLAS double matrix, hypersparse by col
  A yet again OK, 94 entries, memory: 1.9 KB


  12x1 GraphBLAS double vector, full by col
  u to import/export, 12 entries, memory: 312 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07

    GraphBLAS type: type of u double size: 8
nvals 12
   col 0 value -79504
   col 1 value 29670
   col 2 value -5.58291e+06
   col 3 value 47.7385
   col 4 value 1.6954e+07
   col 5 value -91.8849
   col 6 value -372627
   col 7 value -47.7385
   col 8 value -880848
   col 9 value -24011.4
   col 10 value 24011.4
   col 11 value -1.6954e+07

  12x1 GraphBLAS double vector, sparse by col
  u imported, 12 entries, memory: 424 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07


  12x1 GraphBLAS double vector, sparse by col
  u still OK, 12 entries, memory: 424 bytes


  12x1 GraphBLAS double vector, sparse by col
  u still OK, 12 entries, memory: 424 bytes

    (0,0)    -79504
    (1,0)    29670
    (2,0)    -5.58291e+06
    (3,0)    47.7385
    (4,0)    1.6954e+07
    (5,0)    -91.8849
    (6,0)    -372627
    (7,0)    -47.7385
    (8,0)    -880848
    (9,0)    -24011.4
    (10,0)    24011.4
    (11,0)    -1.6954e+07



free all: nmalloc 0
nmalloc 0 before complex_finalize
nmalloc 0 done
nmalloc 0 all freed
nmalloc 0 all freed
nmalloc 0 after finalize

check errlog.txt for errors tested
All error-handling tests passed (all errors above were expected)

Burble with standard printf/flush:
 [ GrB_Matrix_nvals 
   9.54e-07 sec ]

Burble with myprintf/myflush:
[[myprintf: [ GrB_Matrix_nvals ]]myflush
[[myprintf:
   0 sec ]
]]myflush

default memory pool limits:
expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same
]
expected error: [GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid
]

  10x10 GraphBLAS float matrix, hypersparse by col
  C ok, no entries, memory: 240 bytes


  10x10 GraphBLAS float matrix, hypersparse by col
  C iso invald, no entries, memory: 240 bytes
  invalid iso matrix

  1x1 GraphBLAS float scalar, sparse by col
  scalar init, no entries, memory: 232 bytes

expected error: [GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_build_Scalar (C, I, J, scalar, nvals)
Scalar value is missing]
expected error: [GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Vector_build_Scalar (w, I, scalar, nvals)
Scalar value is missing]

  1x1 GraphBLAS float scalar, full by col
  scalar set, 1 entry, memory: 224 bytes
  iso value:    3

    (0,0)    3

  1x1 GraphBLAS float scalar, sparse by col
  sparsity control: sparse only
  scalar, 1 entry, memory: 248 bytes
  iso value:    3

    (0,0)    3

expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_build_UINT64 (C, I, J, X, nvals, dup)
Value(s) of type [uint64_t] cannot be typecast to matrix of type [int]
]
expected error: [GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_build_Scalar (C, I, J, scalar, nvals)
Value(s) of type [float] cannot be typecast to matrix of type [int]
]

  10x10 GraphBLAS float matrix, sparse by col
  C to export, 8 entries, memory: 376 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1


  10x10 GraphBLAS float matrix, sparse by col
  C imported sparse, 8 entries, memory: 376 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1


  10x10 GraphBLAS float matrix, hypersparse by col
  C imported hyper, 8 entries, memory: 424 bytes
  iso value:    1

    (0,1)    1
    (1,2)    1
    (2,3)    1
    (3,4)    1
    (4,5)    1
    (5,6)    1
    (6,7)    1
    (7,8)    1

  10x10 GraphBLAS float matrix, sparse by col
  C imported non-iso, 100 entries, memory: 1.5 KB

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  10x10 GraphBLAS float matrix, sparse by col
  C imported iso, 100 entries, memory: 1.1 KB
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...
    GraphBLAS type: My4x64 user-defined: [my4x64] size: 32
    typedef struct { int64_t stuff [4] ; } my4x64 ;

################# sparsity_control 1

  4x4 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  C stuff, 12 entries, memory: 768 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 2 entries, memory: 336 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 4 entries, memory: 416 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 4 entries, memory: 416 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, hypersparse by col
  sparsity control: hypersparse only
  Tile, 2 entries, memory: 336 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 2

  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff, 12 entries, memory: 736 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 2 entries, memory: 320 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 4 entries, memory: 400 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 4 entries, memory: 400 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  Tile, 2 entries, memory: 320 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 4

  4x4 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  C stuff, 12 entries, memory: 744 bytes

    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 2 entries, memory: 352 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 4 entries, memory: 352 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 4 entries, memory: 352 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, bitmap by col
  sparsity control: bitmap only
  Tile, 2 entries, memory: 352 bytes

    (1,0) [user-defined value]
    (0,1) [user-defined value]

Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]

################# sparsity_control 8

  4x4 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  C stuff, 16 entries, memory: 728 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]
C(0,0) = [0, 0, 32, 99]
C(0,1) = [0, 1, 32, 99]
C(0,2) = [0, 2, 32, 99]
C(0,3) = [0, 3, 32, 99]
C(1,0) = [1, 0, 32, 99]
C(1,1) = [1, 1, 32, 99]
C(1,2) = [1, 2, 32, 99]
C(1,3) = [1, 3, 32, 99]
C(2,0) = [2, 0, 32, 99]
C(2,1) = [2, 1, 32, 99]
C(2,2) = [2, 2, 32, 99]
C(2,3) = [2, 3, 32, 99]
C(3,0) = [3, 0, 32, 99]
C(3,1) = [3, 1, 32, 99]
C(3,2) = [3, 2, 32, 99]
C(3,3) = [3, 3, 32, 99]

================ Tile 0

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 0, 32, 99]
Tile(0,1) = [0, 1, 32, 99]
Tile(1,0) = [1, 0, 32, 99]
Tile(1,1) = [1, 1, 32, 99]

================ Tile 1

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [0, 2, 32, 99]
Tile(0,1) = [0, 3, 32, 99]
Tile(1,0) = [1, 2, 32, 99]
Tile(1,1) = [1, 3, 32, 99]

================ Tile 2

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 0, 32, 99]
Tile(0,1) = [2, 1, 32, 99]
Tile(1,0) = [3, 0, 32, 99]
Tile(1,1) = [3, 1, 32, 99]

================ Tile 3

  2x2 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  Tile, 4 entries, memory: 344 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]

Tile(0,0) = [2, 2, 32, 99]
Tile(0,1) = [2, 3, 32, 99]
Tile(1,0) = [3, 2, 32, 99]
Tile(1,1) = [3, 3, 32, 99]

  4x4 GraphBLAS my4x64 matrix, full by col
  sparsity control: full
  C stuff iso, 16 entries, memory: 248 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]

  4x4 GraphBLAS my4x64 matrix, full by col
  C stuff iso imported, 16 entries, memory: 728 bytes

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]

C(0,0) = [3, 3, 32, 99]
C(0,1) = [3, 3, 32, 99]
C(0,2) = [3, 3, 32, 99]
C(0,3) = [3, 3, 32, 99]
C(1,0) = [3, 3, 32, 99]
C(1,1) = [3, 3, 32, 99]
C(1,2) = [3, 3, 32, 99]
C(1,3) = [3, 3, 32, 99]
C(2,0) = [3, 3, 32, 99]
C(2,1) = [3, 3, 32, 99]
C(2,2) = [3, 3, 32, 99]
C(2,3) = [3, 3, 32, 99]
C(3,0) = [3, 3, 32, 99]
C(3,1) = [3, 3, 32, 99]
C(3,2) = [3, 3, 32, 99]
C(3,3) = [3, 3, 32, 99]

  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff sparse non-iso, 16 entries, memory: 544 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse (jumbled) by col
  sparsity control: sparse only
  C stuff jumbled, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff wait, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  4x4 GraphBLAS my4x64 matrix, sparse by col
  sparsity control: sparse only
  C stuff non iso, 16 entries, memory: 1.0 KB

    (0,0) [user-defined value]
    (1,0) [user-defined value]
    (2,0) [user-defined value]
    (3,0) [user-defined value]
    (0,1) [user-defined value]
    (1,1) [user-defined value]
    (2,1) [user-defined value]
    (3,1) [user-defined value]
    (0,2) [user-defined value]
    (1,2) [user-defined value]
    (2,2) [user-defined value]
    (3,2) [user-defined value]
    (0,3) [user-defined value]
    (1,3) [user-defined value]
    (2,3) [user-defined value]
    (3,3) [user-defined value]


  10x10 GraphBLAS float matrix, full by col
  C iso full, 100 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  10x10 GraphBLAS float matrix, full by col
  C non-iso full, 100 entries, memory: 616 bytes

    (0,0)    2
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (4,0)    1
    (5,0)    1
    (6,0)    1
    (7,0)    1
    (8,0)    1
    (9,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (4,1)    1
    (5,1)    1
    (6,1)    1
    (7,1)    1
    (8,1)    1
    (9,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (4,2)    1
    (5,2)    1
    (6,2)    1
    (7,2)    1
    (8,2)    1
    ...

  4x4 GraphBLAS float matrix, full by col
  A iso, 16 entries, memory: 224 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1
    (2,0)    1
    (3,0)    1
    (0,1)    1
    (1,1)    1
    (2,1)    1
    (3,1)    1
    (0,2)    1
    (1,2)    1
    (2,2)    1
    (3,2)    1
    (0,3)    1
    (1,3)    1
    (2,3)    1
    (3,3)    1

  10x10 GraphBLAS float matrix, hypersparse by col
  C iso with pending, no entries, memory: 4.3 KB
  iso value:    1
  pending tuples: 16 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 1 
    row: 2 col: 1 
    row: 3 col: 1 
    row: 4 col: 1 
    row: 1 col: 2 
    row: 2 col: 2 
    row: 3 col: 2 
    row: 4 col: 2 
    row: 1 col: 3 
    row: 2 col: 3 
    row: 3 col: 3 
    row: 4 col: 3 
    row: 1 col: 4 
    row: 2 col: 4 
    row: 3 col: 4 
    row: 4 col: 4 
  pending operator: implicit 2nd

  2x2 GraphBLAS float matrix, bitmap by col
  A non-iso, 4 entries, memory: 240 bytes

    (0,0)    1.1
    (1,0)    2.1
    (0,1)    1.2
    (1,1)    2.2

  10x10 GraphBLAS float matrix, bitmap by col
  C non-iso, 16 entries, memory: 716 bytes

    (1,1)    1.1
    (2,1)    2.1
    (3,1)    1
    (4,1)    1
    (1,2)    1.2
    (2,2)    2.2
    (3,2)    1
    (4,2)    1
    (1,3)    1
    (2,3)    1
    (3,3)    1
    (4,3)    1
    (1,4)    1
    (2,4)    1
    (3,4)    1
    (4,4)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  C iso, 2 entries, memory: 264 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  A iso, 2 entries, memory: 264 bytes
  iso value:    1

    (0,0)    1
    (1,0)    1

  100x100 GraphBLAS float matrix, hypersparse by col
  C iso, C<M>=op(A), 2 entries, memory: 4.6 KB
  iso value:    1
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    1
    (1,0)    1
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 0 col: 2 
    row: 1 col: 2 
  pending operator: implicit 2nd

  10x10 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  C for C<M>=A, 3 entries, memory: 716 bytes

    (0,0)    1.1
    (3,3)    9.7
    (4,4)    9.9

  2x2 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  A for C<M>=A, 2 entries, memory: 240 bytes

    (0,0)    1.1
    (0,1)    1.2

  10x10 GraphBLAS float matrix, bitmap by col
  sparsity control: bitmap only
  C after C<M>=A, 2 entries, memory: 716 bytes

    (1,1)    1.1
    (1,2)    1.2

    GraphBLAS Descriptor: descriptor !M 
    d.out      = default   
    d.mask     = complement
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   

  100x1 GraphBLAS float vector, sparse by col
  w after first setElement, no entries, memory: 2.3 KB
  iso value:    0
  pending tuples: 1 max pending: 256 zombies: 0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 0 col: 0 
  pending operator: implicit 2nd

  100x1 GraphBLAS float vector, sparse by col
  w before extractElement, 2 entries, memory: 3.4 KB
  pending tuples: 2 max pending: 256 zombies: 0

    (0,0)    2
    (1,0)    -1
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 2 col: 0    2
    row: 2 col: 0    3
  pending operator: implicit 2nd

  100x1 GraphBLAS float vector, sparse by col
  w after extractElement, 3 entries, memory: 268 bytes

    (0,0)    2
    (1,0)    -1
    (2,0)    3

  10x10 GraphBLAS float matrix, hypersparse by col
  C before transpose, 1 entry, memory: 5.4 KB
  pending tuples: 1 max pending: 256 zombies: 0

    (2,4)    8.25
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 3    9.5
  pending operator: implicit 2nd

  10x10 GraphBLAS float matrix, sparse by col
  C after transpose, 2 entries, memory: 328 bytes

    (3,1)    9.5
    (4,2)    8.25

----------------- ntasks: 1
task:   0 kfirst: 0 klast: 3 pfirst:  0 plast: 11

----------------- ntasks: 2
task:   0 kfirst: 0 klast: 1 pfirst:  0 plast:  5
task:   1 kfirst: 2 klast: 3 pfirst:  6 plast: 11

----------------- ntasks: 3
task:   0 kfirst: 0 klast: 1 pfirst:  0 plast:  3
task:   1 kfirst: 1 klast: 2 pfirst:  4 plast:  7
task:   2 kfirst: 2 klast: 3 pfirst:  8 plast: 11

----------------- ntasks: 4
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  2
task:   1 kfirst: 1 klast: 1 pfirst:  3 plast:  5
task:   2 kfirst: 2 klast: 2 pfirst:  6 plast:  8
task:   3 kfirst: 3 klast: 3 pfirst:  9 plast: 11

----------------- ntasks: 5
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  1
task:   1 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   2 kfirst: 1 klast: 2 pfirst:  4 plast:  6
task:   3 kfirst: 2 klast: 2 pfirst:  7 plast:  8
task:   4 kfirst: 3 klast: 3 pfirst:  9 plast: 11

----------------- ntasks: 6
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  1
task:   1 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   2 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   3 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   4 kfirst: 2 klast: 3 pfirst:  8 plast:  9
task:   5 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 7
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  2
task:   2 kfirst: 1 klast: 1 pfirst:  3 plast:  4
task:   3 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   4 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   5 kfirst: 2 klast: 3 pfirst:  8 plast:  9
task:   6 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 8
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  2
task:   2 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   3 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   4 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   5 kfirst: 2 klast: 2 pfirst:  7 plast:  8
task:   6 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   7 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 9
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 1 pfirst:  2 plast:  3
task:   3 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   4 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   5 kfirst: 2 klast: 2 pfirst:  6 plast:  7
task:   6 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   7 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   8 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 10
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  5
task:   5 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   6 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   7 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   8 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:   9 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 11
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   5 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   6 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   7 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   8 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   9 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  10 kfirst: 3 klast: 3 pfirst: 10 plast: 11

----------------- ntasks: 12
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   1 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   2 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   3 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   4 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   5 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   6 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   7 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   8 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:   9 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  10 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  11 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 13
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   6 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   7 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   8 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:   9 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  10 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  11 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  12 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 14
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   6 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   7 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   9 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  10 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  11 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  12 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  13 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 15
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   5 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   7 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:   9 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  10 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  11 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  12 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  13 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  14 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 16
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   4 kfirst: 1 klast: 1 pfirst:  3 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   7 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   8 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  10 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  11 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  12 kfirst: 3 klast: 3 pfirst:  9 plast:  8
task:  13 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  14 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  15 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 17
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  10 kfirst: 2 klast: 2 pfirst:  7 plast:  6
task:  11 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  12 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  13 kfirst: 3 klast: 3 pfirst:  9 plast:  8
task:  14 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  15 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  16 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 18
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   3 kfirst: 0 klast: 0 pfirst:  2 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   6 kfirst: 1 klast: 1 pfirst:  4 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:   9 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:  10 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  11 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  12 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  13 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  14 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  15 kfirst: 3 klast: 3 pfirst: 10 plast:  9
task:  16 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  17 kfirst: 3 klast: 3 pfirst: 11 plast: 11

----------------- ntasks: 19
task:   0 kfirst: 0 klast: 0 pfirst:  0 plast: -1
task:   1 kfirst: 0 klast: 0 pfirst:  0 plast:  0
task:   2 kfirst: 0 klast: 0 pfirst:  1 plast:  0
task:   3 kfirst: 0 klast: 0 pfirst:  1 plast:  1
task:   4 kfirst: 0 klast: 0 pfirst:  2 plast:  2
task:   5 kfirst: 1 klast: 1 pfirst:  3 plast:  2
task:   6 kfirst: 1 klast: 1 pfirst:  3 plast:  3
task:   7 kfirst: 1 klast: 1 pfirst:  4 plast:  4
task:   8 kfirst: 1 klast: 1 pfirst:  5 plast:  4
task:   9 kfirst: 1 klast: 1 pfirst:  5 plast:  5
task:  10 kfirst: 2 klast: 2 pfirst:  6 plast:  5
task:  11 kfirst: 2 klast: 2 pfirst:  6 plast:  6
task:  12 kfirst: 2 klast: 2 pfirst:  7 plast:  7
task:  13 kfirst: 2 klast: 2 pfirst:  8 plast:  7
task:  14 kfirst: 2 klast: 2 pfirst:  8 plast:  8
task:  15 kfirst: 3 klast: 3 pfirst:  9 plast:  9
task:  16 kfirst: 3 klast: 3 pfirst: 10 plast:  9
task:  17 kfirst: 3 klast: 3 pfirst: 10 plast: 10
task:  18 kfirst: 3 klast: 3 pfirst: 11 plast: 11

  10x10 GraphBLAS float matrix, hypersparse by col
  empty C for size, no entries, memory: 240 bytes

size of C: 240 bytes

  100x1 GraphBLAS float vector, sparse by col
  empty w for size, no entries, memory: 232 bytes

size of w: 232 bytes

  1x1 GraphBLAS float scalar, sparse by col
  empty scalar for size, no entries, memory: 232 bytes

size of scalar: 232 bytes

  10x10 GraphBLAS float matrix, hypersparse by col
  non-empty C for size (with pending), 1 entry, memory: 5.4 KB
  pending tuples: 7 max pending: 256 zombies: 0

    (0,1)    0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 2    1
    row: 2 col: 3    2
    row: 3 col: 4    3
    row: 4 col: 5    4
    row: 5 col: 6    5
    row: 6 col: 7    6
    row: 7 col: 8    7
  pending operator: implicit 2nd

size of C: 5480 bytes

  100x1 GraphBLAS float vector, sparse by col
  non-empty w for size (with pending), 1 entry, memory: 3.3 KB
  pending tuples: 7 max pending: 256 zombies: 0

    (0,0)    0
  pending tuples:
    GraphBLAS type:  float size: 4
    row: 1 col: 0    1
    row: 2 col: 0    2
    row: 3 col: 0    3
    row: 4 col: 0    4
    row: 5 col: 0    5
    row: 6 col: 0    6
    row: 7 col: 0    7
  pending operator: implicit 2nd

size of w: 3424 bytes

  1x1 GraphBLAS float scalar, full by col
  non-empty scalar for size, 1 entry, memory: 224 bytes
  iso value:    3

    (0,0)    3
size of scalar: 224 bytes

  10x10 GraphBLAS float matrix, sparse by col
  non-empty C for size (no pending), 8 entries, memory: 496 bytes

    (0,1)    0
    (1,2)    1
    (2,3)    2
    (3,4)    3
    (4,5)    4
    (5,6)    5
    (6,7)    6
    (7,8)    7

size of C: 496 bytes

  100x1 GraphBLAS float vector, bitmap by col
  non-empty w for size (no pending), 8 entries, memory: 716 bytes

    (0,0)    0
    (1,0)    1
    (2,0)    2
    (3,0)    3
    (4,0)    4
    (5,0)    5
    (6,0)    6
    (7,0)    7

size of w: 716 bytes

GB_mex_about3: all tests passed


  1x3 GraphBLAS int32_t matrix, bitmap by row
  A for v5.1.7 test: initial, 3 entries, memory: 236 bytes

    (0,0)   -3
    (0,1)   10
    (0,2)   -4


  1x3 GraphBLAS int32_t matrix, bitmap by row
  A for v5.1.7 test: spones(A), 3 entries, memory: 232 bytes
  iso value:   1

    (0,0)   1
    (0,1)   1
    (0,2)   1


GB_mex_about4: all tests passed, time: 0.000341177


    GraphBLAS IndexUnaryOp: rowindex32 (built-in): z=rowindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: rowindex64 (built-in): z=rowindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colindex32 (built-in): z=colindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: colindex64 (built-in): z=colindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: diagindex32 (built-in): z=diagindex(x,i,j,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: diagindex64 (built-in): z=diagindex(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: tril (built-in): z=tril(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: triu (built-in): z=triu(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: diag (built-in): z=diag(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: offdiag (built-in): z=offdiag(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colle (built-in): z=colle(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: colgt (built-in): z=colgt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: rowle (built-in): z=rowle(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: rowgt (built-in): z=rowgt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_bool (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valueeq_int8 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valueeq_int16 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valueeq_int32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valueeq_int64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_uint8 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valueeq_uint16 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valueeq_uint32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valueeq_uint64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valueeq_fp32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valueeq_fp64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valueeq_fc32 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float complex size: 8
    GraphBLAS type: ytype float complex size: 8

    GraphBLAS IndexUnaryOp: valueeq_fc64 (built-in): z=valueeq(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double complex size: 16
    GraphBLAS type: ytype double complex size: 16

    GraphBLAS IndexUnaryOp: valuene_bool (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuene_int8 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuene_int16 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuene_int32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuene_int64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuene_uint8 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuene_uint16 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuene_uint32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuene_uint64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuene_fp32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuene_fp64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuene_fc32 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float complex size: 8
    GraphBLAS type: ytype float complex size: 8

    GraphBLAS IndexUnaryOp: valuene_fc64 (built-in): z=valuene(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double complex size: 16
    GraphBLAS type: ytype double complex size: 16

    GraphBLAS IndexUnaryOp: valuelt_bool (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuelt_int8 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuelt_int16 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuelt_int32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuelt_int64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuelt_uint8 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuelt_uint16 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuelt_uint32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuelt_uint64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuelt_fp32 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuelt_fp64 (built-in): z=valuelt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuele_bool (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuele_int8 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuele_int16 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuele_int32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuele_int64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuele_uint8 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuele_uint16 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuele_uint32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuele_uint64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuele_fp32 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuele_fp64 (built-in): z=valuele(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuegt_bool (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuegt_int8 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuegt_int16 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuegt_int32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuegt_int64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuegt_uint8 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuegt_uint16 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuegt_uint32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuegt_uint64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuegt_fp32 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuegt_fp64 (built-in): z=valuegt(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: valuege_bool (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype bool size: 1
    GraphBLAS type: ytype bool size: 1

    GraphBLAS IndexUnaryOp: valuege_int8 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int8_t size: 1
    GraphBLAS type: ytype int8_t size: 1

    GraphBLAS IndexUnaryOp: valuege_int16 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int16_t size: 2
    GraphBLAS type: ytype int16_t size: 2

    GraphBLAS IndexUnaryOp: valuege_int32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4

    GraphBLAS IndexUnaryOp: valuege_int64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS IndexUnaryOp: valuege_uint8 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint8_t size: 1
    GraphBLAS type: ytype uint8_t size: 1

    GraphBLAS IndexUnaryOp: valuege_uint16 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint16_t size: 2
    GraphBLAS type: ytype uint16_t size: 2

    GraphBLAS IndexUnaryOp: valuege_uint32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint32_t size: 4
    GraphBLAS type: ytype uint32_t size: 4

    GraphBLAS IndexUnaryOp: valuege_uint64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype uint64_t size: 8
    GraphBLAS type: ytype uint64_t size: 8

    GraphBLAS IndexUnaryOp: valuege_fp32 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS IndexUnaryOp: valuege_fp64 (built-in): z=valuege(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8

    GraphBLAS IndexUnaryOp: nothing NULL

    GraphBLAS IndexUnaryOp: plus     IndexUnaryOp has an invalid opcode

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void banded_idx                        
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    if (d < 0) d = -d ;                
    (*z) = (d <= *thunk) ;             
}

    GraphBLAS IndexUnaryOp: upperbanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

    GraphBLAS IndexUnaryOp: upperbanded64 (user-defined): z=upperbanded_idx_int64(x,i,j,y)
    GraphBLAS type: ztype int64_t size: 8
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx_int64                     
(                                              
    int64_t *z,                                
    const int64_t *x,   // unused              
    int64_t i,                                 
    int64_t j,                                 
    const int64_t *thunk                       
)                                              
{                                              
    int64_t d = j-i ;                          
    (*z) = (int64_t) (d >= 0 && d <= *thunk) ; 
}

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: load) 
   0.000238 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 0
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   2.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: load) 
   0.000232 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 1
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   2.62e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: load) 
   0.000248 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 2
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   2.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   6.2e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: load) 
   0.000502 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 3
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   3.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.38e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   3.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: run) (jit: run) (sparse to bitmap) 
   3.5e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 4
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   6.91e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.1e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: run) (jit: run) (sparse to bitmap) 
   3e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 5
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.78e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.29e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: run) (jit: run) (sparse to bitmap) 
   3.41e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 6
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.2e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.51e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: run) (jit: run) (sparse to bitmap) 
   3.5e-05 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 7
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.11e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.78e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.31e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: load) 
   0.000465 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 8
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 366 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   3e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (A bitmap) (bitmap select) (jit: load) 
   0.000282 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 9
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) 
   2.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 486 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (bitmap/full transpose) (jit: run) 
   3.22e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: load) 
   0.000295 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 10
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   6.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.69e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   7.39e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A for select:banded, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: load) 
   0.000546 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 11
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   2.79e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) 
   1.88e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, bitmap by col
  sparsity control: bitmap only
  A, 29 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (bitmap/full transpose) (jit: run) 
   3.19e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: load) (jit: load) (sparse to bitmap) 
   0.000618 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 12
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.12e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.31e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.78e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   3e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.51e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 620 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.6e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405

 [ GrB_select (jit: load) (jit: load) (sparse to bitmap) 
   0.000576 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 486 bytes

    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 486 bytes

    (0,1)   1
    (1,1)   101
    (1,2)   102
    (2,2)   202
    (2,3)   203
    (3,3)   303
    (3,4)   304
    (4,4)   404
    (4,5)   405


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 486 bytes

    (0,1)   100
    (1,1)   101
    (1,2)   201
    (2,2)   202
    (2,3)   302
    (3,3)   303
    (3,4)   403
    (4,4)   404


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 13
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.12e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   9.78e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) 
   2.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.7e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 736 bytes

    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   3.7e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: load) (jit: load) (sparse to bitmap) 
   0.000414 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 14
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   5.96e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.15e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.22e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   9.06e-06 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.91e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   3.81e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.6e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   6.01e-05 sec ]
dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.91e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 632 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int32_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42

 [ GrB_select (iso select) (jit: load) (jit: load) (sparse to bitmap) 
   0.000602 sec ]

  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 13 entries, memory: 254 bytes
  iso value:   42

    (1,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = apply:banded (A), 29 entries, memory: 486 bytes

    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (0,5)   0
    (1,5)   0
    (2,5)   0
    (3,5)   0
    (4,5)   1


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = upper_banded (A), 9 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42
    (4,5)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = upper_banded (A'), 8 entries, memory: 254 bytes
  iso value:   42

    (0,1)   42
    (1,1)   42
    (1,2)   42
    (2,2)   42
    (2,3)   42
    (3,3)   42
    (3,4)   42
    (4,4)   42


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

=======================================MALLOC DEBUG ON 15
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   8.82e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   7.87e-06 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.1e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.19e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) 
   1.38e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   4.72e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) 
   2.5e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.29e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   4.41e-05 sec ]
dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, sparse by col
  E, 29 entries, memory: 525 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0

dump stuff:

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A, 29 entries, memory: 512 bytes
  iso value:   42

    (1,0)   42
    (2,0)   42
    (3,0)   42
    (4,0)   42
    (0,1)   42
    (1,1)   42
    (2,1)   42
    (3,1)   42
    (4,1)   42
    (0,2)   42
    (1,2)   42
    (2,2)   42
    (3,2)   42
    (4,2)   42
    (0,3)   42
    (1,3)   42
    (2,3)   42
    (3,3)   42
    (4,3)   42
    (0,4)   42
    (1,4)   42
    (2,4)   42
    (3,4)   42
    (4,4)   42
    (0,5)   42
    (1,5)   42
    (2,5)   42
    (3,5)   42
    (4,5)   42


    GraphBLAS IndexUnaryOp: UpperBanded (user-defined): z=upperbanded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void upperbanded_idx                   
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    (*z) = (d >= 0 && d <= *thunk) ;   
}

  6x5 GraphBLAS bool matrix, hypersparse by col
  E, no entries, memory: 240 bytes

 [ GrB_apply (transpose-op) (iso transpose) (4-thread non-atomic bucket transpose) (jit: run) (sparse to bitmap) 
   5.2e-05 sec ]
MALLOC DEBUG OFF

  6x5 GraphBLAS bool matrix, bitmap by col
  E = apply:upper_banded (A'), 29 entries, memory: 276 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, bitmap by col
  E = apply:upper_banded64 (A'), 29 entries, memory: 486 bytes

    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


  6x5 GraphBLAS int64_t matrix, full by col
  E = apply:upper_banded64 (A'), 30 entries, memory: 456 bytes

    (0,0)   1
    (1,0)   0
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (5,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   0
    (3,1)   0
    (4,1)   0
    (5,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   0
    (4,2)   0
    (5,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   0
    (5,3)   0
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1
    (5,4)   0


 0 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 752 bytes

    (0,0)   0
    (1,0)   100
    (2,0)   200
    (3,0)   300
    (4,0)   400
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (3,1)   301
    (4,1)   401
    (0,2)   2
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (4,2)   402
    (0,3)   3
    (1,3)   103
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (0,4)   4
    (1,4)   104
    (2,4)   204
    (3,4)   304
    (4,4)   404
    (0,5)   5
    (1,5)   105
    (2,5)   205
    (3,5)   305
    (4,5)   405


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 486 bytes

    (0,0)   0
    (1,0)   100
    (0,1)   1
    (1,1)   101
    (2,1)   201
    (1,2)   102
    (2,2)   202
    (3,2)   302
    (2,3)   203
    (3,3)   303
    (4,3)   403
    (3,4)   304
    (4,4)   404
    (4,5)   405

C(0,0) = 0
0 
C(0,1) = 1
1 
C(1,0) = 100
100 
C(1,1) = 101
101 
C(1,2) = 102
102 
C(2,1) = 201
201 
C(2,2) = 202
202 
C(2,3) = 203
203 
C(3,2) = 302
302 
C(3,3) = 303
303 
C(3,4) = 304
304 
C(4,3) = 403
403 
C(4,4) = 404
404 
C(4,5) = 405
405 

 1 ##########################################

  5x6 GraphBLAS int64_t matrix, sparse by col
  sparsity control: sparse only
  A for select:banded, 30 entries, memory: 520 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (2,0)   99
    (3,0)   99
    (4,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (3,1)   99
    (4,1)   99
    (0,2)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (4,2)   99
    (0,3)   99
    (1,3)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (0,4)   99
    (1,4)   99
    (2,4)   99
    (3,4)   99
    (4,4)   99
    (0,5)   99
    (1,5)   99
    (2,5)   99
    (3,5)   99
    (4,5)   99


  5x6 GraphBLAS int64_t matrix, bitmap by col
  C = select:banded (A), 14 entries, memory: 254 bytes
  iso value:   99

    (0,0)   99
    (1,0)   99
    (0,1)   99
    (1,1)   99
    (2,1)   99
    (1,2)   99
    (2,2)   99
    (3,2)   99
    (2,3)   99
    (3,3)   99
    (4,3)   99
    (3,4)   99
    (4,4)   99
    (4,5)   99

C(0,0) = 99
99 
C(0,1) = 99
99 
C(1,0) = 99
99 
C(1,1) = 99
99 
C(1,2) = 99
99 
C(2,1) = 99
99 
C(2,2) = 99
99 
C(2,3) = 99
99 
C(3,2) = 99
99 
C(3,3) = 99
99 
C(3,4) = 99
99 
C(4,3) = 99
99 
C(4,4) = 99
99 
C(4,5) = 99
99 

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype NULL
    IndexUnaryOp has an invalid ztype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype NULL
    IndexUnaryOp has an invalid ytype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype unknown type
    IndexUnaryOp has an invalid xtype

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    IndexUnaryOp has a NULL function pointer

    GraphBLAS Operator: banded: invalid opcode

    GraphBLAS IndexUnaryOp: banded (user-defined): z=banded_idx(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: xtype int64_t size: 8
    GraphBLAS type: ytype int64_t size: 8
void banded_idx                        
(                                      
    bool *z,                           
    const int64_t *x,   // unused      
    int64_t i,                         
    int64_t j,                         
    const int64_t *thunk               
)                                      
{                                      
    int64_t d = j-i ;                  
    if (d < 0) d = -d ;                
    (*z) = (d <= *thunk) ;             
}

    GraphBLAS BinaryOp: plus (built-in): z=plus(x,y)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4
    GraphBLAS type: ytype float size: 4

    GraphBLAS UnaryOp: abs (built-in): z=abs(x)
    GraphBLAS type: ztype float size: 4
    GraphBLAS type: xtype float size: 4

    GraphBLAS IndexUnaryOp: tril_idx (built-in): z=tril(x,i,j,y)
    GraphBLAS type: ztype bool size: 1
    GraphBLAS type: ytype int64_t size: 8

    GraphBLAS SelectOp: tril_selectop: C=tril(A,k)

    GraphBLAS Operator: null: NULL

    GraphBLAS BinaryOp: ignore_dup ignore_dup

  4x4 GraphBLAS mytype matrix, bitmap by col
  A of MyType, 1 entry, memory: 240 bytes
  iso value: [user-defined value]

    (2,3) [user-defined value]

error expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrM_Matrix_apply_IndexOp_INT32 (C, M, accum, op, A, thunk, desc)
Incompatible type for z=banded_idx(x,i,j,thunk):
input A of type [mytype]
cannot be typecast to x input of type [int64_t]
error expected: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_apply_IndexOp_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for z=banded_idx(x,i,j,thunk):
input scalar of type [mytype]
cannot be typecast to thunk input of type [int64_t]

  4x4 GraphBLAS mytype matrix, bitmap by col
  C of MyType, 1 entry, memory: 240 bytes
  iso value: [user-defined value]

    (2,3) [user-defined value]

size of mytype: 8

  3x4 GraphBLAS float matrix, bitmap by col
  A for serialize, 2 entries, memory: 276 bytes

    (1,1)    9.1
    (2,2)    1.1


  3x4 GraphBLAS float matrix, bitmap by col
  C from deserialize, 2 entries, memory: 276 bytes

    (1,1)    9.1
    (2,2)    1.1


    GraphBLAS Descriptor: desc with secure import 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure

    GraphBLAS Descriptor: desc with secure import 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure

    GraphBLAS Descriptor: desc with secure & lz4hc+4 
    d.out      = default   
    d.mask     = default   
    d.in0      = default   
    d.in1      = default   
    d.axb      = default   
    d.import   = secure
    d.compression = 2005

  100x100 GraphBLAS float matrix, hypersparse by col
  A conformed, 1 entry, memory: 528 bytes
  iso value:    1

    (0,0)    1


  4x4 GraphBLAS float matrix, full by col
  A iso to export, 16 entries, memory: 224 bytes
  iso value:    2

    (0,0)    2
    (1,0)    2
    (2,0)    2
    (3,0)    2
    (0,1)    2
    (1,1)    2
    (2,1)    2
    (3,1)    2
    (0,2)    2
    (1,2)    2
    (2,2)    2
    (3,2)    2
    (0,3)    2
    (1,3)    2
    (2,3)    2
    (3,3)    2
(1)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input A type [double]
cannot be typecast to operator input of type [mytype]
(2)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input A type [double]
cannot be typecast to operator input of type [mytype]
(3)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Incompatible type for C=donothing(A,Thunk):
input Thunk type [double] and op thunk type [mytype] not compatible
(4)------------------------------------------------

expected error: GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)
Output of user-defined IndexUnaryOp donothing is mytype
which cannot be typecasted to bool


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select output, 5 entries, memory: 312 bytes
  iso value:    3

    (0,0)    3
    (1,1)    3
    (2,2)    3
    (3,3)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLLE output, 3 entries, memory: 296 bytes
  iso value:    3

    (0,0)    3
    (1,1)    3
    (2,2)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLGT output, 10 entries, memory: 352 bytes
  iso value:    3

    (0,3)    3
    (1,3)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (0,4)    3
    (1,4)    3
    (2,4)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select ROWGT output, 10 entries, memory: 352 bytes
  iso value:    3

    (3,0)    3
    (4,0)    3
    (3,1)    3
    (4,1)    3
    (3,2)    3
    (4,2)    3
    (3,3)    3
    (4,3)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select COLINDEX output, 20 entries, memory: 432 bytes
  iso value:    3

    (0,0)    3
    (1,0)    3
    (2,0)    3
    (3,0)    3
    (4,0)    3
    (0,1)    3
    (1,1)    3
    (2,1)    3
    (3,1)    3
    (4,1)    3
    (0,3)    3
    (1,3)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (0,4)    3
    (1,4)    3
    (2,4)    3
    (3,4)    3
    (4,4)    3


  5x5 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A iso select Banded output, 13 entries, memory: 376 bytes
  iso value:    3

    (0,0)    3
    (1,0)    3
    (0,1)    3
    (1,1)    3
    (2,1)    3
    (1,2)    3
    (2,2)    3
    (3,2)    3
    (2,3)    3
    (3,3)    3
    (4,3)    3
    (3,4)    3
    (4,4)    3


  5x1 GraphBLAS int64_t vector, bitmap by col
  w for select Banded, 5 entries, memory: 264 bytes

    (0,0)   0
    (1,0)   1
    (2,0)   2
    (3,0)   3
    (4,0)   4


  5x1 GraphBLAS int64_t vector, bitmap by col
  w from select Banded output, 2 entries, memory: 264 bytes

    (0,0)   0
    (1,0)   1


  5x1 GraphBLAS int64_t vector, full by col
  w for apply Banded , 5 entries, memory: 224 bytes
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3

  5x1 GraphBLAS int64_t vector, full by col
  w from apply Banded output, 5 entries, memory: 256 bytes

    (0,0)   1
    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0


  5x5 GraphBLAS int64_t matrix, full by col
  A for apply Banded , 25 entries, memory: 224 bytes
  iso value:   3

    (0,0)   3
    (1,0)   3
    (2,0)   3
    (3,0)   3
    (4,0)   3
    (0,1)   3
    (1,1)   3
    (2,1)   3
    (3,1)   3
    (4,1)   3
    (0,2)   3
    (1,2)   3
    (2,2)   3
    (3,2)   3
    (4,2)   3
    (0,3)   3
    (1,3)   3
    (2,3)   3
    (3,3)   3
    (4,3)   3
    (0,4)   3
    (1,4)   3
    (2,4)   3
    (3,4)   3
    (4,4)   3

  5x5 GraphBLAS int64_t matrix, full by col
  A from apply Banded output, 25 entries, memory: 416 bytes

    (0,0)   1
    (1,0)   1
    (2,0)   0
    (3,0)   0
    (4,0)   0
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   0
    (4,1)   0
    (0,2)   0
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   0
    (0,3)   0
    (1,3)   0
    (2,3)   1
    (3,3)   1
    (4,3)   1
    (0,4)   0
    (1,4)   0
    (2,4)   0
    (3,4)   1
    (4,4)   1


  5x4 GraphBLAS int64_t matrix, full by col
  A iso, 20 entries, memory: 224 bytes
  iso value:   1

    (0,0)   1
    (1,0)   1
    (2,0)   1
    (3,0)   1
    (4,0)   1
    (0,1)   1
    (1,1)   1
    (2,1)   1
    (3,1)   1
    (4,1)   1
    (0,2)   1
    (1,2)   1
    (2,2)   1
    (3,2)   1
    (4,2)   1
    (0,3)   1
    (1,3)   1
    (2,3)   1
    (3,3)   1
    (4,3)   1
 [ GrB_apply (in-place-op) 
   8.11e-06 sec ]

  5x4 GraphBLAS int64_t matrix, full by col
  A after apply rowindex, 20 entries, memory: 376 bytes

    (0,0)   0
    (1,0)   1
    (2,0)   2
    (3,0)   3
    (4,0)   4
    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (0,2)   0
    (1,2)   1
    (2,2)   2
    (3,2)   3
    (4,2)   4
    (0,3)   0
    (1,3)   1
    (2,3)   2
    (3,3)   3
    (4,3)   4


GB_mex_about5: all tests passed

expected error:
GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
alpha cannot be an empty scalar

expected error:
GraphBLAS error: GrB_EMPTY_OBJECT
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
beta cannot be an empty scalar


  1x1 GraphBLAS myint scalar, full by col
  alpha, 1 entry, memory: 224 bytes
  iso value: [user-defined value]

    (0,0) [user-defined value]

  1x1 GraphBLAS double scalar, sparse by col
  beta, no entries, memory: 232 bytes

expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
alpha scalar of type [myint]
cannot be typecast to op input of type [double]
expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha, B, beta, desc)
beta scalar of type [myint]
cannot be typecast to op input of type [double]
expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Matrix_reduce_BinaryOp_Scalar (s, accum, binaryop, A, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same

expected error:
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Vector_reduce_BinaryOp_Scalar (s, accum, binaryop, u, desc)
Invalid binary operator: z=lt(x,y); all types of x,y,z must be the same

expected error:
GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Matrix_reduce_BinaryOp_Scalar (s, accum, binaryop, A, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid

expected error:
GraphBLAS error: GrB_NOT_IMPLEMENTED
function: GrB_Vector_reduce_BinaryOp_Scalar (s, accum, binaryop, u, desc)
Invalid binary operator: z=div(x,y) has no equivalent monoid


GB_mex_about6: all tests passed


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A valid, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


invalid A->p:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->p is too small!

invalid A->h:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->h is too small!

invalid A->Y:

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with invalid A->Y, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid
  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A with invalid A->Y (wrong type), 1 entry, memory: 496 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid
  100x100 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A valid (sparse), 1 entry, memory: 1.0 KB
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, sparse by col
  sparsity control: sparse only
  A with invalid A->Y (not hyper), 1 entry, memory: 1.2 KB
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A valid (hypersparse), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B valid (shallow hypersparse: print_mem_shallow true), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B valid (shallow hypersparse: print_mem_shallow false), 1 entry, memory: 256 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A, 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  B, 1 entry, memory: 256 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A still valid (hypersparse), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A hypersparse (pack did nothing), 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2


  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->Y invalid (not found) , 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  100x100 GraphBLAS double matrix, hypersparse by col
  sparsity control: hypersparse only
  A->Y invalid (wrong k) , 1 entry, memory: 528 bytes
  iso value:    1.2

    (0,0)    1.2

  hyper_hash invalid

  1048576x1048576 GraphBLAS double matrix, hypersparse by row
  sparsity control: hypersparse only
  A->Y with many collisions, 1024 entries, memory: 68.6 KB

    (0,0)    2
    (1,1)    2
    (2,2)    2
    (3,3)    2
    (1640,1640)    2
    (1641,1641)    2
    (1642,1642)    2
    (1643,1643)    2
    (3280,3280)    2
    (3281,3281)    2
    (3282,3282)    2
    (3283,3283)    2
    (6492,6492)    2
    (6493,6493)    2
    (6494,6494)    2
    (6495,6495)    2
    (8132,8132)    2
    (8133,8133)    2
    (8134,8134)    2
    (8135,8135)    2
    (11344,11344)    2
    (11345,11345)    2
    (11346,11346)    2
    (11347,11347)    2
    (12984,12984)    2
    (12985,12985)    2
    (12986,12986)    2
    (12987,12987)    2
    (16196,16196)    2
    ...

  1048576x1048576 GraphBLAS double matrix, sparse (jumbled) by col
  sparsity control: sparse only
  C<A>=A'*A, 1024 entries, memory: 8.0 MB

    (0,0)    4
    (1,1)    4
    (2,2)    4
    (3,3)    4
    (1640,1640)    4
    (1641,1641)    4
    (1642,1642)    4
    (1643,1643)    4
    (3280,3280)    4
    (3281,3281)    4
    (3282,3282)    4
    (3283,3283)    4
    (6492,6492)    4
    (6493,6493)    4
    (6494,6494)    4
    (6495,6495)    4
    (8132,8132)    4
    (8133,8133)    4
    (8134,8134)    4
    (8135,8135)    4
    (11344,11344)    4
    (11345,11345)    4
    (11346,11346)    4
    (11347,11347)    4
    (12984,12984)    4
    (12985,12985)    4
    (12986,12986)    4
    (12987,12987)    4
    (16196,16196)    4
    ...

avx2: 0 avx512f: 0
GraphBLAS compiled with:
[GNU gcc 7.5.0] [v7.5.0]

GB_mex_about7: all tests passed


  0x0 GraphBLAS int64_t matrix, full by col
  M_0, no entries, memory: 224 bytes
  iso value:   1

  0x1 GraphBLAS int64_t vector, full by col
  v_0, no entries, memory: 224 bytes
  iso value:   1

  0x1 GraphBLAS int64_t vector, full by col
  v_1, no entries, memory: 224 bytes
  iso value:   1

GB_mex_about8: all tests passed

compiler: GNU gcc 7.5.0 7.5.0
 [ GrB_transpose (transpose) 
   1.5e-05 sec ]
test time 7.60555e-05 sec, max threads 4

GB_mex_about10: all tests passed

    GraphBLAS type: (256-byte big type) user-defined: [bigtype] size: 256
    typedef struct { double stuff [32] ; } bigtype

    GraphBLAS UnaryOp: f1 (user-defined): z=f1(x)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
void f1 (void *z, const void *x) { (*((double *)z)) = 2*(*(double *)x) ; } 

    GraphBLAS BinaryOp: f2 (user-defined): z=f2(x,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8
void f2 (void *z, const void *x, const void *y) { (*((double *)z)) = 2*(*(double *)x) + 1 ; }   

    GraphBLAS IndexUnaryOp: i1 (user-defined): z=i1(x,i,j,y)
    GraphBLAS type: ztype double size: 8
    GraphBLAS type: xtype double size: 8
    GraphBLAS type: ytype double size: 8
void i1 (void *z, const void *x, GrB_Index i, GrB_Index j,  const void *thunk) { (*((bool *)z)) = (i == j) ; }

  10x10 GraphBLAS float matrix, hypersparse by col
  empty matrix, no entries, memory: 240 bytes


reduce empty matrix to non-opaque scalar via ANY: 0

  1x1 GraphBLAS float scalar, full by col
  scalar == 33, 1 entry, memory: 224 bytes
  iso value:    33

    (0,0)    33

reduce empty matrix to opaque scalar via ANY:

  1x1 GraphBLAS float scalar, sparse by col
  empty scalar, no entries, memory: 232 bytes


GB_mex_about9: all tests passed


test01: all tests passed
26-Apr 22:56:43 test01          0.4 sec     8: 19032 of 21586  11.8%    20.48/s [malloc] [cover]
jit: -1

======== test: test245     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test245: all tests passed
26-Apr 22:56:43 test245         0.7 sec    41: 18991 of 21586  12.0%    60.43/s [malloc] [cover]
jit: 5

======== test: test245     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test245: all tests passed
26-Apr 22:56:43 test245         0.0 sec      : 18991 of 21586  12.0% [malloc] [cover]
jit: -1

======== test: test199     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test199: all tests passed
26-Apr 22:56:43 test199         0.0 sec    17: 18974 of 21586  12.1%  1787.59/s [malloc] [cover]
jit: 5

======== test: test199     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
 [ GxB_set (sparse to bitmap) 
   4.08e-05 sec ]
 [ GxB_set (sparse to hyper) 
   1.1e-05 sec ]
 [ GrB_Matrix_wait (build hyper hash) 
   2.1e-05 sec ]
 [ GxB_set (sparse to hyper) 
   8.11e-06 sec ]
 [ GrB_Matrix_wait (build hyper hash) 
   1.41e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) 
   3.1e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) 
   1.41e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) 
   1.79e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) 
   1.69e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) 
   4.7e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) 
   5.39e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) 
   4.51e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) 
   5.01e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) 
   5.1e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) (sparse to bitmap) 
   6.29e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) (sparse to bitmap) 
   5.7e-05 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (dot2) (nthreads: 4 naslice 4 nbslice 9) (dot B<B> = H'*H) (expand bitmap/full to hyper) (sparse to bitmap) 
   7.08e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   1.19e-05 sec ]
test199: all tests passed
26-Apr 22:56:43 test199         0.0 sec      : 18974 of 21586  12.1% [malloc] [cover]
jit: -1

======== test: test83      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test83: all tests passed
26-Apr 22:56:43 test83          0.0 sec    21: 18953 of 21586  12.2%   617.48/s [malloc] [cover]
jit: 5

======== test: test83      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test83: all tests passed
26-Apr 22:56:43 test83          0.0 sec      : 18953 of 21586  12.2% [malloc] [cover]
jit: -1

======== test: test210     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test210: all tests passed
26-Apr 22:56:43 test210         0.0 sec    10: 18943 of 21586  12.2%  1460.49/s [malloc] [cover]
jit: 5

======== test: test210     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test210: all tests passed
26-Apr 22:56:43 test210         0.0 sec      : 18943 of 21586  12.2% [malloc] [cover]
jit: -1

======== test: test165     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test165: all tests passed
26-Apr 22:56:43 test165         0.0 sec    10: 18933 of 21586  12.3%   606.61/s [malloc] [cover]
jit: 5

======== test: test165     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test165: all tests passed
26-Apr 22:56:43 test165         0.0 sec      : 18933 of 21586  12.3% [malloc] [cover]
jit: -1

======== test: test219     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 32550

test219: all tests passed
26-Apr 22:56:43 test219         0.0 sec     8: 18925 of 21586  12.3%   248.99/s [malloc] [cover]
jit: 5

======== test: test219     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 4
 [ GrB_reduce (A dense) 
   5.48e-05 sec ]

test219: all tests passed
26-Apr 22:56:43 test219         0.0 sec      : 18925 of 21586  12.3% [malloc] [cover]
jit: -1

======== test: test241     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test241 -------- GrB_mxm swap_rule

test241: all tests passed
26-Apr 22:56:44 test241         0.2 sec    16: 18909 of 21586  12.4%    80.12/s [malloc] [cover]
jit: 5

======== test: test241     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test241 -------- GrB_mxm swap_rule

test241: all tests passed
26-Apr 22:56:44 test241         0.1 sec      : 18909 of 21586  12.4% [malloc] [cover]
jit: -1

======== test: test220     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test220: all tests passed
26-Apr 22:56:44 test220         0.1 sec    58: 18851 of 21586  12.7%   777.39/s [malloc] [cover]
jit: 5

======== test: test220     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test220: all tests passed
26-Apr 22:56:44 test220         0.0 sec      : 18851 of 21586  12.7% [malloc] [cover]
jit: -1

======== test: test211     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test211: all tests passed
26-Apr 22:56:44 test211         0.1 sec    17: 18834 of 21586  12.7%   336.98/s [malloc] [cover]
jit: 5

======== test: test211     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test211: all tests passed
26-Apr 22:56:44 test211         0.0 sec      : 18834 of 21586  12.7% [malloc] [cover]
jit: -1

======== test: test202     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test202: all tests passed
26-Apr 22:56:44 test202         0.1 sec    32: 18802 of 21586  12.9%   523.02/s [malloc] [cover]
jit: 5

======== test: test202     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test202: all tests passed
26-Apr 22:56:44 test202         0.0 sec     1: 18801 of 21586  12.9%   322.16/s [malloc] [cover]
jit: -1

======== test: test152     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test152: test binops with C=A+B, all dense

first          .............
second         .............
pair           .............
plus           .............
minus          .............
rminus         .............
times          .............
div            .............
rdiv           .............
iseq           .............
isne           .............
eq             .............
ne             .............
pow            .............
any            .............
oneb           .............
min            ...........
max            ...........
isgt           ...........
islt           ...........
isge           ...........
isle           ...........
gt             ...........
lt             ...........
ge             ...........
le             ...........
or             ...........
and            ...........
xor            ...........
bor            ........
band           ........
bxor           ........
bxnor          ........
bget           ........
bset           ........
bclr           ........
bshift         ........
atan2          ..
hypot          ..
fmod           ..
remainder      ..
ldexp          ..
copysign       ..
cmplx          ..
firsti         ..
firsti1        ..
firstj         ..
firstj1        ..
secondi        ..
secondi1       ..
secondj        ..
secondj1       ..
test152: all tests passed
26-Apr 22:56:46 test152         1.8 sec   843: 17958 of 21586  16.8%   465.12/s [malloc] [cover]
jit: 5

======== test: test152     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test152: test binops with C=A+B, all dense

first          .............
second         .............
pair           .............
plus           .............
minus          .............
rminus         .............
times          .............
div            .............
rdiv           .............
iseq           .............
isne           .............
eq             .............
ne             .............
pow            .............
any            .............
oneb           .............
min            ...........
max            ...........
isgt           ...........
islt           ...........
isge           ...........
isle           ...........
gt             ...........
lt             ...........
ge             ...........
le             ...........
or             ...........
and            ...........
xor            ...........
bor            ........
band           ........
bxor           ........
bxnor          ........
bget           ........
bset           ........
bclr           ........
bshift         ........
atan2          ..
hypot          ..
fmod           ..
remainder      ..
ldexp          ..
copysign       ..
cmplx          ..
firsti         ..
firsti1        ..
firstj         ..
firstj1        ..
secondi        ..
secondi1       ..
secondj        ..
secondj1       ..
test152: all tests passed
26-Apr 22:56:46 test152         0.6 sec      : 17958 of 21586  16.8% [malloc] [cover]
jit: -1

======== test: test222     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test222: all tests passed
26-Apr 22:56:46 test222         0.0 sec     5: 17953 of 21586  16.8%   144.79/s [malloc] [cover]
jit: 5

======== test: test222     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
 [ GxB_set (sparse to hyper) 
   2.91e-05 sec ]
 [ GrB_Matrix_wait (build hyper hash) 
   2e-05 sec ]
 [ GxB_Type_new 
   1.91e-06 sec ]
 [ GrB_select (iso select) (jit: undefined) (jit: undefined) (sparse to bitmap) 
   4.1e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   7.87e-06 sec ]
 [ GxB_set (sparse to hyper) 
   1.41e-05 sec ]
 [ GrB_Matrix_wait (build hyper hash) 
   1.79e-05 sec ]
 [ GxB_Type_new 
   1.91e-06 sec ]
 [ GrB_select (iso select) (jit: undefined) (jit: undefined) (in-place transpose) (iso transpose) (4-thread atomic bucket transpose) (sparse to bitmap) 
   5.98e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   7.87e-06 sec ]
 [ GxB_set 
   3.81e-06 sec ]
 [ GxB_Type_new 
   2.15e-06 sec ]
 [ GrB_select (iso select) (jit: undefined) (jit: undefined) (sparse to bitmap) 
   3.5e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   5.96e-06 sec ]
 [ GxB_set 
   4.05e-06 sec ]
 [ GxB_Type_new 
   2.15e-06 sec ]
 [ GrB_select (iso select) (jit: undefined) (jit: undefined) (in-place transpose) (iso transpose) (4-thread atomic bucket transpose) (sparse to bitmap) 
   4.98e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   8.82e-06 sec ]
 [ GxB_set (sparse to bitmap) 
   1.38e-05 sec ]
 [ GxB_Type_new 
   1.91e-06 sec ]
 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: undefined) 
   2e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   5.96e-06 sec ]
 [ GxB_set (sparse to bitmap) 
   1e-05 sec ]
 [ GxB_Type_new 
   2.15e-06 sec ]
 [ GrB_select (A bitmap) (iso select) (bitmap select) (jit: undefined) (in-place transpose) (iso transpose) (bitmap/full transpose) 
   3.6e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   1e-05 sec ]
 [ GxB_set (sparse to full) 
   8.11e-06 sec ]
 [ GxB_Type_new 
   2.15e-06 sec ]
 [ GrB_select (A full) (iso select) (bitmap select) (jit: undefined) 
   2e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   1e-05 sec ]
 [ GxB_set (sparse to full) 
   5.01e-06 sec ]
 [ GxB_Type_new 
   2.15e-06 sec ]
 [ GrB_select (A full) (iso select) (bitmap select) (jit: undefined) (in-place transpose) (iso transpose) (bitmap/full transpose) 
   3.12e-05 sec ]
 [ GxB_set (bitmap to sparse) 
   8.11e-06 sec ]

test222: all tests passed
26-Apr 22:56:46 test222         0.0 sec      : 17953 of 21586  16.8% [malloc] [cover]
jit: -1

======== test: test240     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test240 -------- GrB_mxm dot4 and saxpy5

test240: all tests passed
26-Apr 22:56:47 test240         0.2 sec    43: 17910 of 21586  17.0%   204.45/s [malloc] [cover]
jit: 5

======== test: test240     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test240 -------- GrB_mxm dot4 and saxpy5

test240: all tests passed
26-Apr 22:56:47 test240         0.2 sec      : 17910 of 21586  17.0% [malloc] [cover]
jit: -1

======== test: test186     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:49 test186         1.7 sec    81: 17829 of 21586  17.4%    48.00/s [malloc] [cover]
jit: 5

======== test: test186     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:49 test186         0.3 sec      : 17829 of 21586  17.4% [malloc] [cover]
jit: -1

======== test: test186(0)  [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:49 test186(0)      0.4 sec     4: 17825 of 21586  17.4%    10.98/s [malloc] [cover]
jit: 5

======== test: test186(0)  [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:50 test186(0)      0.4 sec      : 17825 of 21586  17.4% [malloc] [cover]
jit: -1

======== test: test186     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 32550
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:50 test186         0.3 sec     3: 17822 of 21586  17.4%     8.76/s [malloc] [cover]
jit: 5

======== test: test186     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 4
test186 --------------- C<!M>A*B for all sparsity formats
................
maxerr: 1.68851e-08
test186: all tests passed
26-Apr 22:56:50 test186         0.3 sec      : 17822 of 21586  17.4% [malloc] [cover]
jit: -1

======== test: test150     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test150: ------- GrB_mxm with typecasting and zombies (dot3)
logical int8 int16 int32 int64 uint8 uint16 uint32 uint64 single double single complex double complex 
test150: all tests passed
26-Apr 22:56:58 test150         7.4 sec    60: 17762 of 21586  17.7%     8.13/s [malloc] [cover]
jit: 5

======== test: test150     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test150: ------- GrB_mxm with typecasting and zombies (dot3)
logical int8 int16 int32 int64 uint8 uint16 uint32 uint64 single double single complex double complex 
test150: all tests passed
26-Apr 22:56:59 test150         1.6 sec      : 17762 of 21586  17.7% [malloc] [cover]
jit: -1

======== test: test239     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test239: all tests passed
26-Apr 22:56:59 test239         0.1 sec    14: 17748 of 21586  17.8%   226.51/s [malloc] [cover]
jit: 5

======== test: test239     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test239: all tests passed
26-Apr 22:56:59 test239         0.0 sec      : 17748 of 21586  17.8% [malloc] [cover]
jit: -1

======== test: test235     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test235 -----------GxB_eWiseUnion and GrB_eWiseAdd

test235: all tests passed
26-Apr 22:56:59 test235         0.0 sec    10: 17738 of 21586  17.8%   294.49/s [malloc] [cover]
jit: 5

======== test: test235     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test235 -----------GxB_eWiseUnion and GrB_eWiseAdd

test235: all tests passed
26-Apr 22:56:59 test235         0.0 sec      : 17738 of 21586  17.8% [malloc] [cover]
jit: -1

======== test: test226     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test226: all tests passed
26-Apr 22:56:59 test226         0.0 sec     8: 17730 of 21586  17.9%   526.04/s [malloc] [cover]
jit: 5

======== test: test226     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test226: all tests passed
26-Apr 22:56:59 test226         0.0 sec      : 17730 of 21586  17.9% [malloc] [cover]
jit: -1

======== test: test223     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test223: all tests passed
26-Apr 22:56:59 test223         0.0 sec     2: 17728 of 21586  17.9%    74.18/s [malloc] [cover]
jit: 5

======== test: test223     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
 [ GxB_set 
   4.48e-05 sec ]
 [ GxB_set 
   3.19e-05 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) 
   2.5e-05 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) 
   1e-05 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) 
   0.000197 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) 
   0.000236 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) 
   0.000245 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) (sparse saxpy) 
   0.00123 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) (sparse saxpy) 
   0.00121 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) (sparse saxpy) (sparse to hyper) 
   0.00429 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) (sparse saxpy) (sparse to hyper) 
   0.00424 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!S> = S*S) axbwork 358321 mwork 1 (use mask) (nthreads 2 coarse: 4) (sparse saxpy) (sparse to hyper) 
   0.0043 sec ]
 [ GrB_Matrix_wait (wait:matrix 0 zombies, 0 pending, jumbled) (build hyper hash) 
   0.000399 sec ]
 [ GxB_set (hyper to sparse) 
   3.7e-05 sec ]

test223: all tests passed
26-Apr 22:56:59 test223         0.0 sec      : 17728 of 21586  17.9% [malloc] [cover]
jit: -1

======== test: test204     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test204: all tests passed
26-Apr 22:57:00 test204         0.1 sec    18: 17710 of 21586  18.0%   315.04/s [malloc] [cover]
jit: 5

======== test: test204     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test204: all tests passed
26-Apr 22:57:00 test204         0.0 sec      : 17710 of 21586  18.0% [malloc] [cover]
jit: -1

======== test: test203     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test203: all tests passed
26-Apr 22:57:00 test203         0.0 sec    19: 17691 of 21586  18.0%   523.72/s [malloc] [cover]
jit: 5

======== test: test203     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test203: all tests passed
26-Apr 22:57:00 test203         0.0 sec      : 17691 of 21586  18.0% [malloc] [cover]
jit: -1

======== test: test183     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 32550
test183 -----------eWiseMult with hypersparse mask

test183: all tests passed
26-Apr 22:57:00 test183         0.0 sec    12: 17679 of 21586  18.1%   391.05/s [malloc] [cover]
jit: 5

======== test: test183     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 4
test183 -----------eWiseMult with hypersparse mask

test183: all tests passed
26-Apr 22:57:00 test183         0.0 sec      : 17679 of 21586  18.1% [malloc] [cover]
jit: -1

======== test: test179     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test179: --------------------------------- bitmap select

test179: all tests passed
26-Apr 22:57:00 test179         0.1 sec    21: 17658 of 21586  18.2%   223.68/s [malloc] [cover]
jit: 5

======== test: test179     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test179: --------------------------------- bitmap select

test179: all tests passed
26-Apr 22:57:00 test179         0.0 sec      : 17658 of 21586  18.2% [malloc] [cover]
jit: -1

======== test: test174     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test174: all tests passed
26-Apr 22:57:00 test174         0.1 sec    10: 17648 of 21586  18.2%   146.70/s [malloc] [cover]
jit: 5

======== test: test174     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test174: all tests passed
26-Apr 22:57:00 test174         0.0 sec      : 17648 of 21586  18.2% [malloc] [cover]
jit: -1

======== test: test155     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test155: all tests passed
26-Apr 22:57:00 test155         0.1 sec    44: 17604 of 21586  18.4%   418.72/s [malloc] [cover]
jit: 5

======== test: test155     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test155: all tests passed
26-Apr 22:57:00 test155         0.1 sec      : 17604 of 21586  18.4% [malloc] [cover]
jit: -1

======== test: test156     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test156: all tests passed
26-Apr 22:57:01 test156         0.6 sec   125: 17479 of 21586  19.0%   199.52/s [malloc] [cover]
jit: 5

======== test: test156     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test156: all tests passed
26-Apr 22:57:01 test156         0.5 sec      : 17479 of 21586  19.0% [malloc] [cover]
jit: -1

======== test: test136     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 32550
test136: GxB_subassign, special cases
test136: all tests passed
26-Apr 22:57:01 test136         0.1 sec    57: 17422 of 21586  19.3%   412.42/s [malloc] [cover]
jit: 5

======== test: test136     [malloc] [cover] [nthreads: 1 chunk: 1] jit: 4
test136: GxB_subassign, special cases
test136: all tests passed
26-Apr 22:57:01 test136         0.0 sec      : 17422 of 21586  19.3% [malloc] [cover]
jit: -1

======== test: test02      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test02: all typecast and copy tests passed
26-Apr 22:57:02 test02          0.5 sec    25: 17397 of 21586  19.4%    49.72/s [malloc] [cover]
jit: 5

======== test: test02      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test02: all typecast and copy tests passed
26-Apr 22:57:02 test02          0.1 sec      : 17397 of 21586  19.4% [malloc] [cover]
jit: -1

======== test: test109     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test109: terminal monoid with user-defined type

test109: all tests passed
26-Apr 22:57:02 test109         0.4 sec    28: 17369 of 21586  19.5%    79.83/s [malloc] [cover]
jit: 5

======== test: test109     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test109: terminal monoid with user-defined type

test109: all tests passed
26-Apr 22:57:02 test109         0.0 sec      : 17369 of 21586  19.5% [malloc] [cover]
jit: -1

======== test: test04      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

-------------------- simple mask and transpose tests

C =

    0.8147    0.6324    0.9575    0.9572
    0.9058    0.0975    0.9649    0.4854
    0.1270    0.2785    0.1576    0.8003
    0.9134    0.5469    0.9706    0.1419


Z =

    16     2     3    13
     5    11    10     8
     9     7     6    12
     4    14    15     1


Mask =

  4x4 logical array

   1   1   0   0
   0   0   1   1
   0   0   1   1
   1   1   0   0

Use Mask.  C_replace: 0 Mask_comp: 0
C3 <Mask> = C + A' :
Use Mask.  C_replace: 0 Mask_comp: 1
C3 <Mask> = C + A' :
Use Mask.  C_replace: 1 Mask_comp: 0
C3 <Mask> = C + A' :
Use Mask.  C_replace: 1 Mask_comp: 1
C3 <Mask> = C + A' :
No Mask.  C_replace: 0 Mask_comp: 0
C3 <no mask complement:0 replace:0> = C + A' :

D =

     []

No Mask.  C_replace: 0 Mask_comp: 1
C3 <no mask complement:1 replace:0> = C + A' :

D = 

  struct with fields:

    mask: 'complement'

No Mask.  C_replace: 1 Mask_comp: 0
C3 <no mask complement:0 replace:1> = C + A' :

D = 

  struct with fields:

    outp: 'replace'

No Mask.  C_replace: 1 Mask_comp: 1
C3 <no mask complement:1 replace:1> = C + A' :

D = 

  struct with fields:

    mask: 'complement'
    outp: 'replace'


test04: all tests passed
26-Apr 22:57:02 test04          0.1 sec    15: 17354 of 21586  19.6%   201.80/s [malloc] [cover]
jit: 5

======== test: test04      [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

-------------------- simple mask and transpose tests

C =

    0.8147    0.6324    0.9575    0.9572
    0.9058    0.0975    0.9649    0.4854
    0.1270    0.2785    0.1576    0.8003
    0.9134    0.5469    0.9706    0.1419


Z =

    16     2     3    13
     5    11    10     8
     9     7     6    12
     4    14    15     1


Mask =

  4x4 logical array

   1   1   0   0
   0   0   1   1
   0   0   1   1
   1   1   0   0

Use Mask.  C_replace: 0 Mask_comp: 0
C3 <Mask> = C + A' :
Use Mask.  C_replace: 0 Mask_comp: 1
C3 <Mask> = C + A' :
Use Mask.  C_replace: 1 Mask_comp: 0
C3 <Mask> = C + A' :
Use Mask.  C_replace: 1 Mask_comp: 1
C3 <Mask> = C + A' :
No Mask.  C_replace: 0 Mask_comp: 0
C3 <no mask complement:0 replace:0> = C + A' :

D =

     []

No Mask.  C_replace: 0 Mask_comp: 1
C3 <no mask complement:1 replace:0> = C + A' :

D = 

  struct with fields:

    mask: 'complement'

No Mask.  C_replace: 1 Mask_comp: 0
C3 <no mask complement:0 replace:1> = C + A' :

D = 

  struct with fields:

    outp: 'replace'

No Mask.  C_replace: 1 Mask_comp: 1
C3 <no mask complement:1 replace:1> = C + A' :

D = 

  struct with fields:

    mask: 'complement'
    outp: 'replace'


test04: all tests passed
26-Apr 22:57:02 test04          0.0 sec      : 17354 of 21586  19.6% [malloc] [cover]
jit: -1

======== test: test207     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test207: all tests passed
26-Apr 22:57:02 test207         0.0 sec     2: 17352 of 21586  19.6%   254.68/s [malloc] [cover]
jit: 5

======== test: test207     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

test207: all tests passed
26-Apr 22:57:02 test207         0.0 sec      : 17352 of 21586  19.6% [malloc] [cover]
jit: -1

======== test: test221     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

test221: all tests passed
26-Apr 22:57:02 test221         0.0 sec     2: 17350 of 21586  19.6%   192.33/s [malloc] [cover]
jit: 5

======== test: test221     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
 [ GxB_set (sparse to bitmap) 
   4.7e-05 sec ]
 [ GxB_set (sparse to full) 
   5.96e-06 sec ]
 [ GrB_assign 
   1.12e-05 sec ]
 [ GxB_set (sparse to bitmap) 
   1.29e-05 sec ]
 [ GrB_assign 
   1.91e-06 sec ]
 [ GxB_set (sparse to bitmap) 
   1e-05 sec ]
 [ GrB_assign Method:bit5:whole C += A 
   1.98e-05 sec ]
 [ GxB_set (bitmap to full) 
   2.86e-06 sec ]
 [ GxB_Matrix_import_FullC 
   1.91e-06 sec ]
 [ GxB_Matrix_export_FullC 
   3.1e-06 sec ]
 [ GxB_Matrix_import_FullC 
   9.54e-07 sec ]
 [ GxB_Matrix_export_FullC 
   2.15e-06 sec ]
 [ GxB_Matrix_import_FullC 
   1.19e-06 sec ]
 [ GxB_Matrix_export_FullC 
   1.91e-06 sec ]

test221: all tests passed
26-Apr 22:57:02 test221         0.0 sec      : 17350 of 21586  19.6% [malloc] [cover]
jit: -1

======== test: test162     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550
test162: all tests passed
26-Apr 22:57:03 test162         0.1 sec     5: 17345 of 21586  19.6%    88.16/s [malloc] [cover]
jit: 5

======== test: test162     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4
test162: all tests passed
26-Apr 22:57:03 test162         0.0 sec      : 17345 of 21586  19.6% [malloc] [cover]
jit: -1

======== test: test159     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 32550

types: int32 double int64
op: firsti
op: firsti1
op: firstj
op: firstj1
op: secondi
op: secondi1
op: secondj
op: secondj1
op: times
op: div
op: first
op: second

types: int32 double int32
op: firsti
op: firsti1
op: firstj
op: firstj1
op: secondi
op: secondi1
op: secondj
op: secondj1
op: times
op: div
op: first
op: second

types: int32 double int64
op: firsti
op: firsti1
op: firstj
op: firstj1
op: secondi
op: secondi1
op: secondj
op: secondj1
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: times
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: div
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: first
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: second
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490

types: int32 double int32
op: firsti
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: firsti1
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: firstj
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: firstj1
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: secondi
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: secondi1
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: secondj
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: secondj1
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: times
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: div
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: first
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
op: second
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490
Gotcha: tmp_source/GB_AxB_dot2.c line: 490

test159: all tests passed
26-Apr 22:57:30 test159        27.2 sec   150: 17195 of 21586  20.3%     5.52/s [malloc] [cover]
jit: 5

======== test: test159     [malloc] [cover] [nthreads: 4 chunk: 1] jit: 4

types: int32 double int64
op: firsti
op: firsti1
op: firstj
op: firstj1
op: secondi
op: secondi1
op: secondj
op: secondj1
op: times
op: div
op: first
op: second

types: int32 double int32
op: firsti
op: firsti1
{Operation terminated by user during GB_spec_op


In GB_spec_mxm (line 109)
                T.matrix (i,j) = GB_spec_op (add, T.matrix (i,j), z) ;

In test159 (line 89)
        C1 = GB_spec_mxm (Cin, [ ], [ ], semiring, B, A, dtt) ;

In runtest (line 7)
eval (testscript) ;

In logstat (line 98)
        runtest (testscript)

In testall (line 139)
logstat ('test159',t,o) ; % test A*B
} 

>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> exit
[?1l>[0;36mslash $[0m exit
exit

Script done on 2023-04-26 22:58:05-0500
