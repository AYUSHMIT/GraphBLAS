function grbmake
%GBMAKE compile the GraphBLAS library for statement coverage testing
%
% This function compiles ../Source to create the
% libgraphblas_tcov.so (or *.dylib) library, inserting code code for statement
% coverage testing.  It does not compile the mexFunctions.
%
% See also: grbcover, grbcover_edit

% SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2023, All Rights Reserved.
% SPDX-License-Identifier: Apache-2.0

if (ispc)
    error ('The tests in Tcov are not ported to Windows') ;
end

% copy the GB_rename.h and GB_coverage.c files
copyfile ('../GraphBLAS/rename/GB_rename.h', 'tmp_include/GB_rename.h') ;
copyfile ('GB_coverage.c', 'tmp_source/GB_coverage.c') ;

% create the include files and place in tmp_include
hfiles = [ ...
        dir('../Include/GraphBLAS.h') ; ...
        dir('../Source/GB.h') ; ...
        %
        dir('../Source/jitifyer/*.h') ; ...
        dir('../Source/jit_wrappers/*.h') ; ...
        dir('../Source/assign/*.h') ; ...
        dir('../Source/cumsum/*.h') ; ...
        dir('../Source/omp/*.h') ; ...
        dir('../Source/aliased/*.h') ; ...
        dir('../Source/op/*.h') ; ...
        dir('../Source/init/*.h') ; ...
        dir('../Source/descriptor/*.h') ; ...
        dir('../Source/matrix/*.h') ; ...
        dir('../Source/vector/*.h') ; ...
        dir('../Source/helper/*.h') ; ...
        dir('../Source/werk/*.h') ; ...
        dir('../Source/transplant/*.h') ; ...
        dir('../Source/callback/*.h') ; ...
        dir('../Source/hyper/*.h') ; ...
        dir('../Source/clear/*.h') ; ...
        dir('../Source/type/*.h') ; ...
        dir('../Source/sort/*.h') ; ...
        dir('../Source/scalar/*.h') ; ...
        dir('../Source/ij/*.h') ; ...
        dir('../Source/diag/*.h') ; ...
        dir('../Source/monoid/*.h') ; ...
        dir('../Source/slice/*.h') ; ...
        dir('../Source/wait/*.h') ; ...
        dir('../Source/reshape/*.h') ; ...
        dir('../Source/resize/*.h') ; ...
        dir('../Source/print/*.h') ; ...
        dir('../Source/compatible/*.h') ; ...
        dir('../Source/nvals/*.h') ; ...
        dir('../Source/cpu/*.h') ; ...
        dir('../Source/cast/*.h') ; ...
        dir('../Source/dup/*.h') ; ...
        dir('../Source/kronecker/*.h') ; ...
        dir('../Source/positional/*.h') ; ...
        dir('../Source/iso/*.h') ; ...
        dir('../Source/unaryop/*.h') ; ...
        dir('../Source/split/*.h') ; ...
        dir('../Source/concat/*.h') ; ...
        dir('../Source/global/*.h') ; ...
        dir('../Source/lz4_wrapper/*.h') ; ...
        dir('../Source/zstd_wrapper/*.h') ; ...
        dir('../Source/builtin/*.h') ; ...
        dir('../Source/extract/*.h') ; ...
        dir('../Source/pending/*.h') ; ...
        dir('../Source/indexunaryop/*.h') ; ...
        dir('../Source/math/*.h') ; ...
        dir('../Source/apply/*.h') ; ...
        dir('../Source/context/*.h') ; ...
        dir('../Source/binaryop/*.h') ; ...
        dir('../Source/builder/*.h') ; ...
        dir('../Source/mask/*.h') ; ...
        dir('../Source/element/*.h') ; ...
        dir('../Source/memory/*.h') ; ...
        dir('../Source/serialize/*.h') ; ...
        dir('../Source/get_set/*.h') ; ...
        dir('../Source/iterator/*.h') ; ...
        dir('../Source/semiring/*.h') ; ...
        dir('../Source/extractTuples/*.h') ; ...
        dir('../Source/convert/*.h') ; ...
        dir('../Source/ewise/*.h') ; ...
        dir('../Source/reduce/*.h') ; ...
        dir('../Source/import_export/*.h') ; ...
        dir('../Source/pack_unpack/*.h') ; ...
        dir('../Source/transpose/*.h') ; ...
        dir('../Source/select/*.h') ; ...
        dir('../Source/mxm/*.h') ; ...
        %
        dir('../GraphBLAS/Config/*.h') ; ...
        dir('../Source/Template') ; ...
        dir('../Source/*/template') ; ...
        dir('../Source/Factories') ; ...
        dir('../Source/Shared') ; ...
        dir('../JITpackage/*.h') ; ...
        dir('../Source/FactoryKernels/*.h') ; ] ;

count = grbcover_edit (hfiles, 0, 'tmp_include') ;
fprintf ('hfile count: %d\n', count) ;

% create the C files and place in tmp_source
cfiles = [ ...
        dir('../Source/jitifyer/*.c') ; ...
        dir('../Source/jit_wrappers/*.c') ; ...
        dir('../Source/assign/*.c') ; ...
        dir('../Source/cumsum/*.c') ; ...
        dir('../Source/omp/*.c') ; ...
        dir('../Source/aliased/*.c') ; ...
        dir('../Source/op/*.c') ; ...
        dir('../Source/init/*.c') ; ...
        dir('../Source/descriptor/*.c') ; ...
        dir('../Source/matrix/*.c') ; ...
        dir('../Source/vector/*.c') ; ...
        dir('../Source/helper/*.c') ; ...
        dir('../Source/werk/*.c') ; ...
        dir('../Source/transplant/*.c') ; ...
        dir('../Source/callback/*.c') ; ...
        dir('../Source/hyper/*.c') ; ...
        dir('../Source/clear/*.c') ; ...
        dir('../Source/type/*.c') ; ...
        dir('../Source/sort/*.c') ; ...
        dir('../Source/scalar/*.c') ; ...
        dir('../Source/ij/*.c') ; ...
        dir('../Source/diag/*.c') ; ...
        dir('../Source/monoid/*.c') ; ...
        dir('../Source/slice/*.c') ; ...
        dir('../Source/wait/*.c') ; ...
        dir('../Source/reshape/*.c') ; ...
        dir('../Source/resize/*.c') ; ...
        dir('../Source/print/*.c') ; ...
        dir('../Source/compatible/*.c') ; ...
        dir('../Source/nvals/*.c') ; ...
        dir('../Source/cpu/*.c') ; ...
        dir('../Source/cast/*.c') ; ...
        dir('../Source/dup/*.c') ; ...
        dir('../Source/kronecker/*.c') ; ...
        dir('../Source/positional/*.c') ; ...
        dir('../Source/iso/*.c') ; ...
        dir('../Source/unaryop/*.c') ; ...
        dir('../Source/split/*.c') ; ...
        dir('../Source/concat/*.c') ; ...
        dir('../Source/global/*.c') ; ...
        dir('../Source/lz4_wrapper/*.c') ; ...
        dir('../Source/zstd_wrapper/*.c') ; ...
        dir('../Source/builtin/*.c') ; ...
        dir('../Source/extract/*.c') ; ...
        dir('../Source/pending/*.c') ; ...
        dir('../Source/indexunaryop/*.c') ; ...
        dir('../Source/math/*.c') ; ...
        dir('../Source/apply/*.c') ; ...
        dir('../Source/context/*.c') ; ...
        dir('../Source/binaryop/*.c') ; ...
        dir('../Source/builder/*.c') ; ...
        dir('../Source/mask/*.c') ; ...
        dir('../Source/element/*.c') ; ...
        dir('../Source/memory/*.c') ; ...
        dir('../Source/serialize/*.c') ; ...
        dir('../Source/get_set/*.c') ; ...
        dir('../Source/iterator/*.c') ; ...
        dir('../Source/semiring/*.c') ; ...
        dir('../Source/extractTuples/*.c') ; ...
        dir('../Source/convert/*.c') ; ...
        dir('../Source/ewise/*.c') ; ...
        dir('../Source/reduce/*.c') ; ...
        dir('../Source/import_export/*.c') ; ...
        dir('../Source/pack_unpack/*.c') ; ...
        dir('../Source/transpose/*.c') ; ...
        dir('../Source/select/*.c') ; ...
        dir('../Source/mxm/*.c') ; ...
        dir('../Source/FactoryKernels/*.c') ; ...
        % use Tcov/PreJIT kernels ...
        dir('PreJIT/*.c') ; ...
        % not the PreJIT kernels in the primary source:
        % dir('../PreJIT/*.c') ; ...
        % dir('../Config/GB_prejit.c') ; ...
        dir('../JITpackage/*.c')
        ] ;

count = grbcover_edit (cfiles, count, 'tmp_source') ;
fprintf ('cfile count: %d\n', count) ;

% save the count
fp = fopen ('tmp_cover/count', 'w') ;
fprintf (fp, '%d\n', count) ;
fclose (fp) ;

% revise this to match Source/Template/GB_coverage.h
GBCOVER_MAX = 31000 ;
assert (count < GBCOVER_MAX) ;

% compile the libgraphblas_tcov.so library

have_octave = (exist ('OCTAVE_VERSION', 'builtin') == 5) ;
if (have_octave)
    need_rename = false ;
else
    need_rename = ~verLessThan ('matlab', '9.10') ;
end

if (need_rename)
    fprintf ('Rename with -DGBMATLAB=1\n') ;
    system (sprintf ('make -j%d MATLAB="-DGBMATLAB=1"', feature ('numcores'))) ;
else
    system (sprintf ('make -j%d', feature ('numcores'))) ;
end

