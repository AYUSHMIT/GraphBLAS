FIXME: delete when publishing stable version

New saxpy method:

    C<#M> += A*B when C is initially full, and remains so.

    C may be iso on input but is normally non-iso on output,
    unless A and B are both iso and full and no mask is present.

    No replace option.
    Mask: can be NULL, M, or !M, structural or valued.

    accum op must be present, and must match the monoid.
    no typecasting allowed, at all.

    disabled if GBCOMPACT is turned on.

        C<#M> += A*B: handle the mask if present

            If M is bitmap, structural, and not complemented
                Mb = M->b
            else
                allocate Mb as a dense bitmap and fill it with M
                complemented mask is explicitly complemented

            or better yet, call it Cb since the Cb bitmap
            is needed for some methods below (atomics)

    Now there are 2 methods left:

        C += A*B        Mb is NULL
        C{M} += A*B     using the mask bitmap, Mb


    A and B can be hyper/sparse / bitmap / full (3 cases)
    hyper/sparse: treat as one case.

        F += S*S

            mix of fine/coarse Gustavson tasks; see GB_AxB_saxpy_template.
            no Gustavson workspace needed; accumulate directly into Cx.
            No symbolic phase needed.

        F += S*B

            use existing Template/GB_bitmap_AxB_saxpy_A_sparse_B_bitmap,
            but with Cb implicitly all true (#if's).

            if atomics are used, need to create Cb and set it all to 1's,
            then free it when done.

C = A*B   A sparse, by col, B full by col: C is full!
C = identity
C += A*B
C = GrB_mxm (A,B) ; the GrB result

        F += S*F

            use existing Template/GB_bitmap_AxB_saxpy_A_sparse_B_bitmap,
            but with Cb implicitly all true (#if's).

        F += B*S

            uses dot products

        F += B*B

            use existing Template/GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap,
            but with Cb implicitly all true (#if's).

        F += B*F

            use existing Template/GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap,
            but with Cb implicitly all true (#if's).

        F += F*S

            uses dot products

        F += F*B

            use existing Template/GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap,
            but with Cb implicitly all true (#if's).

        F += F*F

            use existing Template/GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap,
            but with Cb implicitly all true (#if's).

    These methods are identical to the ones above, but
    templatized with the mask bitmap present.

        F{M} += S*S

        F{M} += S*B

        F{M} += S*F

        F{M} += B*S

        F{M} += B*B

        F{M} += B*F

        F{M} += F*S

        F{M} += F*B

        F{M} += F*F

