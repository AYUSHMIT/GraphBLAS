Device: 0: memory: 34052177920 SMs: 80 compute: 7.7
    GraphBLAS type: WildType user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
WildType size: 128
    GraphBLAS type: WildType user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;

a wildtype scalar: scalar1 [this is from scalar1]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      203.0 
     300.0      301.0      302.0      303.0 

a wildtype scalar: got scalar2 = C(7,2) [this is A(2,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      203.0 
     300.0      301.0      302.0      303.0 

    GraphBLAS BinaryOp: WildAdd (user-defined) z=wildtype_add(x,y)
    GraphBLAS type: ztype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: xtype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: ytype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
#include <stdio.h> 
void wildtype_add (wildtype *z, const wildtype *x, const wildtype *y) 
{ 
   for (int i = 0 ; i < 4 ; i++) 
   { 
       for (int j = 0 ; j < 4 ; j++) 
       { 
           z->stuff [i][j] = x->stuff [i][j] + y->stuff [i][j] ; 
       } 
   } 
   sprintf (z->whatstuff, "this was added") ; 
} 


    GraphBLAS BinaryOp: WildMult (user-defined) z=wildtype_mult(x,y)
    GraphBLAS type: ztype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: xtype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: ytype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
#include <stdio.h> 
void wildtype_mult (wildtype *z, const wildtype *x, const wildtype *y) 
{ 
   for (int i = 0 ; i < 4 ; i++) 
   { 
       for (int j = 0 ; j < 4 ; j++) 
       { 
           z->stuff [i][j] = 0 ; 
           for (int k = 0 ; k < 4 ; k++) 
           { 
               z->stuff [i][j] += (x->stuff [i][k] * y->stuff [k][j]) ; 
           } 
       } 
   } 
   sprintf (z->whatstuff, "this was multiplied") ; 
} 


a wildtype scalar: scalar2 [here is scalar2]
       0.5        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

a wildtype scalar: scalar_identity for the monoid [identity]
       0.0        0.0        0.0        0.0 
       0.0        0.0        0.0        0.0 
       0.0        0.0        0.0        0.0 
       0.0        0.0        0.0        0.0 

    GraphBLAS Semiring: InTheWild (user-defined)
    GraphBLAS Monoid: semiring->add (user-defined)
    GraphBLAS BinaryOp: monoid->op (user-defined) z=wildtype_add(x,y)
    GraphBLAS type: ztype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: xtype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: ytype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
#include <stdio.h> 
void wildtype_add (wildtype *z, const wildtype *x, const wildtype *y) 
{ 
   for (int i = 0 ; i < 4 ; i++) 
   { 
       for (int j = 0 ; j < 4 ; j++) 
       { 
           z->stuff [i][j] = x->stuff [i][j] + y->stuff [i][j] ; 
       } 
   } 
   sprintf (z->whatstuff, "this was added") ; 
} 

    identity: [ [user-defined value] ] 

    GraphBLAS BinaryOp: semiring->multiply (user-defined) z=wildtype_mult(x,y)
    GraphBLAS type: ztype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: xtype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    GraphBLAS type: ytype user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
#include <stdio.h> 
void wildtype_mult (wildtype *z, const wildtype *x, const wildtype *y) 
{ 
   for (int i = 0 ; i < 4 ; i++) 
   { 
       for (int j = 0 ; j < 4 ; j++) 
       { 
           z->stuff [i][j] = 0 ; 
           for (int k = 0 ; k < 4 ; k++) 
           { 
               z->stuff [i][j] += (x->stuff [i][k] * y->stuff [k][j]) ; 
           } 
       } 
   } 
   sprintf (z->whatstuff, "this was multiplied") ; 
} 


multiplication C=A*B InTheWild semiring:

Printing the matrix with GxB_Matrix_fprint:

  10x10 GraphBLAS wildtype matrix, sparse by row
  max # entries: 4
  vlen: 10 nvec_nonempty: 2 nvec: 10 plen: 10 vdim: 10
  hyper_switch 0.0625 bitmap_switch 0.1
  sparsity control: hyper/sparse/bitmap/full
  header 0x7fb7c8000200 number of memory blocks: 4
  deep: 928 shallow: 0 total: 928
    GraphBLAS type:  user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
  ->h: (nil) shallow: 0 size: 0
  ->p: 0x7fb7c8002100 shallow: 0 size: 128
  ->i: 0x7fb7c804ae00 shallow: 0 size: 32
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c804af00 shallow: 0 size: 512
  ->Y: (nil) shallow: 0
  input A, 3 entries, memory: 928 bytes

  row: 0 : 0 entries [0:-1]
  row: 1 : 0 entries [0:-1]
  row: 2 : 2 entries [0:1]
    column 4: [user-defined value]
    column 7: [user-defined value]
  row: 3 : 1 entries [2:2]
    column 7: [user-defined value]
  row: 4 : 0 entries [3:2]
  row: 5 : 0 entries [3:2]
  row: 6 : 0 entries [3:2]
  row: 7 : 0 entries [3:2]
  row: 8 : 0 entries [3:2]
  row: 9 : 0 entries [3:2]
  Pending (nil)


============= printing the WildType matrix: input A (10-by-10 with 3 entries)

----------- input A(2,4):

a wildtype scalar:  [this is A(2,4)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      909.0 
     300.0      301.0      302.0       42.0 

----------- input A(2,7):

a wildtype scalar:  [this is A(2,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      203.0 
     300.0      301.0      302.0      303.0 

----------- input A(3,7):

a wildtype scalar:  [this is A(3,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      909.0 
     300.0      301.0      302.0      303.0 

============= that was the WildType matrix input A

Printing the matrix with GxB_Matrix_fprint:

  10x10 GraphBLAS wildtype matrix, hypersparse by row
  max # entries: 1
  vlen: 10 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 10
  hyper_switch 0.0625 bitmap_switch 0.1
  sparsity control: hyper/sparse/bitmap/full
  header 0x7fb7c800aa00 number of memory blocks: 13
  deep: 37744 shallow: 0 total: 37744
    GraphBLAS type:  user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
  ->h: 0x7fb7c8000400 shallow: 0 size: 8
  ->p: 0x7fb7c800a500 shallow: 0 size: 16
  ->i: 0x7fb7c8000a00 shallow: 0 size: 8
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c804ba00 shallow: 0 size: 128
  ->Y: 0x7fb7c800a400 shallow: 0
  input B, 1 entry, memory: 36.9 KB
  pending tuples: 2 max pending: 256 zombies: 0

  row: 7 : 1 entries [0:0]
    column 2: [user-defined value]
  Pending 0x7fb7c8000e00
  Pending->i 0x7fb7c8000f00
  Pending->j 0x7fb7c8001700
  Pending->x 0x7fb7c8002200
  pending tuples:
    GraphBLAS type:  user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
    row: 7 col: 5 [user-defined value]
    row: 4 col: 2 [user-defined value]
  pending operator: implicit 2nd


  10x4 GraphBLAS uint64_t matrix, sparse by col
  max # entries: 1
  vlen: 10 nvec_nonempty: 1 nvec: 4 plen: 4 vdim: 4
  hyper_switch -1 bitmap_switch 0.06
  sparsity control: sparse only
  header 0x7fb7c800a400 number of memory blocks: 4
  deep: 336 shallow: 0 total: 336
    GraphBLAS type:  uint64_t size: 8
  ->h: (nil) shallow: 0 size: 0
  ->p: 0x7fb7c8000d00 shallow: 0 size: 64
  ->i: 0x7fb7c8000700 shallow: 0 size: 8
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c8000b00 shallow: 0 size: 8
  ->Y: (nil) shallow: 0
  Y hyper_hash, 1 entry, memory: 336 bytes

  column: 0 : 0 entries [0:-1]
  column: 1 : 1 entries [0:0]
    row 7:   0
  column: 2 : 0 entries [1:0]
  column: 3 : 0 entries [1:0]
  Pending (nil)


============= printing the WildType matrix: input B (10-by-10 with 3 entries)

----------- input B(4,2):

a wildtype scalar:  [finally, B(4,2)]
      -1.0        1.5        2.5       77.0 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

----------- input B(7,2):

a wildtype scalar:  [this is B(7,2)]
       0.5        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

----------- input B(7,5):

a wildtype scalar:  [here is B(7,5)]
      -1.0        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

============= that was the WildType matrix input B

a wildtype scalar: x for multiply: [this is A(2,4)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      909.0 
     300.0      301.0      302.0       42.0 

a wildtype scalar: y for multiply: [finally, B(4,2)]
      -1.0        1.5        2.5       77.0 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

do the multiply:
   [this was multiplied] = [this is A(2,4)] * [finally, B(4,2)]

a wildtype scalar: z = x*y: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0     8157.0 
   -2876.0    -1064.0      448.0    16660.0 
   -1008.5      386.5     1331.5    24326.5 

a wildtype scalar: x for multiply: [this is A(2,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      203.0 
     300.0      301.0      302.0      303.0 

a wildtype scalar: y for multiply: [this is B(7,2)]
       0.5        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

do the multiply:
   [this was multiplied] = [this is A(2,7)] * [this is B(7,2)]

a wildtype scalar: z = x*y: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -411.0       -5.0      401.0      807.0 
    -811.0       -5.0      801.0     1607.0 
   -1211.0       -5.0     1201.0     2407.0 

a wildtype scalar: x for add: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0     8157.0 
   -2876.0    -1064.0      448.0    16660.0 
   -1008.5      386.5     1331.5    24326.5 

a wildtype scalar: y for add: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -411.0       -5.0      401.0      807.0 
    -811.0       -5.0      801.0     1607.0 
   -1211.0       -5.0     1201.0     2407.0 

do the add:
    [this was added] = [this was added] + [this was multiplied]

a wildtype scalar: z = x+y: [this was added]
     -22.0      -10.0        2.0       14.0 
    -972.0      -10.0      802.0     8964.0 
   -3687.0    -1069.0     1249.0    18267.0 
   -2219.5      381.5     2532.5    26733.5 

a wildtype scalar: x for multiply: [this is A(2,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      203.0 
     300.0      301.0      302.0      303.0 

a wildtype scalar: y for multiply: [here is B(7,5)]
      -1.0        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

do the multiply:
   [this was multiplied] = [this is A(2,7)] * [here is B(7,5)]

a wildtype scalar: z = x*y: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0      807.0 
   -1111.0       -5.0      801.0     1607.0 
   -1661.0       -5.0     1201.0     2407.0 

a wildtype scalar: x for multiply: [this is A(3,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      909.0 
     300.0      301.0      302.0      303.0 

a wildtype scalar: y for multiply: [this is B(7,2)]
       0.5        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

do the multiply:
   [this was multiplied] = [this is A(3,7)] * [this is B(7,2)]

a wildtype scalar: z = x*y: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -411.0       -5.0      401.0      807.0 
   -2576.0    -1064.0      448.0     1960.0 
   -1211.0       -5.0     1201.0     2407.0 

a wildtype scalar: x for multiply: [this is A(3,7)]
       0.0        1.0        2.0        3.0 
     100.0      101.0      102.0      103.0 
     200.0      201.0      202.0      909.0 
     300.0      301.0      302.0      303.0 

a wildtype scalar: y for multiply: [here is B(7,5)]
      -1.0        1.5        2.5        3.5 
      -0.5        0.5        1.5        2.5 
      -1.5       -0.5        0.5        1.5 
      -2.5       -1.5       -0.5        0.5 

do the multiply:
   [this was multiplied] = [this is A(3,7)] * [here is B(7,5)]

a wildtype scalar: z = x*y: [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0      807.0 
   -2876.0    -1064.0      448.0     1960.0 
   -1661.0       -5.0     1201.0     2407.0 

Printing the matrix with GxB_Matrix_fprint:

  10x10 GraphBLAS wildtype matrix, sparse by row
  max # entries: 4
  vlen: 10 nvec_nonempty: 2 nvec: 10 plen: 10 vdim: 10
  hyper_switch 0.0625 bitmap_switch 0.1
  sparsity control: hyper/sparse/bitmap/full
  header 0x7fb7c8000600 number of memory blocks: 4
  deep: 928 shallow: 0 total: 928
    GraphBLAS type:  user-defined: [wildtype] size: 128
    typedef struct { float stuff [4][4] ; char whatstuff [64] ; } wildtype ;
  ->h: (nil) shallow: 0 size: 0
  ->p: 0x7fb7c8000e00 shallow: 0 size: 128
  ->i: 0x7fb7c800a600 shallow: 0 size: 32
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c804c200 shallow: 0 size: 512
  ->Y: (nil) shallow: 0
  output C, 4 entries, memory: 928 bytes

  row: 0 : 0 entries [0:-1]
  row: 1 : 0 entries [0:-1]
  row: 2 : 2 entries [0:1]
    column 2: [user-defined value]
    column 5: [user-defined value]
  row: 3 : 2 entries [2:3]
    column 2: [user-defined value]
    column 5: [user-defined value]
  row: 4 : 0 entries [4:3]
  row: 5 : 0 entries [4:3]
  row: 6 : 0 entries [4:3]
  row: 7 : 0 entries [4:3]
  row: 8 : 0 entries [4:3]
  row: 9 : 0 entries [4:3]
  Pending (nil)


============= printing the WildType matrix: output C (10-by-10 with 4 entries)

----------- output C(2,2):

a wildtype scalar:  [this was added]
     -22.0      -10.0        2.0       14.0 
    -972.0      -10.0      802.0     8964.0 
   -3687.0    -1069.0     1249.0    18267.0 
   -2219.5      381.5     2532.5    26733.5 

----------- output C(2,5):

a wildtype scalar:  [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0      807.0 
   -1111.0       -5.0      801.0     1607.0 
   -1661.0       -5.0     1201.0     2407.0 

----------- output C(3,2):

a wildtype scalar:  [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -411.0       -5.0      401.0      807.0 
   -2576.0    -1064.0      448.0     1960.0 
   -1211.0       -5.0     1201.0     2407.0 

----------- output C(3,5):

a wildtype scalar:  [this was multiplied]
     -11.0       -5.0        1.0        7.0 
    -561.0       -5.0      401.0      807.0 
   -2876.0    -1064.0      448.0     1960.0 
   -1661.0       -5.0     1201.0     2407.0 

============= that was the WildType matrix output C

------ C<C>=C*C'----------------------------------------

The mask matrix M:

  10x10 GraphBLAS bool matrix, hypersparse by row
  max # entries: 0
  vlen: 10 nvec_nonempty: 0 nvec: 0 plen: 1 vdim: 10
  hyper_switch 0.0625 bitmap_switch 0.1
  sparsity control: hyper/sparse/bitmap/full
  header 0x7fb7c804bc00 number of memory blocks: 11
  deep: 4848 shallow: 0 total: 4848
    GraphBLAS type:  bool size: 1
  ->h: 0x7fb7c8000a00 shallow: 0 size: 8
  ->p: 0x7fb7c8000300 shallow: 0 size: 16
  ->i: (nil) shallow: 0 size: 0
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c8000b00 shallow: 0 size: 8
  ->Y: 0x7fb7c8001f00 shallow: 0
  M, no entries, memory: 4.7 KB
  iso value:   1
  pending tuples: 4 max pending: 256 zombies: 0
  Pending 0x7fb7c8000500
  Pending->i 0x7fb7c8000f00
  Pending->j 0x7fb7c8001700
  Pending->x (nil)
  pending tuples:
    GraphBLAS type:  int32_t size: 4
    row: 2 col: 2 
    row: 2 col: 3 
    row: 3 col: 2 
    row: 3 col: 3 
  pending operator: implicit 2nd


  10x4 GraphBLAS uint64_t matrix, sparse by col
  max # entries: 1
  vlen: 10 nvec_nonempty: 0 nvec: 4 plen: 4 vdim: 4
  hyper_switch -1 bitmap_switch 0.06
  sparsity control: sparse only
  header 0x7fb7c8001f00 number of memory blocks: 4
  deep: 336 shallow: 0 total: 336
    GraphBLAS type:  uint64_t size: 8
  ->h: (nil) shallow: 0 size: 0
  ->p: 0x7fb7c8000d00 shallow: 0 size: 64
  ->i: 0x7fb7c8000700 shallow: 0 size: 8
  ->b: (nil) shallow: 0 size: 0
  ->x: 0x7fb7c8000400 shallow: 0 size: 8
  ->Y: (nil) shallow: 0
  Y hyper_hash, no entries, memory: 336 bytes
  column: 0 : 0 entries [0:-1]
  column: 1 : 0 entries [0:-1]
  column: 2 : 0 entries [0:-1]
  column: 3 : 0 entries [0:-1]
  Pending (nil)

 [ GrB_mxm (iso wait:M 0 zombies, 4 pending) (iso build) (hyper to sparse) C<M>=A'*B, masked_dot_product (dot3) (S{S} = S'*S) (using the GPU: 4)  work:1.6 GPUs:4 (GPU dot3) (GPU C created and copied from M) (GPU stringified srcode = 35993745491947093)
(GPU phase1 start nblk = 1) ---------------------------------------------------
--- JIT compile log for GB_jit_AxB_dot3_phase1 ---
---------------------------------------------------
/home/faculty/d/davis/.SuiteSparse/GraphBLAS/7.3.0/GB_mxm_35993745491947093.h(20): error: identifier "sprintf" is undefined

/home/faculty/d/davis/.SuiteSparse/GraphBLAS/7.3.0/GB_mxm_35993745491947093.h(28): error: identifier "__static__" is undefined

/home/faculty/d/davis/.SuiteSparse/GraphBLAS/7.3.0/GB_mxm_35993745491947093.h(28): error: expected a ";"

limits(115): error: identifier "CHAR_MIN" is undefined

limits(115): error: identifier "CHAR_MAX" is undefined

5 errors detected in the compilation of "GB_jit_AxB_dot3_phase1".
 
---------------------------------------------------
