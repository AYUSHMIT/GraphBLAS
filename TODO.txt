THIS IS A DRAFT.  The following features/revisions will appear in the stable
v8.0.0 release (or in v8.x for some x > 0):

* NOTE: remove prior JIT kernels!

    If you have JIT kernels in your ~/.SuiteSparse/GraphBLAS/8.0.0 folder,
    delete them.  Normally, a new version of GraphBLAS will create a new folder
    and ignore the old one, but this draft is still numbered 8.0.0.  Its
    kernels are incompatible with the earlier DRAFT* versions of 8.0.0,
    however.

* Linking:

    I plan to use function pointers to any required GB* routines in a single
    struct, so the JIT can pass it to each JIT kernel.  Then the JIT kernel
    does not need to be linked against libgraphblas.so itself.

* Ingest source:

    I plan to add all of Source/Template into libgraphblas.so itself,
    compressing it first with zstd.  Then GrB_init can write all this source
    code into the user's cache path, ~/.SuiteSparse/GraphBLAS/8.0.0_source (for
    example).  Then the GRAPHBLAS_SOURCE_PATH can be removed.

* Atomics:

    Can some "seq_cst" atomic clauses be safely removed?  I'm unsure.
    The current version gives correct results on the Arm (see the bug fix
    made for v7.4.4, also included here).

* Windows:

    The JIT needs to be ported to Windows.  This draft will not compile on
    Windows with the JIT enabled.  I think it will compile with -DNJIT
    but I haven't tested it.

* compiler warnings:

    using clang leads to some compiler warnings when compiling the demos
    (typecasting complex types).  These are safe but need to be silenced.

* better performance:

    This draft is thread-safe when used in a multithread user application,
    but a better JIT critical section (many readers, 1 writer) is needed.
    The current critical section may be sufficiently fast since the typical
    case of work done inside the critical section is a single hash table
    lookup.  However, the performance issues related to this have not been
    tested.

* more JIT kernels:

    I have 42 JIT kernels in this version, but could add 44 more for
    GrB_assign (34 kernels), subref (3 kernels), masker (2 kernels), and other
    (5 kernels).  Grep the source code for "JIT: needed" for a list.  The
    current JIT kernels cover all the "generic" kernels in SuiteSparse
    GraphBLAS v7.x and earlier for which "factory" kernels are available.
    However, in those versions, some kernels are only generic.  This draft does
    not accelerate those, but they will be accelerated by the JIT in v8.x.

* FIXMEs:

    Lots of FIXME's tagged in the Source/ folder.  These are not broken
    features, but some will be done for v8.0.0.  Many of these are optional and
    should be tagged FUTURE instead.

* User-defined operators with NULL function pointers:

    With the JIT, I could compile kernels for user-defined operators that have
    no function pointer, but just the strings that define the function.  These
    kernels would require the JIT to function, and would allow systems in other
    languages such as Python, Julia, and MATLAB to create operators at run-time
    without the need for those systems to pass me a pointer to a pre-compiled C
    function.

* Thread-safety:

    GraphBLAS is thread-safe when used in a single multithreaded user
    application, even when multiple user threads try to compile the same JIT
    kernel at the same time.  However, if the user runs multiple instances of
    GraphBLAS at the same time, from entirely different user processed, and
    each of them attempts to compile the same JIT kernels, a file read/write
    conflict will occur on your ~/.SuiteSparse/GraphBLAS/8.0.0 folder.  I need
    a portable file-locking mechanism for Linux/Unix, Mac, and Windows.  As a
    short-term workaround, each user application should use its own cache
    folder, instead of sharing a single default cache folder.

